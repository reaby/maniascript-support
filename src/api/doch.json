{
  "primitives": [
    "Text",
    "Vec2",
    "Vec3",
    "Void",
    "Real",
    "Integer",
    "Boolean",
    "Int3",
    "Int2"
  ],
  "namespaces": {
    "MathLib": {
      "enums": {},
      "methods": [
        {
          "name": "Abs",
          "returns": "Integer",
          "params": [{ "identifier": "Integer", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Abs",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "ToReal",
          "returns": "Real",
          "params": [{ "identifier": "Integer", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "DegToRad",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Degree" }],
          "documentation": "\\brief Converts an angle from degrees to radians."
        },
        {
          "name": "RadToDeg",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Radian" }],
          "documentation": "\\brief Converts an angle from radians to degrees."
        },
        {
          "name": "Sin",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Cos",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Tan",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Atan2",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_Argument1" },
            { "identifier": "Real", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "Exp",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Rand",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_Argument1" },
            { "identifier": "Real", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "Rand",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_Argument1" },
            { "identifier": "Real", "argument": "_Argument2" },
            { "identifier": "Integer", "argument": "_Argument3" }
          ],
          "documentation": ""
        },
        {
          "name": "Rand",
          "returns": "Integer",
          "params": [
            { "identifier": "Integer", "argument": "_Argument1" },
            { "identifier": "Integer", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "Rand",
          "returns": "Integer",
          "params": [
            { "identifier": "Integer", "argument": "_Argument1" },
            { "identifier": "Integer", "argument": "_Argument2" },
            { "identifier": "Integer", "argument": "_Argument3" }
          ],
          "documentation": ""
        },
        {
          "name": "NearestReal",
          "returns": "Real",
          "params": [{ "identifier": "Integer", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "NearestInteger",
          "returns": "Integer",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "FloorInteger",
          "returns": "Integer",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "TruncInteger",
          "returns": "Integer",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "CeilingInteger",
          "returns": "Integer",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Distance",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_Argument1" },
            { "identifier": "Real", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "Distance",
          "returns": "Real",
          "params": [
            { "identifier": "Vec2", "argument": "_Argument1" },
            { "identifier": "Vec2", "argument": "_Argument2" }
          ],
          "documentation": "\\brief Euclidian distance between two 2d points."
        },
        {
          "name": "Distance",
          "returns": "Real",
          "params": [
            { "identifier": "Vec3", "argument": "_Argument1" },
            { "identifier": "Vec3", "argument": "_Argument2" }
          ],
          "documentation": "\\brief Euclidian distance between two 3d points."
        },
        {
          "name": "Length",
          "returns": "Real",
          "params": [{ "identifier": "Vec2", "argument": "_Argument1" }],
          "documentation": "\\brief Euclidian norm of the vector."
        },
        {
          "name": "Length",
          "returns": "Real",
          "params": [{ "identifier": "Vec3", "argument": "_Argument1" }],
          "documentation": "\\brief Euclidian norm of the vector."
        },
        {
          "name": "Norm0",
          "returns": "Real",
          "params": [{ "identifier": "Vec2", "argument": "_Argument1" }],
          "documentation": "\\brief Returns maximum of the absolute value of each component."
        },
        {
          "name": "Norm1",
          "returns": "Real",
          "params": [{ "identifier": "Vec2", "argument": "_Argument1" }],
          "documentation": "\\brief Returns the sum of the absolute value of each component."
        },
        {
          "name": "Norm0",
          "returns": "Real",
          "params": [{ "identifier": "Vec3", "argument": "_Argument1" }],
          "documentation": "\\brief Returns maximum of the absolute value of each component."
        },
        {
          "name": "Norm1",
          "returns": "Real",
          "params": [{ "identifier": "Vec3", "argument": "_Argument1" }],
          "documentation": "\\brief Returns the sum of the absolute value of each component."
        },
        {
          "name": "Norm0",
          "returns": "Integer",
          "params": [{ "identifier": "Int2", "argument": "_Argument1" }],
          "documentation": "\\brief Returns maximum of the absolute value of each component."
        },
        {
          "name": "Norm1",
          "returns": "Integer",
          "params": [{ "identifier": "Int2", "argument": "_Argument1" }],
          "documentation": "\\brief Returns the sum of the absolute value of each component."
        },
        {
          "name": "Norm0",
          "returns": "Integer",
          "params": [{ "identifier": "Int3", "argument": "_Argument1" }],
          "documentation": "\\brief Returns maximum of the absolute value of each component."
        },
        {
          "name": "Norm1",
          "returns": "Integer",
          "params": [{ "identifier": "Int3", "argument": "_Argument1" }],
          "documentation": "\\brief Returns the sum of the absolute value of each component."
        },
        {
          "name": "DotProduct",
          "returns": "Real",
          "params": [
            { "identifier": "Vec3", "argument": "_Argument1" },
            { "identifier": "Vec3", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "CrossProduct",
          "returns": "Vec3",
          "params": [
            { "identifier": "Vec3", "argument": "_Argument1" },
            { "identifier": "Vec3", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "DotProduct",
          "returns": "Real",
          "params": [
            { "identifier": "Vec2", "argument": "_Argument1" },
            { "identifier": "Vec2", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "DotProduct",
          "returns": "Integer",
          "params": [
            { "identifier": "Int3", "argument": "_Argument1" },
            { "identifier": "Int3", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "CrossProduct",
          "returns": "Int3",
          "params": [
            { "identifier": "Int3", "argument": "_Argument1" },
            { "identifier": "Int3", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "DotProduct",
          "returns": "Integer",
          "params": [
            { "identifier": "Int2", "argument": "_Argument1" },
            { "identifier": "Int2", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "Angle",
          "returns": "Real",
          "params": [
            { "identifier": "Vec3", "argument": "_Argument1" },
            { "identifier": "Vec3", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "OrientedAngle",
          "returns": "Real",
          "params": [
            { "identifier": "Vec3", "argument": "_Argument1" },
            { "identifier": "Vec3", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "Angle",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_Radian1" },
            { "identifier": "Real", "argument": "_Radian2" }
          ],
          "documentation": "\\brief Returns the smallest angle from A to B"
        },
        {
          "name": "Angle",
          "returns": "Real",
          "params": [
            { "identifier": "Vec2", "argument": "_Argument1" },
            { "identifier": "Vec2", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "OrientedAngle",
          "returns": "Real",
          "params": [
            { "identifier": "Vec2", "argument": "_Argument1" },
            { "identifier": "Vec2", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        { "name": "PI", "returns": "Real", "params": [], "documentation": "" },
        {
          "name": "Asin",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Acos",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Pow",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_Argument1" },
            { "identifier": "Real", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "Ln",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Sqrt",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Max",
          "returns": "Integer",
          "params": [
            { "identifier": "Integer", "argument": "_A" },
            { "identifier": "Integer", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the maximum between A and B"
        },
        {
          "name": "Min",
          "returns": "Integer",
          "params": [
            { "identifier": "Integer", "argument": "_A" },
            { "identifier": "Integer", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the minimum between A and B"
        },
        {
          "name": "Clamp",
          "returns": "Integer",
          "params": [
            { "identifier": "Integer", "argument": "_X" },
            { "identifier": "Integer", "argument": "_Min" },
            { "identifier": "Integer", "argument": "_Max" }
          ],
          "documentation": "\\brief Returns the value X clamped to the range Min..Max"
        },
        {
          "name": "Max",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_A" },
            { "identifier": "Real", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the maximum between A and B"
        },
        {
          "name": "Min",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_A" },
            { "identifier": "Real", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the minimum between A and B"
        },
        {
          "name": "Clamp",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_X" },
            { "identifier": "Real", "argument": "_Min" },
            { "identifier": "Real", "argument": "_Max" }
          ],
          "documentation": "\\brief Returns the value X clamped to the range Min..Max"
        },
        {
          "name": "Mod",
          "returns": "Real",
          "params": [
            { "identifier": "Real", "argument": "_X" },
            { "identifier": "Real", "argument": "_Min" },
            { "identifier": "Real", "argument": "_Max" }
          ],
          "documentation": "\\brief Returns the modulus of X in the range Min..Max"
        },
        {
          "name": "Max",
          "returns": "Vec2",
          "params": [
            { "identifier": "Vec2", "argument": "_A" },
            { "identifier": "Vec2", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the maximum between A and B"
        },
        {
          "name": "Min",
          "returns": "Vec2",
          "params": [
            { "identifier": "Vec2", "argument": "_A" },
            { "identifier": "Vec2", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the minimum between A and B"
        },
        {
          "name": "Clamp",
          "returns": "Vec2",
          "params": [
            { "identifier": "Vec2", "argument": "_X" },
            { "identifier": "Vec2", "argument": "_Min" },
            { "identifier": "Vec2", "argument": "_Max" }
          ],
          "documentation": "\\brief Returns the value X clamped to the range Min..Max"
        },
        {
          "name": "Max",
          "returns": "Vec3",
          "params": [
            { "identifier": "Vec3", "argument": "_A" },
            { "identifier": "Vec3", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the maximum between A and B"
        },
        {
          "name": "Min",
          "returns": "Vec3",
          "params": [
            { "identifier": "Vec3", "argument": "_A" },
            { "identifier": "Vec3", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the minimum between A and B"
        },
        {
          "name": "Clamp",
          "returns": "Vec3",
          "params": [
            { "identifier": "Vec3", "argument": "_X" },
            { "identifier": "Vec3", "argument": "_Min" },
            { "identifier": "Vec3", "argument": "_Max" }
          ],
          "documentation": "\\brief Returns the value X clamped to the range Min..Max"
        },
        {
          "name": "Max",
          "returns": "Int2",
          "params": [
            { "identifier": "Int2", "argument": "_A" },
            { "identifier": "Int2", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the maximum between A and B"
        },
        {
          "name": "Min",
          "returns": "Int2",
          "params": [
            { "identifier": "Int2", "argument": "_A" },
            { "identifier": "Int2", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the minimum between A and B"
        },
        {
          "name": "Clamp",
          "returns": "Int2",
          "params": [
            { "identifier": "Int2", "argument": "_X" },
            { "identifier": "Int2", "argument": "_Min" },
            { "identifier": "Int2", "argument": "_Max" }
          ],
          "documentation": "\\brief Returns the value X clamped to the range Min..Max"
        },
        {
          "name": "Max",
          "returns": "Int3",
          "params": [
            { "identifier": "Int3", "argument": "_A" },
            { "identifier": "Int3", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the maximum between A and B"
        },
        {
          "name": "Min",
          "returns": "Int3",
          "params": [
            { "identifier": "Int3", "argument": "_A" },
            { "identifier": "Int3", "argument": "_B" }
          ],
          "documentation": "\\brief Returns the minimum between A and B"
        },
        {
          "name": "Clamp",
          "returns": "Int3",
          "params": [
            { "identifier": "Int3", "argument": "_X" },
            { "identifier": "Int3", "argument": "_Min" },
            { "identifier": "Int3", "argument": "_Max" }
          ],
          "documentation": "\\brief Returns the value X clamped to the range Min..Max"
        }
      ]
    },
    "TextLib": {
      "enums": {},
      "methods": [
        {
          "name": "ToReal",
          "returns": "Real",
          "params": [{ "identifier": "Text", "argument": "_Text" }],
          "documentation": "\\brief Returns the Real corresponding to _Text\nReturns -1 if an invalid Text is given\n\\param _Text : The text you want to convert into a Real"
        },
        {
          "name": "ToInteger",
          "returns": "Integer",
          "params": [{ "identifier": "Text", "argument": "_Text" }],
          "documentation": "\\brief Returns the Integer corresponding to _Text\nReturns -1 if an invalid Text is given\n\\param _Text : The text you want to convert into an Integer"
        },
        {
          "name": "ToColor",
          "returns": "Vec3",
          "params": [{ "identifier": "Text", "argument": "_Text" }],
          "documentation": "\\brief Returns the RGB color corresponding to _Text\nReturns an empty Vec3 if an invalid Text is given\n\\param _Text : The text you want to convert into a RGB color"
        },
        {
          "name": "SubString",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Text" },
            { "identifier": "Integer", "argument": "_Start" },
            { "identifier": "Integer", "argument": "_Length" }
          ],
          "documentation": "\\brief Returns a substring of _Text\nReturns the substring of _Text beginning at the _Start index, with a length of _Length chars\nReturns an empty Text if _Start > Text.Length or _Length == 0\n\\param _Text : The text in which we look for the substring\n\\param _Start : The beginning index of the substring\n\\param _Length : The length of the substring"
        },
        {
          "name": "SubText",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Text" },
            { "identifier": "Integer", "argument": "_Start" },
            { "identifier": "Integer", "argument": "_Length" }
          ],
          "documentation": "\\brief Returns a substring of _Text\nReturns the substring of _Text beginning at the _Start index, with a length of _Length chars\nReturns an empty Text if _Start > Text.Length or _Length == 0\n\\param _Text : The text in which we look for the substring\n\\param _Start : The beginning index of the substring\n\\param _Length : The length of the substring"
        },
        {
          "name": "Length",
          "returns": "Integer",
          "params": [{ "identifier": "Text", "argument": "_Text" }],
          "documentation": "\\brief Returns the length of _Text\n\\param _Text : The text you want the length"
        },
        {
          "name": "ToText",
          "returns": "Text",
          "params": [{ "identifier": "Integer", "argument": "_Integer" }],
          "documentation": "\\brief Returns the Text corresponding to _Integer\n\\param _Integer : The Integer you want to convert"
        },
        {
          "name": "ToText",
          "returns": "Text",
          "params": [{ "identifier": "Real", "argument": "_Real" }],
          "documentation": "\\brief Returns the Text corresponding to _Real\n\\param _Real : The Real you want to convert"
        },
        {
          "name": "ToText",
          "returns": "Text",
          "params": [{ "identifier": "Boolean", "argument": "_Boolean" }],
          "documentation": "\\brief Returns the Text corresponding to _Boolean\n\\param _Boolean : The Boolean you want to convert"
        },
        {
          "name": "ToText",
          "returns": "Text",
          "params": [{ "identifier": "Int3", "argument": "_Int3" }],
          "documentation": "\\brief Returns the Text corresponding to _Int3\n\\param _Int3 : The Int3 you want to convert"
        },
        {
          "name": "ToText",
          "returns": "Text",
          "params": [{ "identifier": "Vec3", "argument": "_Vec3" }],
          "documentation": "\\brief Returns the Text corresponding to _Vec3\n\\param _Vec3 : The Vec3 you want to convert"
        },
        {
          "name": "TimeToText",
          "returns": "Text",
          "params": [{ "identifier": "Integer", "argument": "_Time" }],
          "documentation": "\\brief Returns the Text corresponding to _Time\nConverts a _Time Integer to a Text with the format HhMmSs\nHh will be hidden if _Time is less than one hour.\n\\param _Time : The time you want to convert into a Text"
        },
        {
          "name": "TimeToText",
          "returns": "Text",
          "params": [
            { "identifier": "Integer", "argument": "_Time" },
            { "identifier": "Boolean", "argument": "_IncludeCentiSeconds" }
          ],
          "documentation": "\\brief Returns the Text corresponding to _Time\nConverts a _Time Integer to a Text with the following format :\n- HhMmSsCc if IncludeCentiSeconds is True\n- HhMmSs if there's no activated option\nHh will be hidden if _Time is less than one hour.\n\\param _Time : The time you want to convert into a Text\n\\param _IncludeCentiSeconds : Set IncludeCentiSeconds to True if you want the CentiSeconds to be displayed in the returned Text"
        },
        {
          "name": "TimeToText",
          "returns": "Text",
          "params": [
            { "identifier": "Integer", "argument": "_Time" },
            { "identifier": "Boolean", "argument": "_IncludeCentiSeconds" },
            { "identifier": "Boolean", "argument": "_IncludeMilliSeconds" }
          ],
          "documentation": "\\brief Returns the Text corresponding to _Time\nConverts a _Time Integer to a Text with the following format :\n- HhMmSsMil if IncludeMilliSeconds is True\n- HhMmSsCc if IncludeCentiSeconds is True\n- HhMmSs if there's no activated option\nHh will be hidden if _Time is less than one hour.\n\\param _Time : The time you want to convert into a Text\n\\param _IncludeCentiSeconds : Set IncludeCentiSeconds to True if you want the CentiSeconds to be displayed in the returned Text\n\\param _IncludeMilliSeconds : Set IncludeMilliSeconds to True if you want the MilliSeconds to be displayed in the returned Text"
        },
        {
          "name": "ColorToText",
          "returns": "Text",
          "params": [{ "identifier": "Vec3", "argument": "_Color" }],
          "documentation": "\\brief Returns the Text corresponding to _Color\n\\param _Color : The color you want to convert into a text"
        },
        {
          "name": "FormatInteger",
          "returns": "Text",
          "params": [
            { "identifier": "Integer", "argument": "_Argument1" },
            { "identifier": "Integer", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "FormatRank",
          "returns": "Text",
          "params": [
            { "identifier": "Integer", "argument": "_Rank" },
            { "identifier": "Boolean", "argument": "_ShortFormat" }
          ],
          "documentation": "\\brief Returns the rank corresponding to a number, formatted according to the locale.  ShortFormat: '25k' otherwise '25654th'."
        },
        {
          "name": "FormatReal",
          "returns": "Text",
          "params": [
            { "identifier": "Real", "argument": "_Value" },
            { "identifier": "Integer", "argument": "_FPartLength" },
            { "identifier": "Boolean", "argument": "_HideZeroes" },
            { "identifier": "Boolean", "argument": "_HideDot" }
          ],
          "documentation": "\\brief Returns the Text corresponding to a Real. With formatting\n\\param _Value : The Real value you want to convert\n\\param _FPartLength : The number of digits you want for the FPart\n\\param _HideZeroes : Hide trailing zeroes\n\\param _HideDot : Hide trailing dot if there is nothing after it"
        },
        {
          "name": "ToUpperCase",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "_TextToChange" }],
          "documentation": "\\brief Changes lower case characters to upper case characters"
        },
        {
          "name": "ToLowerCase",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "_TextToChange" }],
          "documentation": "\\brief Changes upper case characters to lower case characters"
        },
        {
          "name": "CloseStyleTags",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "_String" }],
          "documentation": "\\brief Return a string where the previously unclosed $< tags have their $> counterpart"
        },
        {
          "name": "CompareWithoutFormat",
          "returns": "Boolean",
          "params": [
            { "identifier": "Text", "argument": "_Text1" },
            { "identifier": "Text", "argument": "_Text2" },
            { "identifier": "Boolean", "argument": "_IsCaseSensitive" }
          ],
          "documentation": "\\brief Compares texts without taking format characters in account.\nReturns True if Text1 and Text2 are equal.\nFormat differences are not taken into account.\nCase differences are taken into account if IsCaseSensitive is set to True."
        },
        {
          "name": "Find",
          "returns": "Boolean",
          "params": [
            { "identifier": "Text", "argument": "_TextToFind" },
            { "identifier": "Text", "argument": "_TextToSearchIn" },
            { "identifier": "Boolean", "argument": "_IsFormatSensitive" },
            { "identifier": "Boolean", "argument": "_IsCaseSensitive" }
          ],
          "documentation": "\\brief Returns True if the searched text is found in the text to search in.\nFormat is not taken into account if IsFormatSensitive is set to False.\nCase is not taken into account if IsCaseSensitive is set to False.\n\\param _TextToFind : The text you are looking for\n\\param _TextToSearchIn : The text you are searching in\n\\param _IsFormatSensitive : True if you want to take Format into account, False elseway\n\\param _IsCaseSensitive : True if you want to take Case into account, False elseway"
        },
        {
          "name": "EndsWith",
          "returns": "Boolean",
          "params": [
            { "identifier": "Text", "argument": "_TextToFind" },
            { "identifier": "Text", "argument": "_TextToSearchIn" }
          ],
          "documentation": "\\brief Return True if the Text ends with the TextToFind\n\\param _TextToFind : The text you are looking for\n\\param _TextToSearchIn : The text you are searching in"
        },
        {
          "name": "EndsWith",
          "returns": "Boolean",
          "params": [
            { "identifier": "Text", "argument": "_TextToFind" },
            { "identifier": "Text", "argument": "_TextToSearchIn" },
            { "identifier": "Boolean", "argument": "_IsFormatSensitive" },
            { "identifier": "Boolean", "argument": "_IsCaseSensitive" }
          ],
          "documentation": "\\brief Return True if the Text ends with the TextToFind\n\\param _TextToFind : The text you are looking for\n\\param _TextToSearchIn : The text you are searching in\n\\param _IsFormatSensitive : True if you want to take Format into account, False elseway\n\\param _IsCaseSensitive : True if you want to take Case into account, False elseway"
        },
        {
          "name": "StartsWith",
          "returns": "Boolean",
          "params": [
            { "identifier": "Text", "argument": "_TextToFind" },
            { "identifier": "Text", "argument": "_TextToSearchIn" }
          ],
          "documentation": "\\brief Return True if the Text starts with the TextToFind\n\\param _TextToFind : The text you are looking for\n\\param _TextToSearchIn : The text you are searching in"
        },
        {
          "name": "StartsWith",
          "returns": "Boolean",
          "params": [
            { "identifier": "Text", "argument": "_TextToFind" },
            { "identifier": "Text", "argument": "_TextToSearchIn" },
            { "identifier": "Boolean", "argument": "_IsFormatSensitive" },
            { "identifier": "Boolean", "argument": "_IsCaseSensitive" }
          ],
          "documentation": "\\brief Return True if the Text starts with the TextToFind\n\\param _TextToFind : The text you are looking for\n\\param _TextToSearchIn : The text you are searching in\n\\param _IsFormatSensitive : True if you want to take Format into account, False elseway\n\\param _IsCaseSensitive : True if you want to take Case into account, False elseway"
        },
        {
          "name": "Compose",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Compose",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Argument1" },
            { "identifier": "Text", "argument": "_Argument2" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Argument1" },
            { "identifier": "Text", "argument": "_Argument2" },
            { "identifier": "Text", "argument": "_Argument3" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Argument1" },
            { "identifier": "Text", "argument": "_Argument2" },
            { "identifier": "Text", "argument": "_Argument3" },
            { "identifier": "Text", "argument": "_Argument4" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Argument1" },
            { "identifier": "Text", "argument": "_Argument2" },
            { "identifier": "Text", "argument": "_Argument3" },
            { "identifier": "Text", "argument": "_Argument4" },
            { "identifier": "Text", "argument": "_Argument5" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Argument1" },
            { "identifier": "Text", "argument": "_Argument2" },
            { "identifier": "Text", "argument": "_Argument3" },
            { "identifier": "Text", "argument": "_Argument4" },
            { "identifier": "Text", "argument": "_Argument5" },
            { "identifier": "Text", "argument": "_Argument6" }
          ],
          "documentation": ""
        },
        {
          "name": "MLEncode",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "URLEncode",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "StripFormatting",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "Split",
          "returns": "Text[]",
          "params": [
            { "identifier": "Text", "argument": "_Separators" },
            { "identifier": "Text", "argument": "_Text" }
          ],
          "documentation": "\\brief Splits a given text based on a given separators set.\n\\param _Separators : The separators to use\n\\param _Text : The text to split."
        },
        {
          "name": "Split",
          "returns": "Text[]",
          "params": [
            { "identifier": "Text", "argument": "_Separators" },
            { "identifier": "Text", "argument": "_Text" },
            { "identifier": "Boolean", "argument": "_MergeSeparators" }
          ],
          "documentation": "\\brief Splits a given text based on a given separators set.\n\\param _Separators : The separators to use\n\\param _Text : The text to split.\n\\param _MergeSeparators : Separator may be repeated between values (default = true)"
        },
        {
          "name": "Join",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Separator" },
            { "identifier": "Text[]", "argument": "_Texts" }
          ],
          "documentation": "\\brief Joins a set of texts with the given separator\n\\param _Separator : The separator to use\n\\param _Texts : The texts to join."
        },
        {
          "name": "Trim",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "_Argument1" }],
          "documentation": ""
        },
        {
          "name": "ReplaceChars",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Argument1" },
            { "identifier": "Text", "argument": "_Argument2" },
            { "identifier": "Text", "argument": "_Argument3" }
          ],
          "documentation": ""
        },
        {
          "name": "Replace",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Text" },
            { "identifier": "Text", "argument": "_ToReplace" },
            { "identifier": "Text", "argument": "_Replacement" }
          ],
          "documentation": "\\brief Replaces occurences of _ToReplace in _Text with _Replacement\n\\param _Text : The text you search in\n\\param _ToReplace : The text you want to replace\n\\param _Replacement : The text you want to insert"
        },
        {
          "name": "RegexFind",
          "returns": "Text[]",
          "params": [
            { "identifier": "Text", "argument": "_Pattern" },
            { "identifier": "Text", "argument": "_Text" },
            { "identifier": "Text", "argument": "_Flags" }
          ],
          "documentation": "\\brief Find occurences of the _Pattern in the _Text.\n\\param _Pattern : Pattern is a regular expression, similar to javascript syntax.\n\\param _Text :\n\\param _Flags : Flags can be 'g' to find all occurences, 'i' to ignore case, 'm' for multiline mode."
        },
        {
          "name": "RegexMatch",
          "returns": "Text[]",
          "params": [
            { "identifier": "Text", "argument": "_Pattern" },
            { "identifier": "Text", "argument": "_Text" },
            { "identifier": "Text", "argument": "_Flags" }
          ],
          "documentation": "\\brief Captures the groups of the _Pattern in the matching _Text. group[0] is the whole pattern match.\n\\param _Pattern : Pattern is a regular expression, similar to javascript syntax.\n\\param _Text :\n\\param _Flags : Flags can be 'i' to ignore case, 'm' for multiline mode."
        },
        {
          "name": "RegexReplace",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Pattern" },
            { "identifier": "Text", "argument": "_Text" },
            { "identifier": "Text", "argument": "_Flags" },
            { "identifier": "Text", "argument": "_Replacement" }
          ],
          "documentation": "\\brief Replace the _Pattern in the matching text with _Replacement.\n\\param _Pattern : Pattern is a regular expression, similar to javascript syntax.\n\\param _Text :\n\\param _Flags : Flags can be 'g' to find all occurences, 'i' to ignore case, 'm' for multiline mode.\n\\param _Replacement :"
        },
        {
          "name": "GetTranslatedText",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "_Text" }],
          "documentation": "\\brief Lookup the text in the current translation dictionary.\nLookup the text in the current translation dictionary, and returns the translation, or returns the original text if not found."
        }
      ]
    },
    "MapUnits": {
      "enums": {},
      "methods": [
        {
          "name": "GetNextDir",
          "returns": "CMapEditorPlugin::CardinalDirections",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument1"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetPreviousDir",
          "returns": "CMapEditorPlugin::CardinalDirections",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument1"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetOpposedDir",
          "returns": "CMapEditorPlugin::CardinalDirections",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument1"
            }
          ],
          "documentation": ""
        },
        {
          "name": "AddDirs",
          "returns": "CMapEditorPlugin::CardinalDirections",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument1"
            },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument2"
            }
          ],
          "documentation": ""
        },
        {
          "name": "SubDirs",
          "returns": "CMapEditorPlugin::CardinalDirections",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument1"
            },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument2"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetNeighbourCoord",
          "returns": "Int3",
          "params": [
            { "identifier": "Int3", "argument": "_Argument1" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument2"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetRotatedOffset",
          "returns": "Int3",
          "params": [
            { "identifier": "Int3", "argument": "_Argument1" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument2"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetRotatedOffsetPositive",
          "returns": "Int3",
          "params": [
            { "identifier": "Int3", "argument": "_Argument1" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "_Argument2"
            },
            { "identifier": "Int3", "argument": "_Argument3" }
          ],
          "documentation": ""
        }
      ]
    },
    "AnimLib": {
      "enums": {},
      "methods": [
        {
          "name": "SmoothStep",
          "returns": "Real",
          "params": [{ "identifier": "Real", "argument": "_X" }],
          "documentation": "\\brief Returns the value smoothly transitionning from 0 to 1"
        },
        {
          "name": "Ease",
          "returns": "Real",
          "params": [
            { "identifier": "Text", "argument": "_Function" },
            { "identifier": "Real", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Real", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using Robert Penner easing functions. Function must be one of:  \"Linear\", \"QuadIn\", \"QuadOut\", \"QuadInOut\", \"CubicIn\", \"CubicOut\", \"CubicInOut\", \"QuartIn\", \"QuartOut\", \"QuartInOut\", \"QuintIn\", \"QuintOut\", \"QuintInOut\", \"SineIn\", \"SineOut\", \"SineInOut\", \"ExpIn\", \"ExpOut\", \"ExpInOut\", \"CircIn\", \"CircOut\", \"CircInOut\", \"BackIn\", \"BackOut\", \"BackInOut\", \"ElasticIn\", \"ElasticOut\", \"ElasticInOut\", \"ElasticIn2\", \"ElasticOut2\", \"ElasticInOut2\", \"BounceIn\", \"BounceOut\", \"BounceInOut\""
        },
        {
          "name": "EaseLinear",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInQuad",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutQuad",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutQuad",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInCubic",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutCubic",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutCubic",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInQuart",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutQuart",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutQuart",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInQuint",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutQuint",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutQuint",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInSine",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutSine",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutSine",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInExp",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutExp",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutExp",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInCirc",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutCirc",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutCirc",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInBack",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutBack",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutBack",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInElastic",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutElastic",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutElastic",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInElastic2",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutElastic2",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutElastic2",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInBounce",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseOutBounce",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
          "name": "EaseInOutBounce",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "_T" },
            { "identifier": "Real", "argument": "_Base" },
            { "identifier": "Real", "argument": "_Change" },
            { "identifier": "Integer", "argument": "_Duration" }
          ],
          "documentation": "\\brief Returns the value animated from Base to Base+Delta using R. Penner easing functions."
        }
      ]
    },
    "TimeLib": {
      "enums": {
        "EDateFormats": [
          "Full",
          "Date",
          "DateShort",
          "Time",
          "TimeShort",
          "Relative",
          "RelativeShort",
          "MonthYear"
        ],
        "EDurationFormats": ["Full", "Abbreviated", "Chrono"]
      },
      "methods": [
        {
          "name": "FormatDate",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Timestamp" },
            { "identifier": "EDateFormats", "argument": "_Format" }
          ],
          "documentation": "\\brief Returns the date corresponding to a timestamp, formatted according to the locale. Not available on servers.\n\\param _Timestamp : Timestamp to format\n\\param _Format : Format"
        },
        {
          "name": "FormatDelta",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Timestamp1" },
            { "identifier": "Text", "argument": "_Timestamp2" },
            { "identifier": "EDurationFormats", "argument": "_Format" }
          ],
          "documentation": "\\brief Returns the duration between 2 timestamps, formatted according to the locale. Not available on servers.\n\\param _Timestamp1 : Timestamp1\n\\param _Timestamp2 : Timestamp2\n\\param _Format : Format"
        },
        {
          "name": "FormatDelta",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "_Delta" },
            { "identifier": "EDurationFormats", "argument": "_Format" }
          ],
          "documentation": "\\brief Returns the duration Delta formatted according to the locale. Not available on servers.\n\\param _Delta : Delta in seconds\n\\param _Format : Format"
        },
        {
          "name": "Compare",
          "returns": "Integer",
          "params": [
            { "identifier": "Text", "argument": "_Timestamp1" },
            { "identifier": "Text", "argument": "_Timestamp2" }
          ],
          "documentation": "\\brief Compares 2 timestamps\n\\param _Timestamp1 : Unix timestamp\n\\param _Timestamp2 : Unix timestamp"
        },
        {
          "name": "Clamp01",
          "returns": "Real",
          "params": [
            { "identifier": "Text", "argument": "_Boundary1" },
            { "identifier": "Text", "argument": "_Boundary2" },
            { "identifier": "Text", "argument": "_Timestamp" }
          ],
          "documentation": "\\brief Returns a Real between 0 and 1, given an interval and a timestamp\n\\param _Boundary1 : Lower boundary defining the time interval\n\\param _Boundary2 : Higher boundary defining the time interval\n\\param _Timestamp : Timestamp to check"
        },
        {
          "name": "Clamp01TZDay",
          "returns": "Real",
          "params": [{ "identifier": "Text", "argument": "_Timestamp" }],
          "documentation": "\\brief Returns a Real between 0 and 1, given a timestamp, according to the day cycle in local timezone\n\\param _Timestamp : Timestamp to check"
        },
        {
          "name": "Clamp01UTCDay",
          "returns": "Real",
          "params": [{ "identifier": "Text", "argument": "_Timestamp" }],
          "documentation": "\\brief Returns a Real between 0 and 1, given a timestamp, according to the day cycle in UTC timezone\n\\param _Timestamp : Timestamp to check"
        },
        {
          "name": "GetCurrent",
          "returns": "Text",
          "params": [],
          "documentation": "\\brief Gets current timestamp"
        },
        {
          "name": "GetDelta",
          "returns": "Integer",
          "params": [
            { "identifier": "Text", "argument": "_Timestamp1" },
            { "identifier": "Text", "argument": "_Timestamp2" }
          ],
          "documentation": "\\brief Returns the duration in seconds between 2 timestamps. May be clamped if huge.\n\\param _Timestamp1 : First timestamp. Result will be positive if this one is bigger/more recent\n\\param _Timestamp2 : Second timestamp"
        },
        {
          "name": "GetLocalDelta_Years",
          "returns": "Integer",
          "params": [
            { "identifier": "Text", "argument": "_Timestamp1" },
            { "identifier": "Text", "argument": "_Timestamp2" }
          ],
          "documentation": "\\brief Returns the duration in complete years between 2 timestamps, according to the local dates.\n\\param _Timestamp1 : First timestamp. Result will be positive if this one is bigger/more recent\n\\param _Timestamp2 : Second timestamp"
        },
        {
          "name": "GetLocalDelta_Months",
          "returns": "Integer",
          "params": [
            { "identifier": "Text", "argument": "_Timestamp1" },
            { "identifier": "Text", "argument": "_Timestamp2" }
          ],
          "documentation": "\\brief Returns the duration in complete months between 2 timestamps, according to the local dates.\n\\param _Timestamp1 : First timestamp. Result will be positive if this one is bigger/more recent\n\\param _Timestamp2 : Second timestamp"
        },
        {
          "name": "GetMillisecondsSinceInit",
          "returns": "Integer",
          "params": [],
          "documentation": "\\brief Returns local milliseconds elapsed since game initialisation."
        }
      ]
    },
    "ColorLib": {
      "enums": {},
      "methods": [
        {
          "name": "HsvToRgb",
          "returns": "Vec3",
          "params": [{ "identifier": "Vec3", "argument": "_Hsv" }],
          "documentation": ""
        },
        {
          "name": "RgbToHsv",
          "returns": "Vec3",
          "params": [{ "identifier": "Vec3", "argument": "_Rgb" }],
          "documentation": ""
        },
        {
          "name": "RgbToHex3",
          "returns": "Text",
          "params": [{ "identifier": "Vec3", "argument": "_Rgb" }],
          "documentation": "\\brief Returns the Hexa3 corresponding to the RGB given."
        },
        {
          "name": "RgbToHex6",
          "returns": "Text",
          "params": [{ "identifier": "Vec3", "argument": "_Rrggbb" }],
          "documentation": "\\brief Returns the Hexa6 corresponding to the RGB given."
        },
        {
          "name": "Hex3ToRgb",
          "returns": "Vec3",
          "params": [{ "identifier": "Text", "argument": "_Text" }],
          "documentation": "\\brief Returns the RGB color corresponding to Hex3.\nReturns an empty Vec3 if an invalid Text is given.\n\\param _Text : The text you want to convert into a RGB color."
        },
        {
          "name": "Hex6ToRgb",
          "returns": "Vec3",
          "params": [{ "identifier": "Text", "argument": "_Text" }],
          "documentation": "\\brief Returns the RGB color corresponding to Hex6.\nReturns an empty Vec3 if an invalid Text is given.\n\\param _Text : The text you want to convert into a RGB color."
        },
        {
          "name": "HexToRgb",
          "returns": "Vec3",
          "params": [{ "identifier": "Text", "argument": "_Text" }],
          "documentation": "\\brief Returns the RGB color corresponding to Hex.\nReturns an empty Vec3 if an invalid Text is given.\n\\param _Text : The text you want to convert into a RGB color."
        }
      ]
    }
  },
  "classes": {
    "This": { "inherit": "", "enums": {}, "methods": [], "props": {} },
    "Int2": {
      "inherit": "",
      "enums": {},
      "methods": [],
      "props": { "Integer": ["X", "Y"] }
    },
    "Vec2": {
      "inherit": "",
      "enums": {},
      "methods": [],
      "props": { "Real": ["X", "Y"] }
    },
    "Vec3": {
      "inherit": "",
      "enums": {},
      "methods": [],
      "props": { "Real": ["X", "Y", "Z"] }
    },
    "Int3": {
      "inherit": "",
      "enums": {},
      "methods": [],
      "props": { "Integer": ["X", "Y", "Z"] }
    },
    "CMlScript": {
      "inherit": "CNod",
      "enums": {
        "LinkType": [
          "ExternalBrowser",
          "ManialinkBrowser",
          "Goto",
          "ExternalFromId",
          "ManialinkFromId",
          "GotoFromId"
        ]
      },
      "props": {
        "CMlPage": [{ "name": "Page", "readonly": true, "documentation": "" }],
        "Boolean": [
          { "name": "PageIsVisible", "readonly": true, "documentation": "" },
          {
            "name": "PageAlwaysUpdateScript",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Dbg_WarnOnDroppedEvents",
            "readonly": false,
            "documentation": ""
          },
          { "name": "MouseLeftButton", "readonly": true, "documentation": "" },
          { "name": "MouseRightButton", "readonly": true, "documentation": "" },
          {
            "name": "MouseMiddleButton",
            "readonly": true,
            "documentation": ""
          },
          { "name": "KeyUp", "readonly": true, "documentation": "" },
          { "name": "KeyDown", "readonly": true, "documentation": "" },
          { "name": "KeyLeft", "readonly": true, "documentation": "" },
          { "name": "KeyRight", "readonly": true, "documentation": "" },
          { "name": "KeyReturn", "readonly": true, "documentation": "" },
          { "name": "KeySpace", "readonly": true, "documentation": "" },
          { "name": "KeyDelete", "readonly": true, "documentation": "" },
          {
            "name": "EnableMenuNavigationInputs",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "IsMenuNavigationForeground",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "Now", "readonly": true, "documentation": "" },
          { "name": "Period", "readonly": true, "documentation": "" },
          { "name": "CurrentTime", "readonly": true, "documentation": "" }
        ],
        "CUser": [
          {
            "name": "LocalUser",
            "readonly": true,
            "documentation": "Local user structure."
          }
        ],
        "CTitle": [
          { "name": "LoadedTitle", "readonly": true, "documentation": "" }
        ],
        "CMlScriptEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "MouseX", "readonly": true, "documentation": "" },
          { "name": "MouseY", "readonly": true, "documentation": "" }
        ],
        "CParsingManager": [
          { "name": "Xml", "readonly": true, "documentation": "" }
        ],
        "CHttpManager": [
          { "name": "Http", "readonly": true, "documentation": "" }
        ],
        "CVideoManager": [
          { "name": "Video", "readonly": true, "documentation": "" }
        ],
        "CAudioManager": [
          { "name": "Audio", "readonly": true, "documentation": "" }
        ],
        "CInputManager": [
          { "name": "Input", "readonly": true, "documentation": "" }
        ],
        "CDataFileMgr": [
          { "name": "DataFileMgr", "readonly": true, "documentation": "" }
        ],
        "CScoreMgr": [
          { "name": "ScoreMgr", "readonly": true, "documentation": "" }
        ],
        "CRankingsZoneMgr": [
          { "name": "ZoneMgr", "readonly": true, "documentation": "" }
        ],
        "CUserV2Manager": [
          { "name": "UserMgr", "readonly": true, "documentation": "" }
        ],
        "CAnimManager": [
          { "name": "AnimMgr", "readonly": true, "documentation": "" }
        ],
        "CMenuSceneManager": [
          { "name": "MenuSceneMgr", "readonly": true, "documentation": "" }
        ],
        "CSystemPlatform": [
          { "name": "System", "readonly": true, "documentation": "" }
        ],
        "CWSNotificationManager": [
          { "name": "WSNotificationMgr", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Dbg_SetProcessed",
          "returns": "Void",
          "params": [{ "identifier": "CMlScriptEvent", "argument": "Event" }],
          "documentation": ""
        },
        {
          "name": "IsKeyPressed",
          "returns": "Boolean",
          "params": [{ "identifier": "Integer", "argument": "KeyCode" }],
          "documentation": ""
        },
        {
          "name": "EnableMenuNavigation",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "EnableInputs" },
            { "identifier": "Boolean", "argument": "WithAutoFocus" },
            { "identifier": "CMlControl", "argument": "AutoBackControl" },
            { "identifier": "Integer", "argument": "InputPriority" }
          ],
          "documentation": ""
        },
        {
          "name": "EnableMenuNavigation",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "EnableInputs" },
            { "identifier": "Boolean", "argument": "WithAutoFocus" },
            { "identifier": "Boolean", "argument": "WithManualScroll" },
            { "identifier": "CMlControl", "argument": "AutoBackControl" },
            { "identifier": "Integer", "argument": "InputPriority" }
          ],
          "documentation": ""
        },
        {
          "name": "OpenLink",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "CMlScript::LinkType", "argument": "LinkType" }
          ],
          "documentation": ""
        },
        {
          "name": "TriggerPageAction",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ActionString" }],
          "documentation": ""
        },
        {
          "name": "SendCustomEvent",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text[]", "argument": "Data" }
          ],
          "documentation": "Send a custom event to the owner of the layer."
        },
        {
          "name": "PreloadImage",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ImageUrl" }],
          "documentation": ""
        },
        {
          "name": "PreloadAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Dbg_DumpDeclareForVariables",
          "returns": "Text",
          "params": [
            { "identifier": "CNod", "argument": "Nod" },
            { "identifier": "Boolean", "argument": "StatsOnly" }
          ],
          "documentation": ""
        },
        {
          "name": "FilterProfanities",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "TextToFilter" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CManiaApp": {
      "inherit": "CNod",
      "enums": { "ELinkType": ["ExternalBrowser", "ManialinkBrowser"] },
      "props": {
        "Text": [
          { "name": "ManiaAppUrl", "readonly": true, "documentation": "" },
          { "name": "ManiaAppBaseUrl", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "Now", "readonly": true, "documentation": "" },
          {
            "name": "LayersDefaultManialinkVersion",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Boolean": [
          { "name": "IsVisible", "readonly": true, "documentation": "" },
          {
            "name": "EnableMenuNavigationInputs",
            "readonly": false,
            "documentation": ""
          },
          { "name": "TTS_Disabled", "readonly": false, "documentation": "" }
        ],
        "CUser": [
          { "name": "LocalUser", "readonly": true, "documentation": "" }
        ],
        "CTitle": [
          { "name": "LoadedTitle", "readonly": true, "documentation": "" }
        ],
        "CUILayer[]": [
          { "name": "UILayers", "readonly": true, "documentation": "" }
        ],
        "CParsingManager": [
          { "name": "Xml", "readonly": true, "documentation": "" }
        ],
        "CHttpManager": [
          { "name": "Http", "readonly": true, "documentation": "" }
        ],
        "CVideoManager": [
          { "name": "Video", "readonly": true, "documentation": "" }
        ],
        "CAudioManager": [
          { "name": "Audio", "readonly": true, "documentation": "" }
        ],
        "CInputManager": [
          { "name": "Input", "readonly": true, "documentation": "" }
        ],
        "CDataFileMgr": [
          { "name": "DataFileMgr", "readonly": true, "documentation": "" }
        ],
        "CScoreMgr": [
          { "name": "ScoreMgr", "readonly": true, "documentation": "" }
        ],
        "CRankingsZoneMgr": [
          { "name": "ZoneMgr", "readonly": true, "documentation": "" }
        ],
        "CTrackingMgr": [
          { "name": "TrackingMgr", "readonly": true, "documentation": "" }
        ],
        "CUserV2Manager": [
          { "name": "UserMgr", "readonly": true, "documentation": "" }
        ],
        "CWSNotificationManager": [
          { "name": "WSNotificationMgr", "readonly": true, "documentation": "" }
        ],
        "CSystemPlatform": [
          { "name": "System", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "UILayerCreate",
          "returns": "CUILayer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "UILayerDestroy",
          "returns": "Void",
          "params": [{ "identifier": "CUILayer", "argument": "Layer" }],
          "documentation": ""
        },
        {
          "name": "UILayerDestroyAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "LayerCustomEvent",
          "returns": "Void",
          "params": [
            { "identifier": "CUILayer", "argument": "Layer" },
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text[]", "argument": "Data" }
          ],
          "documentation": ""
        },
        {
          "name": "OpenLink",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "CManiaApp::ELinkType", "argument": "LinkType" }
          ],
          "documentation": ""
        },
        {
          "name": "OpenFileInExplorer",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": "Explore to given file or folder. Returns False if it does not exist on the filesystem. (may be because it is in a pack)"
        },
        {
          "name": "Dialog_Message",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Message" }],
          "documentation": ""
        },
        {
          "name": "Dbg_DumpDeclareForVariables",
          "returns": "Text",
          "params": [
            { "identifier": "CNod", "argument": "Nod" },
            { "identifier": "Boolean", "argument": "StatsOnly" }
          ],
          "documentation": ""
        },
        {
          "name": "TTS_Context_Enter",
          "returns": "Ident",
          "params": [{ "identifier": "Integer", "argument": "Level" }],
          "documentation": ""
        },
        {
          "name": "TTS_Context_Leave",
          "returns": "Ident",
          "params": [{ "identifier": "Ident", "argument": "ContextId" }],
          "documentation": ""
        },
        {
          "name": "TTS_Context_Change",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ContextId" },
            { "identifier": "CMlControl", "argument": "Control" }
          ],
          "documentation": ""
        },
        {
          "name": "TTS_Context_Change",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ContextId" },
            { "identifier": "Text", "argument": "Text" },
            { "identifier": "Boolean", "argument": "Translate" }
          ],
          "documentation": ""
        },
        {
          "name": "TTS_Context_Read",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Level" }],
          "documentation": ""
        },
        {
          "name": "TTS_Context_Read",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "ContextId" }],
          "documentation": ""
        },
        {
          "name": "FilterProfanities",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "TextToFilter" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CEditorMainPlugin": {
      "inherit": "CAnyEditorPlugin",
      "enums": {
        "EMeshEditorAPI": [
          "Materials",
          "Interactions",
          "Display",
          "Global",
          "Sets",
          "Voxel",
          "PickInfo",
          "UndoRedo"
        ]
      },
      "props": {
        "CEditorPluginHandle[]": [
          { "name": "Plugins", "readonly": true, "documentation": "" }
        ],
        "CGameModuleEditorBase[]": [
          { "name": "Modules", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Help_Open",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Help_Close",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetPluginHandle",
          "returns": "CEditorPluginHandle",
          "params": [{ "identifier": "Text", "argument": "Name" }],
          "documentation": ""
        },
        {
          "name": "SendPluginEvent",
          "returns": "Void",
          "params": [
            { "identifier": "CEditorPluginHandle", "argument": "Handle" },
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text[]", "argument": "Data" }
          ],
          "documentation": ""
        },
        {
          "name": "Context_SetActive",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Boolean", "argument": "IsActive" }
          ],
          "documentation": ""
        },
        {
          "name": "Context_IsActive",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "ContextName" }],
          "documentation": ""
        },
        {
          "name": "Binding_IsActive",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "BindingName" }],
          "documentation": ""
        },
        {
          "name": "Binding_IsActive",
          "returns": "Boolean",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "BindingName" }
          ],
          "documentation": ""
        },
        {
          "name": "Plugin_SetClearance",
          "returns": "Void",
          "params": [
            { "identifier": "CEditorPluginHandle", "argument": "Handle" },
            {
              "identifier": "CEditorMainPlugin::EMeshEditorAPI",
              "argument": "API"
            },
            { "identifier": "Boolean", "argument": "IsAllowed" }
          ],
          "documentation": ""
        },
        {
          "name": "Module_Load",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ModuleName" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CServerPlugin": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CTitle": [
          { "name": "LoadedTitle", "readonly": true, "documentation": "" }
        ],
        "CMapInfo": [
          { "name": "MapInfo", "readonly": true, "documentation": "" }
        ],
        "CClient[]": [
          {
            "name": "Clients",
            "readonly": true,
            "documentation": "Currently connected Users."
          },
          {
            "name": "Spectators",
            "readonly": true,
            "documentation": "Users connected as spectators."
          },
          {
            "name": "Players",
            "readonly": true,
            "documentation": "Users connected as players."
          }
        ],
        "CScore[]": [
          {
            "name": "Scores",
            "readonly": true,
            "documentation": "Sorted scores."
          }
        ],
        "CUser[]": [{ "name": "Users", "readonly": true, "documentation": "" }],
        "CTeam[]": [{ "name": "Teams", "readonly": true, "documentation": "" }],
        "Text": [
          {
            "name": "NeutralEmblemUrl",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ForcedClubLinkUrl1",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ForcedClubLinkUrl2",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Integer[]": [
          { "name": "ClansNbPlayers", "readonly": false, "documentation": "" },
          { "name": "ClanScores", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          { "name": "Now", "readonly": true, "documentation": "" },
          { "name": "CurMapIndex", "readonly": true, "documentation": "" },
          { "name": "NextMapIndex", "readonly": false, "documentation": "" }
        ],
        "CServerPluginEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "MapLoaded", "readonly": true, "documentation": "" },
          {
            "name": "MapUnloadRequested",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "HoldMapUnloadRequest",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Client_ComputeMinimap",
            "readonly": false,
            "documentation": "Enable minimap on the clients, even if the mode does not do it."
          }
        ],
        "CMapInfo[]": [
          { "name": "MapList", "readonly": true, "documentation": "" }
        ],
        "CUIConfigMgr": [
          { "name": "UIManager", "readonly": true, "documentation": "" }
        ],
        "CServerAdmin": [
          { "name": "ServerAdmin", "readonly": true, "documentation": "" }
        ],
        "CXmlRpc": [
          { "name": "XmlRpc", "readonly": true, "documentation": "" }
        ],
        "CParsingManager": [
          { "name": "Xml", "readonly": true, "documentation": "" }
        ],
        "CHttpManager": [
          { "name": "Http", "readonly": true, "documentation": "" }
        ],
        "CSystemPlatform": [
          { "name": "System", "readonly": true, "documentation": "" }
        ],
        "CTaskResult[]": [
          { "name": "TaskResults", "readonly": true, "documentation": "" }
        ],
        "CGhost[]": [
          { "name": "Ghosts", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetClient",
          "returns": "CClient",
          "params": [{ "identifier": "Text", "argument": "Login" }],
          "documentation": ""
        },
        {
          "name": "GetClient",
          "returns": "CClient",
          "params": [{ "identifier": "CUIConfig", "argument": "UI" }],
          "documentation": ""
        },
        {
          "name": "GetClient",
          "returns": "CClient",
          "params": [{ "identifier": "CUser", "argument": "Login" }],
          "documentation": ""
        },
        {
          "name": "GetClientFromWebServicesUserId",
          "returns": "CClient",
          "params": [{ "identifier": "Text", "argument": "WebServicesUserId" }],
          "documentation": ""
        },
        {
          "name": "GetPlaygroundPlayer",
          "returns": "CPlayer",
          "params": [{ "identifier": "Text", "argument": "Login" }],
          "documentation": ""
        },
        {
          "name": "TweakTeamColorsToAvoidHueOverlap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "TriggerModeScriptEvent",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text[]", "argument": "Data" }
          ],
          "documentation": ""
        },
        {
          "name": "SendModeScriptCommand",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "CommandName" },
            { "identifier": "Boolean", "argument": "BoolVal" }
          ],
          "documentation": ""
        },
        {
          "name": "SendModeScriptCommand",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "CommandName" },
            { "identifier": "Integer", "argument": "IntVal" }
          ],
          "documentation": ""
        },
        {
          "name": "SendModeScriptCommand",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "CommandName" },
            { "identifier": "Real", "argument": "RealVal" }
          ],
          "documentation": ""
        },
        {
          "name": "SendModeScriptCommand",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "CommandName" },
            { "identifier": "Text", "argument": "TextVal" }
          ],
          "documentation": ""
        },
        {
          "name": "SendModeScriptCommand",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "CommandName" },
            { "identifier": "Vec2", "argument": "Vec2Val" }
          ],
          "documentation": ""
        },
        {
          "name": "SendModeScriptCommand",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "CommandName" },
            { "identifier": "Vec3", "argument": "Vec3Val" }
          ],
          "documentation": ""
        },
        {
          "name": "SendModeScriptCommand",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "CommandName" },
            { "identifier": "Int2", "argument": "Int2Val" }
          ],
          "documentation": ""
        },
        {
          "name": "SendModeScriptCommand",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "CommandName" },
            { "identifier": "Int3", "argument": "Int3Val" }
          ],
          "documentation": ""
        },
        {
          "name": "RestartMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "NextMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Dbg_DumpDeclareForVariables",
          "returns": "Text",
          "params": [
            { "identifier": "CNod", "argument": "Nod" },
            { "identifier": "Boolean", "argument": "StatsOnly" }
          ],
          "documentation": ""
        },
        {
          "name": "TaskResult_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "TaskResultId" }],
          "documentation": ""
        },
        {
          "name": "Ghost_Download",
          "returns": "CTaskResult_Ghost",
          "params": [{ "identifier": "Text", "argument": "Url" }],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Playlist_Clear",
          "returns": "Void",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Playlist_Add",
          "returns": "Void",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "CGhost", "argument": "Ghost" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CNotification_PrestigeEarned": {
      "inherit": "CNotification_Prestige",
      "enums": {},
      "props": {
        "Text": [
          { "name": "CategoryType", "readonly": true, "documentation": "" },
          { "name": "PrestigeId", "readonly": true, "documentation": "" },
          {
            "name": "RewardDisplayName",
            "readonly": true,
            "documentation": ""
          },
          { "name": "RewardFileUrl", "readonly": true, "documentation": "" },
          {
            "name": "RewardThumbnailUrl",
            "readonly": true,
            "documentation": ""
          },
          { "name": "RewardType", "readonly": true, "documentation": "" },
          { "name": "SkinOptions", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "CategoryLevel", "readonly": true, "documentation": "" },
          { "name": "PrestigeLevel", "readonly": true, "documentation": "" },
          { "name": "StatCurrentValue", "readonly": true, "documentation": "" },
          {
            "name": "StatValueForNextLevel",
            "readonly": true,
            "documentation": ""
          },
          { "name": "TimeStamp", "readonly": true, "documentation": "" },
          { "name": "Year", "readonly": true, "documentation": "" }
        ],
        "NWebServicesPrestige::EPrestigeMode": [
          { "name": "Mode", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadDeleted": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadInvitationAccepted": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "InvitedAccountId", "readonly": true, "documentation": "" },
          {
            "name": "InvitedCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedSkinOptions",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "InvitedIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CSkinInfo[]": [
          { "name": "InvitedSkinList", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadInvitationAdded": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "InvitedAccountId", "readonly": true, "documentation": "" },
          {
            "name": "InvitedCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "InviterAccountId", "readonly": true, "documentation": "" },
          {
            "name": "InviterCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InviterDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InviterWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "InvitedIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InviterIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadInvitationCanceled": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "CancelerAccountId",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CancelerCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CancelerDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CancelerWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "InvitedAccountId", "readonly": true, "documentation": "" },
          {
            "name": "InvitedCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "CancelerIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadInvitationCanceledForExitingPlayer": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "InvitedAccountId", "readonly": true, "documentation": "" },
          {
            "name": "InvitedCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "InvitedIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadInvitationCanceledForFullSquad": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "InvitedAccountId", "readonly": true, "documentation": "" },
          {
            "name": "InvitedCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "InvitedIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadInvitationDeclined": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "InvitedAccountId", "readonly": true, "documentation": "" },
          {
            "name": "InvitedCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InvitedWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "InvitedIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadInvitationReceived": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "InviterAccountId", "readonly": true, "documentation": "" },
          {
            "name": "InviterCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InviterDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "InviterWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "InviterIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadLockStateUpdated": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsLocked", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadMemberAdded": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "MemberAccountId", "readonly": true, "documentation": "" },
          {
            "name": "MemberCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MemberDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MemberSkinOptions",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MemberWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "MemberIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CSkinInfo[]": [
          { "name": "MemberSkinList", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadMemberKicked": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "KickerAccountId", "readonly": true, "documentation": "" },
          {
            "name": "KickerCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "KickerDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "KickerWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "MemberAccountId", "readonly": true, "documentation": "" },
          {
            "name": "MemberCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MemberDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MemberWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "KickerIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MemberIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadMemberRemoved": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "MemberAccountId", "readonly": true, "documentation": "" },
          {
            "name": "MemberCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MemberDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MemberWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "MemberIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_SquadUpdated": {
      "inherit": "CNotification_Squad",
      "enums": {},
      "props": {
        "Text": [
          { "name": "SquadId", "readonly": true, "documentation": "" },
          { "name": "SquadType", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "WasForcedToLeaveDueToCrossPlaySetting",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CAccountTrophyGainForHistory": {
      "inherit": "CAccountTrophyGain",
      "enums": {},
      "props": {
        "CTrophyAchievement": [
          {
            "name": "TrophyAchievement",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CAccountTrophyGainForHistory_CompetitionMatch": {
      "inherit": "CAccountTrophyGainForHistory",
      "enums": {},
      "props": {
        "Integer": [{ "name": "Rank", "readonly": true, "documentation": "" }],
        "CTrophyAchievement_CompetitionMatch": [
          {
            "name": "TrophyAchievement_CompetitionMatch",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CAccountTrophyGainForHistory_CompetitionRanking": {
      "inherit": "CAccountTrophyGainForHistory",
      "enums": {},
      "props": {
        "Integer": [{ "name": "Rank", "readonly": true, "documentation": "" }],
        "CTrophyAchievement_CompetitionRanking": [
          {
            "name": "TrophyAchievement_CompetitionRanking",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CAccountTrophyGainForHistory_LiveMatch": {
      "inherit": "CAccountTrophyGainForHistory",
      "enums": {},
      "props": {
        "Integer": [{ "name": "Rank", "readonly": true, "documentation": "" }],
        "CTrophyAchievement_LiveMatch": [
          {
            "name": "TrophyAchievement_LiveMatch",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CAccountTrophyGainForHistory_SoloMedal": {
      "inherit": "CAccountTrophyGainForHistory",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Level", "readonly": true, "documentation": "" },
          { "name": "PreviousLevel", "readonly": true, "documentation": "" }
        ],
        "CTrophyAchievement_SoloMedal": [
          {
            "name": "TrophyAchievement_SoloMedal",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CAccountTrophyGainForHistory_SoloRanking": {
      "inherit": "CAccountTrophyGainForHistory",
      "enums": {},
      "props": {
        "Integer": [{ "name": "Rank", "readonly": true, "documentation": "" }],
        "CTrophyAchievement_SoloRanking": [
          {
            "name": "TrophyAchievement_SoloRanking",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTrophyAchievement_CompetitionMatch": {
      "inherit": "CTrophyAchievement",
      "enums": {},
      "props": {
        "Text": [
          { "name": "CompetitionId", "readonly": true, "documentation": "" },
          {
            "name": "CompetitionMatchInfo",
            "readonly": true,
            "documentation": ""
          },
          { "name": "CompetitionName", "readonly": true, "documentation": "" },
          { "name": "CompetitionStage", "readonly": true, "documentation": "" },
          {
            "name": "CompetitionStageStep",
            "readonly": true,
            "documentation": ""
          },
          { "name": "CompetitionType", "readonly": true, "documentation": "" },
          { "name": "ServerId", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTrophyAchievement_CompetitionRanking": {
      "inherit": "CTrophyAchievement",
      "enums": {},
      "props": {
        "Text": [
          { "name": "CompetitionId", "readonly": true, "documentation": "" },
          { "name": "CompetitionName", "readonly": true, "documentation": "" },
          { "name": "CompetitionStage", "readonly": true, "documentation": "" },
          {
            "name": "CompetitionStageStep",
            "readonly": true,
            "documentation": ""
          },
          { "name": "CompetitionType", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTrophyAchievement_LiveMatch": {
      "inherit": "CTrophyAchievement",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Duration", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "GameMode", "readonly": true, "documentation": "" },
          {
            "name": "GameModeCustomData",
            "readonly": true,
            "documentation": ""
          },
          { "name": "ServerId", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsOfficial", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTrophyAchievement_SoloMedal": {
      "inherit": "CTrophyAchievement",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "SoloMedalAchievementType",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTrophyAchievement_SoloRanking": {
      "inherit": "CTrophyAchievement",
      "enums": {},
      "props": {
        "Text": [
          { "name": "MapId", "readonly": true, "documentation": "" },
          { "name": "SeasonId", "readonly": true, "documentation": "" },
          {
            "name": "SoloRankingAchievementType",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmMode": {
      "inherit": "CMode",
      "enums": {
        "ESmScoreSortOrder": [
          "TotalPoints",
          "RoundPoints",
          "EliminationsInflicted",
          "EliminationsTaken",
          "Respawns",
          "DamageInflicted",
          "DamageTaken",
          "BestRace",
          "BestLap",
          "PrevRace",
          "Name",
          "LadderRank"
        ],
        "EWeapon": ["Laser", "Nucleus", "Arrow", "Rocket", "Missile"],
        "EActionSlot": [
          "Slot_A",
          "Slot_B",
          "Slot_C",
          "Slot_D",
          "Slot_E",
          "Slot_F",
          "Slot_G",
          "Slot_H"
        ],
        "EActionInput": [
          "Weapon",
          "Secondary",
          "Movement",
          "QuickAccess1",
          "QuickAccess2",
          "QuickAccess3",
          "QuickAccess4",
          "QuickAccess5",
          "QuickAccess6",
          "QuickAccess7",
          "QuickAccess8",
          "QuickAccess9",
          "QuickAccess0",
          "Consumable1",
          "Consumable2",
          "None"
        ],
        "EGameplay": ["Default", "Mp3Beta0"],
        "ERespawnBehaviour": [
          "Custom",
          "DoNothing",
          "GiveUpBeforeFirstCheckpoint",
          "AlwaysGiveUp",
          "AlwaysRespawn"
        ],
        "ECheckpointBehaviour": ["Custom", "Default", "InfiniteLaps"],
        "EGiveUpBehaviour": ["Custom", "DoNothing", "GiveUp"]
      },
      "props": {
        "Integer": [
          { "name": "StartTime", "readonly": false, "documentation": "" },
          { "name": "EndTime", "readonly": false, "documentation": "" },
          {
            "name": "SpawnInvulnerabilityDuration",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UnspawnAnimDuration",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "SpawnDelayDuration",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LapCountOverride",
            "readonly": false,
            "documentation": "If not 0, we use this number of laps instead of the number defined in the map"
          },
          { "name": "GameplayVersion", "readonly": false, "documentation": "" },
          { "name": "PlayersNbTotal", "readonly": true, "documentation": "" },
          { "name": "PlayersNbAlive", "readonly": true, "documentation": "" },
          { "name": "PlayersNbDead", "readonly": true, "documentation": "" },
          { "name": "ClansNbTotal", "readonly": true, "documentation": "" },
          { "name": "ClansNbAlive", "readonly": true, "documentation": "" },
          { "name": "ClansNbDead", "readonly": true, "documentation": "" },
          {
            "name": "UiScoresPointsLimit",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CSmMode::ERespawnBehaviour": [
          { "name": "RespawnBehaviour", "readonly": false, "documentation": "" }
        ],
        "CSmMode::ECheckpointBehaviour": [
          {
            "name": "CheckpointBehaviour",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CSmMode::EGiveUpBehaviour": [
          { "name": "GiveUpBehaviour", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "GiveUpBehaviour_RespawnAfter",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "GiveUpBehaviour_SkipAfterFinishLine",
            "readonly": false,
            "documentation": ""
          },
          { "name": "UseMultiClans", "readonly": false, "documentation": "" },
          { "name": "UseClans", "readonly": false, "documentation": "" },
          { "name": "UseForcedClans", "readonly": false, "documentation": "" },
          {
            "name": "UsePvECollisions",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UsePvPCollisions",
            "readonly": false,
            "documentation": ""
          },
          { "name": "UseGuns", "readonly": false, "documentation": "" },
          { "name": "UsePvPWeapons", "readonly": false, "documentation": "" },
          {
            "name": "UseInterractiveScreensIn3d",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UseLaserVsBullets",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UseLaserSkewering",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UsePlayerTagging",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UseBeaconsWithRecipients",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UseAmmoBonusOnHit",
            "readonly": false,
            "documentation": ""
          },
          { "name": "UseSameWallJump", "readonly": false, "documentation": "" },
          {
            "name": "UseDefaultActionEvents",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UseLaunchedCheckpoints",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ReadonlyLaunchedCheckpoints",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UseProtectClanmates",
            "readonly": false,
            "documentation": ""
          },
          { "name": "UseAllies", "readonly": false, "documentation": "" },
          {
            "name": "DisableDefaultSkinPreload",
            "readonly": false,
            "documentation": "Declare that the game mode will only use forced models, so the client can avoid preloading player own skins."
          },
          {
            "name": "Scores_AutoUpdateLadderRank",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Scores_AutoUploadPersonalBests",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Bots_AutoSpawn", "readonly": false, "documentation": "" },
          {
            "name": "Bots_AutoRespawn",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Bots_AutoIgnoreBotEvents",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ForceNavMapsComputation",
            "readonly": false,
            "documentation": "Navigation maps are needed for bots to move. If the current map has bot paths or items the navigation maps will always be computed, otherwise you will need to set this explicitely to True. May be necessary if you use CreateBotPlayer or SetNbBotPlayers."
          },
          {
            "name": "CrudeExtrapolation_AllowDelay",
            "readonly": false,
            "documentation": "Allow players to see others with a delay when CrudeExtrapolation is used. The quality of the visuals is better (e.g. cars won't go through walls), but it is not suitable for 'real time' game modes, such as Rounds."
          }
        ],
        "CSmMode::EGameplay": [
          { "name": "Gameplay", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "OffZoneRadius", "readonly": false, "documentation": "" },
          {
            "name": "OffZoneRadiusSpeed",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Ident": [
          {
            "name": "OffZoneCenterLandmarkId",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Integer[]": [
          { "name": "ClansNbPlayers", "readonly": false, "documentation": "" },
          {
            "name": "ClansNbPlayersAlive",
            "readonly": false,
            "documentation": ""
          },
          { "name": "ClanScores", "readonly": false, "documentation": "" }
        ],
        "CSmPlayer[]": [
          { "name": "Players", "readonly": true, "documentation": "" },
          { "name": "BotPlayers", "readonly": true, "documentation": "" },
          { "name": "Spectators", "readonly": true, "documentation": "" },
          { "name": "AllPlayers", "readonly": true, "documentation": "" }
        ],
        "CSmModeEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "CSmMapBase[]": [
          { "name": "MapBases", "readonly": true, "documentation": "" }
        ],
        "CSmMapLandmark[]": [
          { "name": "MapLandmarks", "readonly": true, "documentation": "" },
          {
            "name": "MapLandmarks_PlayerSpawn",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MapLandmarks_Gauge",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MapLandmarks_Sector",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MapLandmarks_BotPath",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MapLandmarks_BotSpawn",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MapLandmarks_ObjectAnchor",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MapLandmarks_Gate",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MapLandmarks_Foundation",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CSmScore[]": [
          { "name": "Scores", "readonly": true, "documentation": "" }
        ],
        "CSmMode::ESmScoreSortOrder": [
          {
            "name": "Scores_SortCriteria",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CSmObject[]": [
          { "name": "Objects", "readonly": true, "documentation": "" }
        ],
        "CGhostManager": [
          {
            "name": "GhostMgr",
            "readonly": true,
            "documentation": "Only available in solo mode and map is loaded."
          }
        ],
        "CGhost[]": [
          {
            "name": "GhostRecorder_Ghosts",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "Mood_GetTimeOfDay",
          "returns": "Real",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Mood_SetTimeOfDay",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Time01" }],
          "documentation": ""
        },
        {
          "name": "Mood_GetDayDuration",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Mood_IsNight",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetPlayer",
          "returns": "CSmPlayer",
          "params": [{ "identifier": "CUIConfig", "argument": "UI" }],
          "documentation": ""
        },
        {
          "name": "GetPlayer",
          "returns": "CSmPlayer",
          "params": [{ "identifier": "Text", "argument": "Login" }],
          "documentation": ""
        },
        {
          "name": "SetPlayer_DelayedIsFull",
          "returns": "Boolean",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "SetPlayer_Delayed_AdherenceCoef",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Real", "argument": "AdherenceCoef" }
          ],
          "documentation": "Changes player's vehicle grip with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_ControlCoef",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Real", "argument": "ControlCoef" }
          ],
          "documentation": "Changes player's vehicle control coef with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_AccelCoef",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Real", "argument": "AccelCoef" }
          ],
          "documentation": "Changes player's vehicle accel coef with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_GravityCoef",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Real", "argument": "GravityCoef" }
          ],
          "documentation": "Changes player's vehicle gravity coef with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_TireWear",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Real", "argument": "TireWear" }
          ],
          "documentation": "Changes the color of the player's vehicle tires with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_Reset",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": "Reset all change from the game mode on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_NoEngine",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate NoEngine on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_ForceEngine",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate ForceEngine on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_NoBrakes",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate NoBrake on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_NoSteer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate NoSteer on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_BoostUp",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate BoostUp on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_BoostDown",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate BoostDown on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_Boost2Up",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate Boost2Up on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_Boost2Down",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate Boost2Down on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_SlowMotion",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate SlowMotion on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_Fragile",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": "Activate or Deactivate Fragile on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayer_Delayed_Cruise",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" },
            { "identifier": "Real", "argument": "CruiseSpeedValue" }
          ],
          "documentation": "Activate or Deactivate Cruise at the given speed on the player's vehicle with a 250ms delay"
        },
        {
          "name": "SetPlayerVehicle_ControlledByMode",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerVehicle_Accelerate",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Activate" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerVehicle_TargetSpeedValue",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Real", "argument": "TargetSpeedValue" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerVehicle_MaxSpeedValue",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Real", "argument": "MaxSpeedValue" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerVehicle_BrakeValue",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Real", "argument": "BrakeValue" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerVehicle_SteerValue",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Real", "argument": "SteerValue" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerVehicle_ResetControlledModeValues",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "SetGameModeNameAndCustomData",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "GameModeName" }],
          "documentation": ""
        },
        {
          "name": "SetGameModeNameAndCustomData",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "GameModeName" },
            { "identifier": "Text", "argument": "Leaderbord_CustomData" }
          ],
          "documentation": ""
        },
        {
          "name": "SetGameModeNameAndCustomData",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "GameModeName" },
            { "identifier": "Text", "argument": "Leaderbord_CustomData" },
            { "identifier": "Text", "argument": "GhostDriver_CustomData" }
          ],
          "documentation": ""
        },
        {
          "name": "SetClubLogoUrl",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ClubLogoUrl" }],
          "documentation": ""
        },
        {
          "name": "SetDecoImageUrl_DecalSponsor4x1",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ImageUrl" }],
          "documentation": ""
        },
        {
          "name": "SetDecoImageUrl_Screen16x9",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ImageUrl" }],
          "documentation": ""
        },
        {
          "name": "SetDecoImageUrl_Screen8x1",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ImageUrl" }],
          "documentation": ""
        },
        {
          "name": "SetDecoImageUrl_Screen16x1",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ImageUrl" }],
          "documentation": ""
        },
        {
          "name": "PassOn",
          "returns": "Void",
          "params": [{ "identifier": "CSmModeEvent", "argument": "Event" }],
          "documentation": ""
        },
        {
          "name": "Discard",
          "returns": "Void",
          "params": [{ "identifier": "CSmModeEvent", "argument": "Event" }],
          "documentation": ""
        },
        {
          "name": "SpawnPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "ClanNum" },
            { "identifier": "Integer", "argument": "Armor" },
            { "identifier": "CMapSpawn", "argument": "PlayerSpawn" },
            { "identifier": "Integer", "argument": "ActivationDate" }
          ],
          "documentation": ""
        },
        {
          "name": "SpawnPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "ClanNum" },
            { "identifier": "CModeTurret", "argument": "Turret" },
            { "identifier": "Integer", "argument": "ActivationDate" }
          ],
          "documentation": ""
        },
        {
          "name": "SpawnPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "ClanNum" },
            { "identifier": "CModeVehicle", "argument": "Vehicle" },
            { "identifier": "Integer", "argument": "ActivationDate" }
          ],
          "documentation": ""
        },
        {
          "name": "SpawnPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "ClanNum" },
            { "identifier": "CModeVehicle", "argument": "Vehicle" },
            { "identifier": "Integer", "argument": "SlotIndex" },
            { "identifier": "Integer", "argument": "ActivationDate" }
          ],
          "documentation": ""
        },
        {
          "name": "SpawnBotPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "ClanNum" },
            { "identifier": "Integer", "argument": "Armor" },
            { "identifier": "CMapSpawn", "argument": "PlayerSpawn" },
            { "identifier": "Integer", "argument": "ActivationDate" }
          ],
          "documentation": ""
        },
        {
          "name": "SpawnBotPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "ClanNum" },
            { "identifier": "Integer", "argument": "Armor" },
            { "identifier": "CMapBotPath", "argument": "BotPath" },
            { "identifier": "Integer", "argument": "ActivationDate" }
          ],
          "documentation": ""
        },
        {
          "name": "SpawnBotPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "ClanNum" },
            { "identifier": "Integer", "argument": "Armor" },
            { "identifier": "CMapBotSpawn", "argument": "BotSpawn" },
            { "identifier": "Integer", "argument": "ActivationDate" }
          ],
          "documentation": ""
        },
        {
          "name": "SpawnBotPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmPlayer", "argument": "Owner" },
            { "identifier": "Integer", "argument": "Armor" },
            { "identifier": "Vec3", "argument": "Offset" },
            { "identifier": "Integer", "argument": "ActivationDate" }
          ],
          "documentation": ""
        },
        {
          "name": "UnspawnPlayer",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Scores_SetSortCriteria",
          "returns": "Void",
          "params": [
            {
              "identifier": "CSmMode::ESmScoreSortOrder",
              "argument": "Criteria"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Scores_ComputeLadderRank",
          "returns": "Void",
          "params": [
            {
              "identifier": "CSmMode::ESmScoreSortOrder",
              "argument": "Criteria"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Scores_ClearAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Score_ClearPrevRace",
          "returns": "Void",
          "params": [{ "identifier": "CSmScore", "argument": "Score" }],
          "documentation": ""
        },
        {
          "name": "Score_ClearPrevLap",
          "returns": "Void",
          "params": [{ "identifier": "CSmScore", "argument": "Score" }],
          "documentation": ""
        },
        {
          "name": "Score_Clear",
          "returns": "Void",
          "params": [{ "identifier": "CSmScore", "argument": "Score" }],
          "documentation": ""
        },
        {
          "name": "SetPlayerClan",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "ClanNum" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerWeapon",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EWeapon", "argument": "DefaultWeapon" },
            { "identifier": "Boolean", "argument": "AutoSwitchWeapon" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerWeaponAvailable",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EWeapon", "argument": "Weapon" },
            { "identifier": "Boolean", "argument": "Available" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerAllWeaponAvailable",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Available" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerReloadAllWeapons",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "ReloadAllWeapons" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerAmmo",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EWeapon", "argument": "Weapon" },
            { "identifier": "Integer", "argument": "Count" }
          ],
          "documentation": ""
        },
        {
          "name": "GetPlayerAmmo",
          "returns": "Integer",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EWeapon", "argument": "Weapon" }
          ],
          "documentation": ""
        },
        {
          "name": "AddPlayerAmmo",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EWeapon", "argument": "Weapon" },
            { "identifier": "Real", "argument": "DeltaCount" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayerAmmoMax",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EWeapon", "argument": "Weapon" },
            { "identifier": "Integer", "argument": "Count" }
          ],
          "documentation": ""
        },
        {
          "name": "GetPlayerAmmoMax",
          "returns": "Integer",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EWeapon", "argument": "Weapon" }
          ],
          "documentation": ""
        },
        {
          "name": "Entity_AddArmor",
          "returns": "Void",
          "params": [
            { "identifier": "CEntity", "argument": "Victim" },
            { "identifier": "Integer", "argument": "DeltaArmor" },
            { "identifier": "CEntity", "argument": "Shooter" },
            { "identifier": "Integer", "argument": "ShooterPoints" }
          ],
          "documentation": ""
        },
        {
          "name": "Entity_RemoveArmor",
          "returns": "Void",
          "params": [
            { "identifier": "CEntity", "argument": "Victim" },
            { "identifier": "Integer", "argument": "DeltaArmor" },
            { "identifier": "CEntity", "argument": "Shooter" },
            { "identifier": "Integer", "argument": "ShooterPoints" }
          ],
          "documentation": ""
        },
        {
          "name": "Entity_TriggerTurbo",
          "returns": "Void",
          "params": [
            { "identifier": "CEntity", "argument": "Target" },
            { "identifier": "Integer", "argument": "StartTime" }
          ],
          "documentation": ""
        },
        {
          "name": "GetWeaponNum",
          "returns": "Integer",
          "params": [
            { "identifier": "CSmMode::EWeapon", "argument": "Weapon" }
          ],
          "documentation": ""
        },
        {
          "name": "CanRespawnPlayer",
          "returns": "Boolean",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "RespawnPlayer",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "RespawnPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CMapWaypoint", "argument": "Waypoint" }
          ],
          "documentation": ""
        },
        {
          "name": "RespawnPlayer",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CMapSpawn", "argument": "Spawn" }
          ],
          "documentation": ""
        },
        {
          "name": "GiveUpBehaviour_RespawnAfter_SetLandmark",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CMapSpawn", "argument": "Spawn" },
            { "identifier": "Integer", "argument": "Date" }
          ],
          "documentation": ""
        },
        {
          "name": "SetNbBotPlayers",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "NbClan1" },
            { "identifier": "Integer", "argument": "NbClan2" }
          ],
          "documentation": "Debug helper: create/destroy bot players to match provided values.  (see Users_SetNbFakeUsers() for fake players that appear and the score table, ...)"
        },
        {
          "name": "CreateBotPlayer",
          "returns": "CSmPlayer",
          "params": [
            { "identifier": "Ident", "argument": "ModelId" },
            { "identifier": "Integer", "argument": "ClanNum" }
          ],
          "documentation": ""
        },
        {
          "name": "DestroyBotPlayer",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "BotPlayer" }],
          "documentation": ""
        },
        {
          "name": "DestroyAllBotPlayers",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ActionGetModelId",
          "returns": "Ident",
          "params": [{ "identifier": "Text", "argument": "ActionName" }],
          "documentation": ""
        },
        {
          "name": "ActionLoad",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EActionSlot", "argument": "ActionSlot" },
            { "identifier": "Ident", "argument": "ModelId" }
          ],
          "documentation": ""
        },
        {
          "name": "ActionLoad",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EActionSlot", "argument": "ActionSlot" },
            { "identifier": "Ident", "argument": "ModelId" },
            { "identifier": "Boolean", "argument": "MeleeMode" }
          ],
          "documentation": ""
        },
        {
          "name": "ActionLoad",
          "returns": "Void",
          "params": [
            { "identifier": "CModeVehicle", "argument": "Vehicle" },
            { "identifier": "Integer", "argument": "VehicleSlotIndex" },
            { "identifier": "CSmMode::EActionSlot", "argument": "ActionSlot" },
            { "identifier": "Ident", "argument": "ModelId" }
          ],
          "documentation": ""
        },
        {
          "name": "ActionLoad",
          "returns": "Void",
          "params": [
            { "identifier": "CModeTurret", "argument": "Turret" },
            { "identifier": "CSmMode::EActionSlot", "argument": "ActionSlot" },
            { "identifier": "Ident", "argument": "ModelId" }
          ],
          "documentation": ""
        },
        {
          "name": "Action_GetCooldown",
          "returns": "Integer",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EActionInput", "argument": "ActionInput" }
          ],
          "documentation": ""
        },
        {
          "name": "Action_GetRemainingCooldown",
          "returns": "Integer",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EActionInput", "argument": "ActionInput" }
          ],
          "documentation": ""
        },
        {
          "name": "ActionBind",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EActionSlot", "argument": "ActionSlot" },
            { "identifier": "CSmMode::EActionInput", "argument": "ActionInput" }
          ],
          "documentation": ""
        },
        {
          "name": "ActionUnBind",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EActionInput", "argument": "ActionInput" }
          ],
          "documentation": ""
        },
        {
          "name": "ActionSetVariant1",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EActionSlot", "argument": "ActionSlot" },
            { "identifier": "Integer", "argument": "ActionVariant" }
          ],
          "documentation": ""
        },
        {
          "name": "ActionSetVariant2",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EActionSlot", "argument": "ActionSlot" },
            { "identifier": "Integer", "argument": "ActionVariant" }
          ],
          "documentation": ""
        },
        {
          "name": "ActionSetVariant3",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "CSmMode::EActionSlot", "argument": "ActionSlot" },
            { "identifier": "Integer", "argument": "ActionVariant" }
          ],
          "documentation": ""
        },
        {
          "name": "ObjectCreate",
          "returns": "CSmObject",
          "params": [{ "identifier": "Ident", "argument": "ModelId" }],
          "documentation": ""
        },
        {
          "name": "ObjectDestroy",
          "returns": "Void",
          "params": [{ "identifier": "CSmObject", "argument": "Object" }],
          "documentation": ""
        },
        {
          "name": "ObjectDestroyAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveShieldArmor",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "VictimShieldId" },
            { "identifier": "Integer", "argument": "Damage" }
          ],
          "documentation": ""
        },
        {
          "name": "Replay_SaveAttackScore",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "Score" }
          ],
          "documentation": ""
        },
        {
          "name": "Replay_SaveDefenseScore",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "Score" }
          ],
          "documentation": ""
        },
        {
          "name": "Replay_SaveTeamScore",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Team" },
            { "identifier": "Integer", "argument": "Score" }
          ],
          "documentation": ""
        },
        {
          "name": "Replay_SavePlayerOfInterest",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Replay_SaveWinner",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Replay_SaveInterface",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Player_BeginNewRace",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "AbsoluteTime" }
          ],
          "documentation": ""
        },
        {
          "name": "Player_BeginNewLap",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "RaceTime" }
          ],
          "documentation": ""
        },
        {
          "name": "Player_RemoveLastWaypointTime",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Player_AddWaypointTime",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "Time" },
            { "identifier": "CSmMapLandmark", "argument": "Landmark" }
          ],
          "documentation": ""
        },
        {
          "name": "Player_SetFinishTime",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "Time" },
            { "identifier": "CSmMapLandmark", "argument": "Landmark" }
          ],
          "documentation": ""
        },
        {
          "name": "Player_ClearRaceWaypointTimes",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Player_ClearLapWaypointTimes",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Player_SetPlayerCurRaceAsScoreBestRace",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Player_SetPlayerCurRaceAsScorePrevRace",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Player_SetPlayerCurLapAsScoreBestLap",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Player_SetPlayerCurLapAsScorePrevLap",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Player_SetPlayerPrevLapAsScoreBestLap",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Player_SetPlayerPrevLapAsScorePrevLap",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Ghosts_SetStartTime",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "StartTime" }],
          "documentation": ""
        },
        {
          "name": "Ghosts_SetMaxAlpha",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "MaxAlpha" }],
          "documentation": ""
        },
        {
          "name": "Ghost_RetrieveFromPlayer",
          "returns": "CGhost",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "Ghost_RetrieveFromPlayer",
          "returns": "CGhost",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            {
              "identifier": "Boolean",
              "argument": "TruncateLaunchedCheckpointsRespawns"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Ghost_CopyToScoreBestRaceAndLap",
          "returns": "Void",
          "params": [
            { "identifier": "CGhost", "argument": "Ghost" },
            { "identifier": "CSmScore", "argument": "Score" }
          ],
          "documentation": "Transfer this ghost checkpoint-times to the score best race. The best lap of this ghost is transferred as the score best lap."
        },
        {
          "name": "GhostRecorder_SetEnabled",
          "returns": "Void",
          "params": [
            { "identifier": "CSmPlayer", "argument": "Player" },
            { "identifier": "Boolean", "argument": "Value" }
          ],
          "documentation": ""
        },
        {
          "name": "GhostRecorder_Ghosts_Select",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "GhostRecorder_Clear",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Playlist_GetNextSpawn",
          "returns": "CSmMapLandmark",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CSmMapType": {
      "inherit": "CMapType",
      "enums": {},
      "props": {
        "CSmMode": [{ "name": "Mode", "readonly": true, "documentation": "" }],
        "CSmPlayer[]": [
          { "name": "AllPlayers", "readonly": true, "documentation": "" },
          { "name": "Players", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "AuthorTime_SetFromGhost",
          "returns": "Void",
          "params": [{ "identifier": "CGhost", "argument": "Ghost" }],
          "documentation": ""
        },
        {
          "name": "SetAuthorTimeAndGhost",
          "returns": "Void",
          "params": [{ "identifier": "CGhost", "argument": "Ghost" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CSmAction": {
      "inherit": "CAction",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Now", "readonly": true, "documentation": "" },
          { "name": "Variant1", "readonly": true, "documentation": "" },
          { "name": "Variant2", "readonly": true, "documentation": "" },
          { "name": "Variant3", "readonly": true, "documentation": "" },
          { "name": "Energy", "readonly": false, "documentation": "" },
          { "name": "EnergyMax", "readonly": false, "documentation": "" },
          { "name": "EnergyCost", "readonly": false, "documentation": "" },
          { "name": "State_Integer1", "readonly": false, "documentation": "" },
          { "name": "State_Integer2", "readonly": false, "documentation": "" },
          { "name": "Cooldown", "readonly": false, "documentation": "" },
          { "name": "Focused_Scroll", "readonly": false, "documentation": "" },
          {
            "name": "Focused_Scroll_Max",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CSmPlayer[]": [
          { "name": "Players", "readonly": true, "documentation": "" }
        ],
        "CSmPlayer": [
          { "name": "Owner", "readonly": true, "documentation": "" }
        ],
        "CModeVehicle": [
          { "name": "OwnerVehicle", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsActive", "readonly": true, "documentation": "" },
          { "name": "IsBound", "readonly": true, "documentation": "" },
          {
            "name": "IsInitialFrame",
            "readonly": true,
            "documentation": "Is true only once during action init. Allow to init state variables"
          },
          { "name": "EnergyReload", "readonly": false, "documentation": "" },
          { "name": "State_Boolean1", "readonly": false, "documentation": "" },
          { "name": "IsJumping", "readonly": false, "documentation": "" },
          { "name": "IsGliding", "readonly": false, "documentation": "" },
          { "name": "IsAttractor", "readonly": false, "documentation": "" },
          { "name": "IsFlying", "readonly": false, "documentation": "" },
          { "name": "IsSliding", "readonly": false, "documentation": "" },
          { "name": "IsRunning", "readonly": false, "documentation": "" },
          { "name": "IsFrozen", "readonly": false, "documentation": "" },
          { "name": "IsSneaking", "readonly": false, "documentation": "" },
          { "name": "IsFreeLooking", "readonly": false, "documentation": "" },
          {
            "name": "HasNoPlayerCollision",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Focus_Active", "readonly": true, "documentation": "" },
          { "name": "Trigger0", "readonly": true, "documentation": "" },
          { "name": "Trigger1", "readonly": true, "documentation": "" },
          { "name": "Trigger2", "readonly": true, "documentation": "" },
          { "name": "Trigger3", "readonly": true, "documentation": "" },
          { "name": "Trigger4", "readonly": true, "documentation": "" },
          { "name": "Trigger5", "readonly": true, "documentation": "" },
          { "name": "Trigger6", "readonly": true, "documentation": "" },
          { "name": "Trigger7", "readonly": true, "documentation": "" },
          { "name": "Trigger8", "readonly": true, "documentation": "" },
          { "name": "Trigger9", "readonly": true, "documentation": "" },
          { "name": "Trigger10", "readonly": true, "documentation": "" },
          { "name": "Trigger11", "readonly": true, "documentation": "" },
          { "name": "Trigger12", "readonly": true, "documentation": "" },
          { "name": "Trigger13", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "AmmoGain", "readonly": false, "documentation": "" }
        ],
        "Ident": [
          { "name": "State_EntityId1", "readonly": false, "documentation": "" }
        ],
        "CSmActionEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SendRulesEvent",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Param1" },
            { "identifier": "Text[]", "argument": "Param2" },
            { "identifier": "CEntity", "argument": "Shooter" },
            { "identifier": "CEntity", "argument": "Victim" }
          ],
          "documentation": ""
        },
        {
          "name": "Anim_GetModelId",
          "returns": "Ident",
          "params": [{ "identifier": "Text", "argument": "ModelName" }],
          "documentation": ""
        },
        {
          "name": "Anim_PlayAtLocation",
          "returns": "Ident",
          "params": [
            { "identifier": "Ident", "argument": "AnimModelId" },
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Vec3", "argument": "Direction" }
          ],
          "documentation": ""
        },
        {
          "name": "Anim_PlayOnPlayer",
          "returns": "Ident",
          "params": [
            { "identifier": "Ident", "argument": "AnimModelId" },
            { "identifier": "CSmPlayer", "argument": "Player" }
          ],
          "documentation": ""
        },
        {
          "name": "Anim_Stop",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "AnimId" }],
          "documentation": ""
        },
        {
          "name": "Projectile_GetModelId",
          "returns": "Ident",
          "params": [{ "identifier": "Text", "argument": "ModelName" }],
          "documentation": ""
        },
        {
          "name": "Projectile_CreateAtLocation",
          "returns": "Ident",
          "params": [
            { "identifier": "Ident", "argument": "ProjectileModelId" },
            { "identifier": "CSmPlayer", "argument": "PlayerToIgnore" },
            { "identifier": "Vec3", "argument": "InitialPosition" },
            { "identifier": "Vec3", "argument": "InitialDirection" },
            { "identifier": "Vec3", "argument": "InitialVelocity" }
          ],
          "documentation": ""
        },
        {
          "name": "Projectile_CreateOnPlayer",
          "returns": "Ident",
          "params": [
            { "identifier": "Ident", "argument": "ProjectileModelId" },
            { "identifier": "CSmPlayer", "argument": "Shooter" }
          ],
          "documentation": ""
        },
        {
          "name": "Cooldown_IsReady",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Cooldown_Start",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Shield_CreateAtLocation",
          "returns": "Ident",
          "params": [
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Vec3", "argument": "Direction" }
          ],
          "documentation": ""
        },
        {
          "name": "Shield_CreateOnPlayer",
          "returns": "Ident",
          "params": [{ "identifier": "CSmPlayer", "argument": "ShieldOwner" }],
          "documentation": ""
        },
        {
          "name": "Shield_Destroy",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "ShieldId" }],
          "documentation": ""
        },
        {
          "name": "Shield_Exists",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "ShieldId" }],
          "documentation": ""
        },
        {
          "name": "Shield_GetArmor",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "ShieldId" }],
          "documentation": ""
        },
        {
          "name": "Shield_SetArmor",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ShieldId" },
            { "identifier": "Integer", "argument": "ShieldArmor" }
          ],
          "documentation": ""
        },
        {
          "name": "Shield_GetIsActive",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "ShieldId" }],
          "documentation": ""
        },
        {
          "name": "Shield_SetIsActive",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ShieldId" },
            { "identifier": "Boolean", "argument": "ShieldIsActive" }
          ],
          "documentation": ""
        },
        {
          "name": "Shield_GetArmorMax",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "ShieldId" }],
          "documentation": ""
        },
        {
          "name": "Shield_GetTickReload",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "ShieldId" }],
          "documentation": ""
        },
        {
          "name": "Shield_GetCooldown",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "ShieldId" }],
          "documentation": ""
        },
        {
          "name": "Vehicle_TriggerTurbo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Vehicle_TriggerTurboBrake",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Focus_Request",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Focus_Release",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CSmMlScriptIngame": {
      "inherit": "CMlScriptIngame",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "ArenaNow", "readonly": false, "documentation": "" }
        ],
        "CSmPlayer": [
          {
            "name": "InputPlayer",
            "readonly": true,
            "documentation": "Player receiving the inputs. Null if spectating other players."
          },
          {
            "name": "GUIPlayer",
            "readonly": true,
            "documentation": "Player currently targetted by the camera. Same as InputPlayer when playing. Can be null in freecam when there's no specific target."
          }
        ],
        "Boolean": [
          {
            "name": "HideResumePlayingButton",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmArenaInterfaceManialinkScriptHandler_ReadOnly": {
      "inherit": "CMlScriptIngame_ReadOnly",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "ArenaNow", "readonly": false, "documentation": "" }
        ],
        "const": [
          {
            "name": "InputPlayer",
            "readonly": true,
            "documentation": "Player receiving the inputs. Null if spectating other players."
          },
          {
            "name": "GUIPlayer",
            "readonly": true,
            "documentation": "Player currently targetted by the camera. Same as InputPlayer when playing. Can be null in freecam when there's no specific target."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CVoiceChatEvent_Message": {
      "inherit": "CVoiceChatEvent",
      "enums": {},
      "props": {
        "CGameUserVoiceChat": [
          { "name": "Sender", "readonly": true, "documentation": "" },
          { "name": "Destination", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "Message", "readonly": true, "documentation": "" },
          { "name": "Lang_BCP47", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CVoiceChatEvent_SpeakingUsersChanged": {
      "inherit": "CVoiceChatEvent",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CVoiceChatEvent_User_IsMuted": {
      "inherit": "CVoiceChatEvent",
      "enums": {},
      "props": {
        "CGameUserVoiceChat": [
          { "name": "User", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "NewValue", "readonly": true, "documentation": "" },
          { "name": "ChangePending", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CVoiceChatEvent_User_IsConnected": {
      "inherit": "CVoiceChatEvent",
      "enums": {},
      "props": {
        "CGameUserVoiceChat": [
          { "name": "User", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "NewValue", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CVoiceChatEvent_User_IsSpeaking": {
      "inherit": "CVoiceChatEvent",
      "enums": {},
      "props": {
        "CGameUserVoiceChat": [
          { "name": "User", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "NewValue", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CVoiceChatEvent": {
      "inherit": "CNod",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_JoinSession": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {
        "Text": [
          { "name": "SessionId", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "IsFirstPartySession",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "Context", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_WaitingPage": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {
        "Text": [{ "name": "Reason", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_Garage": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_Splitscreen": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_Hotseat": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_ArcadeServer": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_Royal": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_Ranked": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_TrackOfTheDay": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_JoinServer": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {
        "Text": [{ "name": "ServerId", "readonly": true, "documentation": "" }],
        "Boolean": [
          { "name": "IsSpectator", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_OfficialCampaign": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_NewMap": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink_Home": {
      "inherit": "CDirectLink",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CDirectLink": {
      "inherit": "",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CNod": {
      "inherit": "",
      "enums": {},
      "props": {
        "Ident": [{ "name": "Id", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CAnyEditorPluginLayer": {
      "inherit": "CMlScript",
      "enums": {},
      "props": {
        "CEditorModule": [
          { "name": "ModuleEditor", "readonly": true, "documentation": "" }
        ],
        "CEditorMesh": [
          { "name": "MeshEditor", "readonly": true, "documentation": "" }
        ],
        "CEditorEditor": [
          { "name": "EditorEditor", "readonly": true, "documentation": "" }
        ],
        "CEditorMediaTracker": [
          { "name": "MediaTracker", "readonly": true, "documentation": "" }
        ],
        "CEditorSkin": [
          { "name": "SkinEditor", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Binding_GetShortcut",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "BindingName" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CManiaAppTitleLayer": {
      "inherit": "CMlScript",
      "enums": {},
      "props": {
        "CManiaAppTitle": [
          {
            "name": "ParentApp",
            "readonly": true,
            "documentation": "Will be Null if the script is not runing in a layer of an app."
          }
        ],
        "CTitleControl": [
          { "name": "TitleControl", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMapEditorPluginLayer": {
      "inherit": "CMlScript",
      "enums": {},
      "props": {
        "CMapEditorPlugin": [
          { "name": "Editor", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlStation": {
      "inherit": "CMlScript",
      "enums": {},
      "props": {
        "CManiaAppStation": [
          {
            "name": "ParentApp",
            "readonly": true,
            "documentation": "Will be Null if the script is not runing in a layer of an app."
          }
        ],
        "CStation": [
          { "name": "Station", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "EnterStation",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlBrowser": {
      "inherit": "CMlScript",
      "enums": { "EBuddyResult": ["Ok", "Error", "NotFinished"] },
      "props": {
        "CManiaAppBrowser": [
          {
            "name": "ParentApp",
            "readonly": true,
            "documentation": "Will be Null if the script is not runing in a layer of an app."
          }
        ],
        "CMap": [{ "name": "CurMap", "readonly": true, "documentation": "" }],
        "CMlBrowser::EBuddyResult": [
          { "name": "BuddyDoResult", "readonly": true, "documentation": "" }
        ],
        "Text": [
          {
            "name": "BuddyDoErrorMessage",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "BrowserFocusedFrameId",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Boolean": [
          { "name": "IsInBrowser", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "ShowCurMapCard",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "BrowserBack",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "BrowserQuit",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "BrowserHome",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "BrowserReload",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetLocalUserClubLink",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ClubLink" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CGameScriptHandlerMediaTrack": {
      "inherit": "CMlScript",
      "enums": {},
      "props": {
        "CMap": [
          {
            "name": "CurMap",
            "readonly": true,
            "documentation": "Info of the map."
          }
        ]
      },
      "methods": [
        {
          "name": "ShowCurMapCard",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlPage": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CMlFrame": [
          { "name": "MainFrame", "readonly": true, "documentation": "" }
        ],
        "CMlControl": [
          { "name": "FocusedControl", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "LinksInhibited", "readonly": false, "documentation": "" }
        ],
        "CMlControl[]": [
          {
            "name": "GetClassChildren_Result",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "GetFirstChild",
          "returns": "CMlControl",
          "params": [{ "identifier": "Text", "argument": "ControlId" }],
          "documentation": ""
        },
        {
          "name": "GetClassChildren",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Class" },
            { "identifier": "CMlFrame", "argument": "Frame" },
            { "identifier": "Boolean", "argument": "Recursive" }
          ],
          "documentation": ""
        },
        {
          "name": "ScrollToControl",
          "returns": "Void",
          "params": [{ "identifier": "CMlControl", "argument": "Control" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CUser": {
      "inherit": "CNod",
      "enums": {
        "EEchelon": [
          "None",
          "Bronze1",
          "Bronze2",
          "Bronze3",
          "Silver1",
          "Silver2",
          "Silver3",
          "Gold1",
          "Gold2",
          "Gold3"
        ],
        "ETagType": ["Bronze", "Silver", "Gold", "Nadeo"],
        "EStereoDisplayMode": ["None", "Stereo", "HMD"]
      },
      "props": {
        "Text": [
          { "name": "Login", "readonly": true, "documentation": "" },
          {
            "name": "WebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "AvatarUrl", "readonly": true, "documentation": "" },
          { "name": "ZonePath", "readonly": true, "documentation": "" },
          { "name": "ZoneFlagUrl", "readonly": true, "documentation": "" },
          { "name": "CountryFlagUrl", "readonly": true, "documentation": "" },
          { "name": "CountryPath", "readonly": true, "documentation": "" },
          { "name": "Language", "readonly": true, "documentation": "" },
          { "name": "Description", "readonly": true, "documentation": "" },
          { "name": "ClubLink", "readonly": true, "documentation": "" },
          { "name": "Trigram", "readonly": true, "documentation": "" },
          { "name": "BroadcastTVLogin", "readonly": true, "documentation": "" },
          { "name": "SteamUserId", "readonly": true, "documentation": "" },
          { "name": "LadderZoneName", "readonly": true, "documentation": "" },
          {
            "name": "LadderZoneFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          { "name": "ClubTag", "readonly": true, "documentation": "" },
          {
            "name": "AvatarDisplayName",
            "readonly": true,
            "documentation": ""
          },
          { "name": "HornDisplayName", "readonly": true, "documentation": "" },
          {
            "name": "Model_CarSport_SkinName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Model_CarSport_SkinUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Model_CharacterPilot_SkinName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Model_CharacterPilot_SkinUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Prestige_SkinOptions",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Character_SkinOptions",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          {
            "name": "IsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          },
          { "name": "IsBeginner", "readonly": true, "documentation": "" },
          { "name": "IsFakeUser", "readonly": true, "documentation": "" },
          {
            "name": "ColorblindModeEnabled",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "HackCamHmdDisabled",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "IsConnectedToMasterServer",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text[]": [
          { "name": "ZoneIdPath", "readonly": false, "documentation": "" },
          { "name": "Tags_Id", "readonly": false, "documentation": "" },
          { "name": "Tags_Comments", "readonly": false, "documentation": "" },
          { "name": "Tags_Deliverer", "readonly": false, "documentation": "" },
          { "name": "AlliesConnected", "readonly": false, "documentation": "" }
        ],
        "Vec3": [{ "name": "Color", "readonly": true, "documentation": "" }],
        "Integer": [
          { "name": "FameStars", "readonly": true, "documentation": "" },
          {
            "name": "NextEchelonPercent",
            "readonly": true,
            "documentation": ""
          },
          { "name": "LadderRank", "readonly": true, "documentation": "" },
          { "name": "LadderTotal", "readonly": true, "documentation": "" }
        ],
        "CUser::EEchelon": [
          { "name": "Echelon", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "LadderPoints", "readonly": true, "documentation": "" },
          { "name": "ReferenceScore", "readonly": true, "documentation": "" }
        ],
        "Integer[]": [
          {
            "name": "Tags_Favored_Indices",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUser::ETagType[]": [
          { "name": "Tags_Type", "readonly": false, "documentation": "" }
        ],
        "CUser::EStereoDisplayMode": [
          { "name": "StereoDisplayMode", "readonly": true, "documentation": "" }
        ],
        "CGameUserVoiceChat": [
          { "name": "VoiceChat", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTitle": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "TitleId", "readonly": true, "documentation": "" },
          { "name": "AuthorLogin", "readonly": true, "documentation": "" },
          { "name": "AuthorName", "readonly": true, "documentation": "" },
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "Desc", "readonly": true, "documentation": "" },
          { "name": "InfoUrl", "readonly": true, "documentation": "" },
          { "name": "DownloadUrl", "readonly": true, "documentation": "" },
          { "name": "TitleVersion", "readonly": true, "documentation": "" },
          { "name": "MakerTitleId", "readonly": true, "documentation": "" },
          { "name": "BaseTitleId", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlScriptEvent": {
      "inherit": "CBaseConstEvent",
      "enums": {
        "Type": [
          "KeyPress",
          "MouseClick",
          "MouseRightClick",
          "MouseOver",
          "MouseOut",
          "EntrySubmit",
          "MenuNavigation",
          "PluginCustomEvent"
        ],
        "EMenuNavAction": [
          "Up",
          "Right",
          "Left",
          "Down",
          "Select",
          "Cancel",
          "PageUp",
          "PageDown",
          "AppMenu",
          "Action1",
          "Action2",
          "Action3",
          "Action4",
          "ScrollUp",
          "ScrollDown"
        ]
      },
      "props": {
        "CMlScriptEvent::Type": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "KeyCode", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "KeyName", "readonly": true, "documentation": "" },
          { "name": "CharPressed", "readonly": true, "documentation": "" },
          { "name": "ControlId", "readonly": true, "documentation": "" },
          { "name": "CustomEventType", "readonly": true, "documentation": "" }
        ],
        "CMlControl": [
          { "name": "Control", "readonly": true, "documentation": "" }
        ],
        "CMlScriptEvent::EMenuNavAction": [
          { "name": "MenuNavAction", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "IsActionAutoRepeat",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text[]": [
          { "name": "CustomEventData", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlControl": {
      "inherit": "CNod",
      "enums": {
        "AlignHorizontal": ["Left", "HCenter", "Right", "None"],
        "AlignVertical": ["Top", "VCenter", "Bottom", "None", "VCenter2"]
      },
      "props": {
        "CMlFrame": [
          { "name": "Parent", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "ControlId", "readonly": true, "documentation": "" },
          { "name": "ToolTip", "readonly": false, "documentation": "" }
        ],
        "Vec2": [
          { "name": "Size", "readonly": false, "documentation": "" },
          {
            "name": "RelativePosition_V3",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AbsolutePosition_V3",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMlControl::AlignHorizontal": [
          { "name": "HorizontalAlign", "readonly": false, "documentation": "" }
        ],
        "CMlControl::AlignVertical": [
          { "name": "VerticalAlign", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "Visible", "readonly": false, "documentation": "" },
          { "name": "IsFocused", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "ZIndex", "readonly": false, "documentation": "" },
          { "name": "RelativeScale", "readonly": false, "documentation": "" },
          {
            "name": "RelativeRotation",
            "readonly": false,
            "documentation": ""
          },
          { "name": "AbsoluteScale", "readonly": true, "documentation": "" },
          { "name": "AbsoluteRotation", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "HasClass",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "Class" }],
          "documentation": ""
        },
        {
          "name": "DataAttributeExists",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "DataName" }],
          "documentation": ""
        },
        {
          "name": "DataAttributeGet",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "DataName" }],
          "documentation": ""
        },
        {
          "name": "DataAttributeSet",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "DataName" },
            { "identifier": "Text", "argument": "DataValue" }
          ],
          "documentation": ""
        },
        {
          "name": "Show",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Hide",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Focus",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ScriptEvents_Disable",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ScriptEvents_Restore",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CParsingManager": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [
          {
            "name": "DocumentsSlotsLimit",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CParsingDocument[]": [
          { "name": "DocumentsXml", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Create",
          "returns": "CParsingDocument",
          "params": [{ "identifier": "Text", "argument": "Contents" }],
          "documentation": ""
        },
        {
          "name": "Create",
          "returns": "CParsingDocument",
          "params": [
            { "identifier": "Text", "argument": "Contents" },
            { "identifier": "Boolean", "argument": "GenerateText" },
            { "identifier": "Boolean", "argument": "GenerateTextRaw" },
            { "identifier": "Boolean", "argument": "GenerateTextResursive" }
          ],
          "documentation": ""
        },
        {
          "name": "Destroy",
          "returns": "Void",
          "params": [
            { "identifier": "CParsingDocument", "argument": "Document" }
          ],
          "documentation": ""
        },
        {
          "name": "Parse_Xml",
          "returns": "CParsingDocument",
          "params": [{ "identifier": "Text", "argument": "Contents" }],
          "documentation": "Parses an XML document"
        },
        {
          "name": "Parse_Xml",
          "returns": "CParsingDocument",
          "params": [
            { "identifier": "Text", "argument": "Contents" },
            { "identifier": "Boolean", "argument": "GenerateText" },
            { "identifier": "Boolean", "argument": "GenerateTextRaw" },
            { "identifier": "Boolean", "argument": "GenerateTextResursive" }
          ],
          "documentation": "Parses an XML document"
        },
        {
          "name": "Parse_Destroy",
          "returns": "Void",
          "params": [
            { "identifier": "CParsingDocument", "argument": "Document" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose_Start_Xml",
          "returns": "Ident",
          "params": [{ "identifier": "Boolean", "argument": "Compact" }],
          "documentation": ""
        },
        {
          "name": "Compose_Start_Json",
          "returns": "Ident",
          "params": [{ "identifier": "Boolean", "argument": "Compact" }],
          "documentation": ""
        },
        {
          "name": "Compose_End",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "ComposerId" }],
          "documentation": ""
        },
        {
          "name": "Compose_Destroy",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "ComposerId" }],
          "documentation": ""
        },
        {
          "name": "Compose_Node_Open",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ComposerId" },
            { "identifier": "Text", "argument": "Name" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose_Node_Close",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "ComposerId" }],
          "documentation": ""
        },
        {
          "name": "Compose_Array_Open",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ComposerId" },
            { "identifier": "Text", "argument": "Name" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose_Array_Close",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "ComposerId" }],
          "documentation": ""
        },
        {
          "name": "Compose_Attribute",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ComposerId" },
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Text", "argument": "Value" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose_Attribute",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ComposerId" },
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Integer", "argument": "Value" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose_Attribute",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ComposerId" },
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Real", "argument": "Value" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose_Attribute",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ComposerId" },
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Boolean", "argument": "Value" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose_Value",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ComposerId" },
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Text", "argument": "Value" }
          ],
          "documentation": ""
        },
        {
          "name": "Compose_GetResult",
          "returns": "Text",
          "params": [{ "identifier": "Ident", "argument": "ComposerId" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CHttpManager": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CHttpRequest[]": [
          { "name": "Requests", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "SlotsAvailable", "readonly": true, "documentation": "" }
        ],
        "CHttpEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "AutomaticHeaders_Timezone",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "CreateGet",
          "returns": "CHttpRequest",
          "params": [{ "identifier": "Text", "argument": "Url" }],
          "documentation": "Create a get request, AdditionnalHeaders format is : \"Header-name: Value\\nOther-name: OtherValue\""
        },
        {
          "name": "CreateGet",
          "returns": "CHttpRequest",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Boolean", "argument": "UseCache" }
          ],
          "documentation": ""
        },
        {
          "name": "CreateGet",
          "returns": "CHttpRequest",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Boolean", "argument": "UseCache" },
            { "identifier": "Text", "argument": "AdditionalHeaders" }
          ],
          "documentation": ""
        },
        {
          "name": "CreatePost",
          "returns": "CHttpRequest",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Text", "argument": "Resource" }
          ],
          "documentation": ""
        },
        {
          "name": "CreatePost",
          "returns": "CHttpRequest",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Text", "argument": "Resource" },
            { "identifier": "Text", "argument": "AdditionalHeaders" }
          ],
          "documentation": ""
        },
        {
          "name": "CreatePostFile",
          "returns": "CHttpRequest",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Text", "argument": "FileName" },
            { "identifier": "Text", "argument": "AdditionalHeaders" }
          ],
          "documentation": ""
        },
        {
          "name": "Destroy",
          "returns": "Void",
          "params": [{ "identifier": "CHttpRequest", "argument": "Request" }],
          "documentation": ""
        },
        {
          "name": "IsValidUrl",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "Url" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CVideoManager": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CVideo[]": [
          { "name": "Videos", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "CreateVideo",
          "returns": "CVideo",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Boolean", "argument": "IsLooping" },
            { "identifier": "Boolean", "argument": "AutoProcessing" }
          ],
          "documentation": ""
        },
        {
          "name": "DestroyVideo",
          "returns": "Void",
          "params": [{ "identifier": "CVideo", "argument": "Video" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CAudioManager": {
      "inherit": "CNod",
      "enums": {
        "ELibSound": [
          "Alert",
          "ShowDialog",
          "HideDialog",
          "ShowMenu",
          "HideMenu",
          "Focus",
          "Valid",
          "Start",
          "Countdown",
          "Victory",
          "ScoreIncrease",
          "Checkpoint"
        ]
      },
      "props": {
        "CAudioSource[]": [
          { "name": "Sounds", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "ForceEnableMusic", "readonly": false, "documentation": "" }
        ],
        "Real": [
          {
            "name": "LimitMusicVolumedB",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LimitSceneSoundVolumedB",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LimitUiSoundVolumedB",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "CreateSound",
          "returns": "CAudioSource",
          "params": [{ "identifier": "Text", "argument": "Url" }],
          "documentation": ""
        },
        {
          "name": "CreateSound",
          "returns": "CAudioSource",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Real", "argument": "VolumedB" },
            { "identifier": "Boolean", "argument": "IsMusic" },
            { "identifier": "Boolean", "argument": "IsLooping" },
            { "identifier": "Boolean", "argument": "IsSpatialized" }
          ],
          "documentation": ""
        },
        {
          "name": "DestroySound",
          "returns": "Void",
          "params": [{ "identifier": "CAudioSource", "argument": "Sound" }],
          "documentation": ""
        },
        {
          "name": "CreateMusic",
          "returns": "CAudioSourceMusic",
          "params": [{ "identifier": "Text", "argument": "Url" }],
          "documentation": ""
        },
        {
          "name": "DestroyMusic",
          "returns": "Void",
          "params": [
            { "identifier": "CAudioSourceMusic", "argument": "Music" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "CAudioSource", "argument": "Sound" },
            { "identifier": "Real", "argument": "VolumedB" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Real", "argument": "VolumedB" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "CAudioManager::ELibSound", "argument": "Sound" },
            { "identifier": "Integer", "argument": "SoundVariant" },
            { "identifier": "Real", "argument": "VolumedB" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "CAudioSource", "argument": "Sound" },
            { "identifier": "Real", "argument": "VolumedB" },
            { "identifier": "Integer", "argument": "Delay" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Real", "argument": "VolumedB" },
            { "identifier": "Integer", "argument": "Delay" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "CAudioManager::ELibSound", "argument": "Sound" },
            { "identifier": "Integer", "argument": "SoundVariant" },
            { "identifier": "Real", "argument": "VolumedB" },
            { "identifier": "Integer", "argument": "Delay" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "CAudioSource", "argument": "Sound" },
            { "identifier": "Real", "argument": "VolumedB" },
            { "identifier": "Vec3", "argument": "PanRadiusLfe" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Real", "argument": "VolumedB" },
            { "identifier": "Vec3", "argument": "PanRadiusLfe" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "CAudioSource", "argument": "Sound" },
            { "identifier": "Real", "argument": "VolumedB" },
            { "identifier": "Vec3", "argument": "PanRadiusLfe" },
            { "identifier": "Integer", "argument": "Delay" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySoundEvent",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Real", "argument": "VolumedB" },
            { "identifier": "Vec3", "argument": "PanRadiusLfe" },
            { "identifier": "Integer", "argument": "Delay" }
          ],
          "documentation": ""
        },
        {
          "name": "ClearAllDelayedSoundsEvents",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CInputManager": {
      "inherit": "CNod",
      "enums": {
        "EButton": [
          "Left",
          "Right",
          "Up",
          "Down",
          "A",
          "B",
          "X",
          "Y",
          "L1",
          "R1",
          "LeftStick",
          "RightStick",
          "Menu",
          "View",
          "LeftStick_Left",
          "LeftStick_Right",
          "LeftStick_Up",
          "LeftStick_Down",
          "RightStick_Left",
          "RightStick_Right",
          "RightStick_Up",
          "RightStick_Down",
          "L2",
          "R2",
          "None"
        ],
        "EPadType": [
          "Keyboard",
          "Mouse",
          "Generic",
          "XBox",
          "PlayStation",
          "Vive"
        ]
      },
      "props": {
        "CInputEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "Now", "readonly": true, "documentation": "" },
          { "name": "Period", "readonly": true, "documentation": "" },
          {
            "name": "TimeSinceLatestActivity",
            "readonly": true,
            "documentation": "Duration (ms) elapsed since latest user interraction on any device."
          },
          {
            "name": "TimeSinceLatestMouseActivity",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "TimeSinceLatestTouchActivity",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "TimeSinceLatestKeyboardActivity",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "TimeSinceLatestPadActivity",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CInputPad[]": [
          { "name": "Pads", "readonly": true, "documentation": "" }
        ],
        "Vec2": [
          { "name": "MousePos", "readonly": true, "documentation": "" },
          {
            "name": "MouseKineticScrollVel",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          { "name": "MouseLeftButton", "readonly": true, "documentation": "" },
          { "name": "MouseRightButton", "readonly": true, "documentation": "" },
          {
            "name": "MouseMiddleButton",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "JapanStylePadButtons",
            "readonly": true,
            "documentation": ""
          },
          { "name": "ExclusiveMode", "readonly": false, "documentation": "" }
        ],
        "Vec2[]": [
          { "name": "TouchPoints_Cur", "readonly": false, "documentation": "" },
          { "name": "TouchPoints_Init", "readonly": false, "documentation": "" }
        ],
        "CInputPad": [
          { "name": "LatestActivePad", "readonly": true, "documentation": "" }
        ],
        "CInputManager::EPadType": [
          {
            "name": "LatestActivePadType",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "GetPadButtonPlaygroundBinding",
          "returns": "Text",
          "params": [
            { "identifier": "CInputPad", "argument": "Pad" },
            { "identifier": "CInputManager::EButton", "argument": "Button" }
          ],
          "documentation": ""
        },
        {
          "name": "GetPadButtonCurrentBinding",
          "returns": "Text",
          "params": [
            { "identifier": "CInputPad", "argument": "Pad" },
            { "identifier": "CInputManager::EButton", "argument": "Button" }
          ],
          "documentation": ""
        },
        {
          "name": "GetActionBindingRaw",
          "returns": "Text",
          "params": [
            { "identifier": "CInputPad", "argument": "Pad" },
            { "identifier": "Text", "argument": "ActionMap" },
            { "identifier": "Text", "argument": "ActionId" }
          ],
          "documentation": ""
        },
        {
          "name": "GetActionBinding",
          "returns": "Text",
          "params": [
            { "identifier": "CInputPad", "argument": "Pad" },
            { "identifier": "Text", "argument": "ActionMap" },
            { "identifier": "Text", "argument": "ActionId" }
          ],
          "documentation": ""
        },
        {
          "name": "GetActionDisplayName",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "ActionMap" },
            { "identifier": "Text", "argument": "ActionId" }
          ],
          "documentation": ""
        },
        {
          "name": "IsKeyPressed",
          "returns": "Boolean",
          "params": [{ "identifier": "Integer", "argument": "KeyCode" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CDataFileMgr": {
      "inherit": "CNod",
      "enums": {
        "EMediaType": [
          "Image",
          "Sound",
          "Script",
          "MatchSettings",
          "Module",
          "Skins",
          "ItemCollection"
        ]
      },
      "props": {
        "CTaskResult[]": [
          {
            "name": "TaskResults",
            "readonly": true,
            "documentation": "Array of task results."
          }
        ],
        "CCampaign[]": [
          {
            "name": "Campaigns",
            "readonly": true,
            "documentation": "Array of campaigns."
          }
        ],
        "CGhost[]": [
          {
            "name": "Ghosts",
            "readonly": true,
            "documentation": "Array of ghosts."
          }
        ],
        "Integer": [
          {
            "name": "UserSave_AvailableSpace",
            "readonly": true,
            "documentation": "Available space for user files, in kilobytes. (clamped to 1Gb)"
          }
        ],
        "Boolean": [
          {
            "name": "UserSave_IsWriting",
            "readonly": true,
            "documentation": "Background write to usersave in progress. Do not switch off the console."
          }
        ]
      },
      "methods": [
        {
          "name": "TaskResult_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "TaskId" }],
          "documentation": "Release a task result no more used."
        },
        {
          "name": "Campaign_Get",
          "returns": "CCampaign",
          "params": [{ "identifier": "Text", "argument": "CampaignId" }],
          "documentation": "Get a campaign from its id."
        },
        {
          "name": "ItemCollection_Create",
          "returns": "CTaskResult_NSItemCollection",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ClubId" },
            { "identifier": "Text", "argument": "DisplayName" },
            { "identifier": "Text", "argument": "FileName" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemCollection_CreateVersion",
          "returns": "CTaskResult_NSItemCollection",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ItemCollectionId" },
            { "identifier": "Text", "argument": "FileName" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemCollection_Get",
          "returns": "CTaskResult_NSItemCollection",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ItemCollectionId" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemCollection_GetList",
          "returns": "CTaskResult_NSItemCollectionList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "ItemCollectionIdList" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemCollection_GetListByUser",
          "returns": "CTaskResult_NSItemCollectionList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemCollection_SetActivityId",
          "returns": "CTaskResult_NSItemCollection",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ItemCollectionId" },
            { "identifier": "Text", "argument": "ActivityId" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemCollection_Update",
          "returns": "CTaskResult_NSItemCollection",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ItemCollectionId" },
            { "identifier": "Text", "argument": "DisplayName" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemCollection_AddFavorite",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ItemCollectionId" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemCollection_GetFavoriteList",
          "returns": "CTaskResult_NSItemCollectionList",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "ItemCollection_RemoveFavorite",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ItemCollectionId" }
          ],
          "documentation": ""
        },
        {
          "name": "Map_RefreshFromDisk",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Map_GetGameList",
          "returns": "CTaskResult_MapList",
          "params": [
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" }
          ],
          "documentation": "Get the list of map stored in the specified path."
        },
        {
          "name": "Map_GetGameList",
          "returns": "CTaskResult_MapList",
          "params": [
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" },
            { "identifier": "Boolean", "argument": "SortByNameElseByDate" },
            { "identifier": "Boolean", "argument": "SortOrderAsc" }
          ],
          "documentation": "Get the list of map stored according to the filters in the specified path."
        },
        {
          "name": "Map_GetFilteredGameList",
          "returns": "CTaskResult_MapList",
          "params": [
            { "identifier": "Integer", "argument": "Scope" },
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" },
            { "identifier": "Boolean", "argument": "SortByNameElseByDate" },
            { "identifier": "Boolean", "argument": "SortOrderAsc" }
          ],
          "documentation": "Get the list of map stored in the specified path. Scope is used to specify if the list is retrieved from game data (1), title data (2) or user data (4), which can be added)."
        },
        {
          "name": "Map_GetAuthorGhost",
          "returns": "CGhost",
          "params": [{ "identifier": "CMap", "argument": "Map" }],
          "documentation": ""
        },
        {
          "name": "Map_NadeoServices_Get",
          "returns": "CTaskResult_NSMap",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapId" }
          ],
          "documentation": ""
        },
        {
          "name": "Map_NadeoServices_GetFromUid",
          "returns": "CTaskResult_NSMap",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" }
          ],
          "documentation": ""
        },
        {
          "name": "Map_NadeoServices_GetList",
          "returns": "CTaskResult_NSMapList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "MapIdList" }
          ],
          "documentation": ""
        },
        {
          "name": "Map_NadeoServices_GetListFromUid",
          "returns": "CTaskResult_NSMapList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "MapUidList" }
          ],
          "documentation": ""
        },
        {
          "name": "Map_NadeoServices_GetListFromUser",
          "returns": "CTaskResult_NSMapList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "Map_NadeoServices_Register",
          "returns": "CTaskResult_NSMap",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" }
          ],
          "documentation": ""
        },
        {
          "name": "Skin_NadeoServices_Get",
          "returns": "CTaskResult_NSSkin",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SkinId" }
          ],
          "documentation": ""
        },
        {
          "name": "Skin_NadeoServices_GetFromChecksum",
          "returns": "CTaskResult_NSSkin",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SkinChecksum" }
          ],
          "documentation": ""
        },
        {
          "name": "Skin_NadeoServices_GetList",
          "returns": "CTaskResult_NSSkinList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "SkinIdList" }
          ],
          "documentation": ""
        },
        {
          "name": "Skin_NadeoServices_GetListFromChecksum",
          "returns": "CTaskResult_NSSkinList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "SkinChecksumList" }
          ],
          "documentation": ""
        },
        {
          "name": "Skin_NadeoServices_GetListFromUser",
          "returns": "CTaskResult_NSSkinList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "Skin_NadeoServices_Register",
          "returns": "CTaskResult_NSSkin",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SkinDisplayName" },
            { "identifier": "Text", "argument": "SkinFileName" }
          ],
          "documentation": ""
        },
        {
          "name": "AccountSkin_NadeoServices_AddFavorite",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SkinId" }
          ],
          "documentation": ""
        },
        {
          "name": "AccountSkin_NadeoServices_GetFavoriteList",
          "returns": "CTaskResult_NSSkinList",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "AccountSkin_NadeoServices_GetList",
          "returns": "CTaskResult_NSSkinList",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "AccountSkin_NadeoServices_GetListForUser",
          "returns": "CTaskResult_NSSkinList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "AccountSkin_NadeoServices_RemoveFavorite",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SkinId" }
          ],
          "documentation": ""
        },
        {
          "name": "AccountSkin_NadeoServices_Set",
          "returns": "CTaskResult_NSSkin",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SkinId" }
          ],
          "documentation": ""
        },
        {
          "name": "AccountSkin_NadeoServices_Unset",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SkinType" }
          ],
          "documentation": ""
        },
        {
          "name": "Ghost_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "GhostId" }],
          "documentation": "Release a downloaded ghost no longer needed."
        },
        {
          "name": "Ghost_Download",
          "returns": "CTaskResult_Ghost",
          "params": [
            { "identifier": "Text", "argument": "FileName" },
            { "identifier": "Text", "argument": "Url" }
          ],
          "documentation": ""
        },
        {
          "name": "Ghost_Upload",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "CGhost", "argument": "Ghost" },
            { "identifier": "Text", "argument": "AdditionalHeaders" }
          ],
          "documentation": ""
        },
        {
          "name": "Replay_RefreshFromDisk",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Replay_GetGameList",
          "returns": "CTaskResult_ReplayList",
          "params": [
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" }
          ],
          "documentation": "Get the list of replay stored in the specified path."
        },
        {
          "name": "Replay_GetGameList",
          "returns": "CTaskResult_ReplayList",
          "params": [
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" },
            { "identifier": "Boolean", "argument": "SortByNameElseByDate" },
            { "identifier": "Boolean", "argument": "SortOrderAsc" }
          ],
          "documentation": "Get the list of replay stored according to the filters in the specified path."
        },
        {
          "name": "Replay_GetFilteredGameList",
          "returns": "CTaskResult_ReplayList",
          "params": [
            { "identifier": "Integer", "argument": "Scope" },
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" },
            { "identifier": "Boolean", "argument": "SortByNameElseByDate" },
            { "identifier": "Boolean", "argument": "SortOrderAsc" }
          ],
          "documentation": "Get the list of replay stored in the specified path. Scope is used to specify if the list is retrieved from game data (1), title data (2) or user data (4), which can be added."
        },
        {
          "name": "Replay_Load",
          "returns": "CTaskResult_GhostList",
          "params": [{ "identifier": "Text", "argument": "Path" }],
          "documentation": "Get the list of ghosts from the replay stored at the specified file path."
        },
        {
          "name": "Replay_Save",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "CMap", "argument": "Map" },
            { "identifier": "CGhost", "argument": "Ghost" }
          ],
          "documentation": "Save the map and the ghost into a replay file stored at the specified path."
        },
        {
          "name": "Replay_Author_Save",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "CMap", "argument": "Map" },
            { "identifier": "CGhost", "argument": "Ghost" }
          ],
          "documentation": ""
        },
        {
          "name": "Media_GetGameList",
          "returns": "CTaskResult_FileList",
          "params": [
            { "identifier": "CDataFileMgr::EMediaType", "argument": "Type" },
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" }
          ],
          "documentation": "Get the list of media stored in the specified path."
        },
        {
          "name": "Media_GetGameList",
          "returns": "CTaskResult_FileList",
          "params": [
            { "identifier": "CDataFileMgr::EMediaType", "argument": "Type" },
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" },
            { "identifier": "Boolean", "argument": "SortByNameElseByDate" },
            { "identifier": "Boolean", "argument": "SortOrderAsc" }
          ],
          "documentation": "Get the list of media stored according to the filters in the specified path."
        },
        {
          "name": "Media_GetFilteredGameList",
          "returns": "CTaskResult_FileList",
          "params": [
            { "identifier": "CDataFileMgr::EMediaType", "argument": "Type" },
            { "identifier": "Integer", "argument": "Scope" },
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" },
            { "identifier": "Boolean", "argument": "SortByNameElseByDate" },
            { "identifier": "Boolean", "argument": "SortOrderAsc" }
          ],
          "documentation": "Get the list of media stored in the specified path. Scope is used to specify if the list is retrieved from game data (1), title data (2) or user data (4), which can be added."
        },
        {
          "name": "Media_RefreshFromDisk",
          "returns": "Void",
          "params": [
            { "identifier": "CDataFileMgr::EMediaType", "argument": "Type" },
            { "identifier": "Integer", "argument": "Scope" }
          ],
          "documentation": "Refresh the list of media stored in the specified path. Scope is used to specify if the list is retrieved from game data (1), title data (2) or user data (4), which can be added."
        },
        {
          "name": "GameMode_GetGameList",
          "returns": "CTaskResult_GameModeList",
          "params": [
            { "identifier": "Integer", "argument": "Scope" },
            { "identifier": "Text", "argument": "Path" },
            { "identifier": "Boolean", "argument": "Flatten" }
          ],
          "documentation": ""
        },
        {
          "name": "Pack_DownloadOrUpdate",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Text", "argument": "DisplayName" },
            { "identifier": "Text", "argument": "Url" }
          ],
          "documentation": ""
        },
        {
          "name": "UserSave_DeleteFile",
          "returns": "CTaskResult",
          "params": [{ "identifier": "Text", "argument": "Path" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CScoreMgr": {
      "inherit": "CNod",
      "enums": {
        "ELocalScoreStatus": ["None", "Loading", "NotLoaded", "Loaded"],
        "EMasterServerScoreStatus": [
          "None",
          "Synchronizing",
          "NotSynchronized",
          "Synchronized"
        ]
      },
      "props": {
        "CTaskResult[]": [
          {
            "name": "TaskResults",
            "readonly": true,
            "documentation": "Array of task results."
          }
        ]
      },
      "methods": [
        {
          "name": "TaskResult_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "TaskId" }],
          "documentation": "Release a task result no more used."
        },
        {
          "name": "ScoreStatus_GetLocalStatusForContext",
          "returns": "CScoreMgr::ELocalScoreStatus",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ScopeType" },
            { "identifier": "Text", "argument": "ScopeId" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" }
          ],
          "documentation": "Returns the local status of user records for the specified context."
        },
        {
          "name": "ScoreStatus_GetMasterServerStatusForContext",
          "returns": "CScoreMgr::EMasterServerScoreStatus",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ScopeType" },
            { "identifier": "Text", "argument": "ScopeId" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" }
          ],
          "documentation": "Returns the masterserver status of user records for the specified context."
        },
        {
          "name": "Playground_GetPlayerGhost",
          "returns": "CGhost",
          "params": [{ "identifier": "CPlayer", "argument": "GamePlayer" }],
          "documentation": "Returns the ghost currently being recorded for a player on the current playground. (or the latest ghost if the player is not playing.)"
        },
        {
          "name": "Map_SetNewRecord_v2",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" },
            { "identifier": "CGhost", "argument": "Ghost" }
          ],
          "documentation": "Set a new record for a map."
        },
        {
          "name": "Map_GetRecord_v2",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "ScopeType" },
            { "identifier": "Text", "argument": "ScopeId" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" }
          ],
          "documentation": "Returns the user record time for a map."
        },
        {
          "name": "Map_GetRecordGhost_v2",
          "returns": "CTaskResult_Ghost",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "ScopeType" },
            { "identifier": "Text", "argument": "ScopeId" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" }
          ],
          "documentation": "Returns the user record ghost for  a map."
        },
        {
          "name": "Map_GetMedal",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "ScopeType" },
            { "identifier": "Text", "argument": "ScopeId" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" }
          ],
          "documentation": "Returns the number of medals for a map."
        },
        {
          "name": "Map_GetMultiAsyncLevelRecord_v2",
          "returns": "Integer",
          "params": [
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "ScopeType" },
            { "identifier": "Text", "argument": "ScopeId" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" },
            { "identifier": "Integer", "argument": "MultiAsyncLevel" }
          ],
          "documentation": "Returns the record score of the medal for a map."
        },
        {
          "name": "Map_GetMultiAsyncLevelRecordGhost_v2",
          "returns": "CTaskResult_Ghost",
          "params": [
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "ScopeType" },
            { "identifier": "Text", "argument": "ScopeId" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" },
            { "identifier": "Integer", "argument": "MultiAsyncLevel" }
          ],
          "documentation": "Returns the record ghost of the medal for a map."
        },
        {
          "name": "Map_GetSkillPoints_v2",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "ScopeType" },
            { "identifier": "Text", "argument": "ScopeId" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" }
          ],
          "documentation": "Returns the skillpoints for a map."
        },
        {
          "name": "Map_GetPlayerListRecordList",
          "returns": "CTaskResult_MapRecordList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "WebServicesUserIdList" },
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "ScopeType" },
            { "identifier": "Text", "argument": "ScopeId" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" }
          ],
          "documentation": ""
        },
        {
          "name": "MapLeaderBoard_GetPlayerRankingAsync",
          "returns": "CWebServicesTaskResult_Natural",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "Context" },
            { "identifier": "Text", "argument": "Zone" }
          ],
          "documentation": ""
        },
        {
          "name": "Campaign_GetMultiAsyncLevel",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "CampaignId" }
          ],
          "documentation": "Returns the number of medals for a campaign."
        },
        {
          "name": "Campaign_GetMultiAsyncLevelCount",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "CampaignId" },
            { "identifier": "Integer", "argument": "MultiAsyncLevel" }
          ],
          "documentation": "Returns the number of medals of the specified level for a campaign."
        },
        {
          "name": "Campaign_GetSkillPoints",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "CampaignId" }
          ],
          "documentation": "Returns the skillpoints for a campaign."
        },
        {
          "name": "Campaign_GetOpponentRecords",
          "returns": "CTaskResult_MapRecordList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "CampaignId" },
            { "identifier": "Text", "argument": "OpponentLogin" }
          ],
          "documentation": "Returns the all the records of an opponent specified by its login for a campaign."
        },
        {
          "name": "Campaign_GetBuddiesMapRecord",
          "returns": "CTaskResult_BuddiesChallengeRecord",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "CampaignId" },
            { "identifier": "Text", "argument": "MapUid" }
          ],
          "documentation": "Returns the buddies records for a map of a campaign."
        },
        {
          "name": "Campaign_IsBuddiesMapRecordDirty",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "CampaignId" },
            { "identifier": "Text", "argument": "MapUid" }
          ],
          "documentation": "Returns if the buddies records for a map of a campaign are dirty."
        },
        {
          "name": "Campaign_GetBuddiesMapRecordsComparison",
          "returns": "CTaskResult_BuddiesChallengeRecordsComparison",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "CampaignId" }
          ],
          "documentation": "Returns the buddies records comparison for a campaign."
        },
        {
          "name": "Campaign_GetBuddyMapRecordsComparison",
          "returns": "CTaskResult_BuddyChallengeRecordsComparison",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "OpponentLogin" },
            { "identifier": "Text", "argument": "CampaignId" }
          ],
          "documentation": "Returns the records comparison with a buddy for a campaign."
        },
        {
          "name": "CampaignLeaderBoard_GetPlayerRankingAsync",
          "returns": "CWebServicesTaskResult_Natural",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "CampaignId" },
            { "identifier": "Text", "argument": "Zone" },
            { "identifier": "Boolean", "argument": "UseSkillPoints" }
          ],
          "documentation": "Returns the user ranking on a campaign."
        },
        {
          "name": "CampaignLeaderBoard_GetPlayerCount",
          "returns": "Integer",
          "params": [
            { "identifier": "Text", "argument": "CampaignId" },
            { "identifier": "Text", "argument": "Zone" },
            { "identifier": "Boolean", "argument": "UseSkillPoints" }
          ],
          "documentation": "Returns the number of user ranked on a campaign."
        },
        {
          "name": "CampaignLeaderBoard_GetPlayerList",
          "returns": "CTaskResult_NaturalLeaderBoardInfoList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "CampaignId" },
            { "identifier": "Text", "argument": "Zone" },
            { "identifier": "Boolean", "argument": "UseSkillPoints" },
            { "identifier": "Integer", "argument": "FromIndex" },
            { "identifier": "Integer", "argument": "Count" }
          ],
          "documentation": "Returns a part of the campaign leaderboard."
        },
        {
          "name": "Season_Create",
          "returns": "CTaskResult_Season",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SeasonName" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" },
            { "identifier": "Text", "argument": "MapRecordType" },
            { "identifier": "Integer", "argument": "StartTimeStamp" },
            { "identifier": "Integer", "argument": "EndTimeStamp" },
            { "identifier": "Text[]", "argument": "MapUidList" }
          ],
          "documentation": "Creates a new season."
        },
        {
          "name": "Season_Update",
          "returns": "CTaskResult_Season",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SeasonId" },
            { "identifier": "Text", "argument": "SeasonName" },
            { "identifier": "Text", "argument": "GameMode" },
            { "identifier": "Text", "argument": "GameModeCustomData" },
            { "identifier": "Text", "argument": "MapRecordType" },
            { "identifier": "Integer", "argument": "StartTimeStamp" },
            { "identifier": "Integer", "argument": "EndTimeStamp" },
            { "identifier": "Text[]", "argument": "MapUidList" }
          ],
          "documentation": ""
        },
        {
          "name": "Season_AddMapList",
          "returns": "CTaskResult_Season",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SeasonId" },
            { "identifier": "Text[]", "argument": "MapUidList" }
          ],
          "documentation": ""
        },
        {
          "name": "Season_RemoveMapList",
          "returns": "CTaskResult_Season",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SeasonId" },
            { "identifier": "Text[]", "argument": "MapUidList" }
          ],
          "documentation": ""
        },
        {
          "name": "Season_Get",
          "returns": "CTaskResult_Season",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SeasonId" }
          ],
          "documentation": "Returns the season info from a season id."
        },
        {
          "name": "Season_GetList",
          "returns": "CTaskResult_SeasonList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "SeasonIdList" }
          ],
          "documentation": "Returns a list of season info from a list of season id."
        },
        {
          "name": "Season_GetListFromUser",
          "returns": "CTaskResult_SeasonList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": "Returns the list of created season from a webservices user id."
        },
        {
          "name": "Season_LoadScore",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SeasonId" }
          ],
          "documentation": "Loads and synchronizes season scores."
        },
        {
          "name": "Season_LoadScoreList",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "SeasonIdList" }
          ],
          "documentation": "Loads and synchronizes scores for a list of season."
        },
        {
          "name": "Season_GetOpponentRecordList",
          "returns": "CTaskResult_MapRecordList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SeasonId" },
            { "identifier": "Text", "argument": "OpponentWebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "Multiplayer_AddToScore",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Real", "argument": "ScoreDiff" },
            { "identifier": "Integer", "argument": "Timestamp" }
          ],
          "documentation": "Add points to multiplayer score."
        },
        {
          "name": "MultiplayerLeaderBoard_GetPlayerRanking",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "Zone" }
          ],
          "documentation": "Returns the multiplayer ranking."
        },
        {
          "name": "MultiplayerLeaderBoard_GetPlayerCount",
          "returns": "Integer",
          "params": [{ "identifier": "Text", "argument": "Zone" }],
          "documentation": "Returns the number of user ranked in multiplayer leaderboard."
        },
        {
          "name": "GlobalLeaderBoard_GetPlayerRanking",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "Zone" }
          ],
          "documentation": "Returns the user global ranking."
        },
        {
          "name": "GlobalLeaderBoard_GetPlayerCount",
          "returns": "Integer",
          "params": [{ "identifier": "Text", "argument": "Zone" }],
          "documentation": "Returns the number of user ranked in global leaderboard."
        },
        {
          "name": "GlobalLeaderBoard_GetPlayerList",
          "returns": "CTaskResult_RealLeaderBoardInfoList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "Zone" },
            { "identifier": "Integer", "argument": "FromIndex" },
            { "identifier": "Integer", "argument": "Count" }
          ],
          "documentation": "Returns a part of the global leaderboard."
        },
        {
          "name": "Trophy_GetGainHistory",
          "returns": "CTaskResult_AccountTrophyGainHistory",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "Offset" },
            { "identifier": "Integer", "argument": "Count" }
          ],
          "documentation": "Returns the account trophy history."
        },
        {
          "name": "Trophy_GetGainHistoryByType",
          "returns": "CTaskResult_AccountTrophyGainHistory",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "TrophyType" },
            { "identifier": "Integer", "argument": "Offset" },
            { "identifier": "Integer", "argument": "Count" }
          ],
          "documentation": "Returns the account trophy history filtered by the specified type."
        },
        {
          "name": "Trophy_GetLastYearSummary",
          "returns": "CTaskResult_AccountTrophyLastYearSummary",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": "Returns the account trophy summary for the last year."
        },
        {
          "name": "Trophy_GetLastYearSummaryForUser",
          "returns": "CTaskResult_AccountTrophyLastYearSummary",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": "Returns the account trophy summary for the last year for the specified user"
        },
        {
          "name": "Trophy_GetSoloMedalAchievementSettings",
          "returns": "CTaskResult_TrophySoloMedalAchievementSettings",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SoloMedalAchievementType" }
          ],
          "documentation": "Returns the trophy solo medal achievement settings"
        }
      ],
      "documentation": ""
    },
    "CRankingsZoneMgr": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CTaskResult[]": [
          { "name": "TaskResults", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "TaskResult_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "TaskId" }],
          "documentation": ""
        },
        {
          "name": "GetPathAndName",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ZoneFullPath" },
            { "identifier": "Text", "argument": "ZonePath" },
            { "identifier": "Text", "argument": "ZoneName" }
          ],
          "documentation": ""
        },
        {
          "name": "GetZoneList",
          "returns": "CTaskResult_ZoneList",
          "params": [{ "identifier": "Text[]", "argument": "ZoneIdList" }],
          "documentation": ""
        },
        {
          "name": "GetChildZoneList",
          "returns": "CTaskResult_ZoneList",
          "params": [{ "identifier": "Text", "argument": "ZoneFullPath" }],
          "documentation": ""
        },
        {
          "name": "RetrieveUserZoneList",
          "returns": "CTaskResult_UserZoneList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "WebServicesUserIdList" }
          ],
          "documentation": ""
        },
        {
          "name": "SetUserZone",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ZoneFullPath" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CUserV2Manager": {
      "inherit": "CNod",
      "enums": {
        "ECrossPlayState": ["Unknown", "Disabled", "Enabled"],
        "EPrestigeMode": ["Unknown", "Ranked", "Royal", "Season"]
      },
      "props": {
        "CUserV2Profile": [
          { "name": "MainUserProfile", "readonly": true, "documentation": "" }
        ],
        "CTaskResult[]": [
          { "name": "TaskResults", "readonly": true, "documentation": "" }
        ],
        "CMasterServerUser": [
          {
            "name": "MainUserWebServicesInfo",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          {
            "name": "IsNetworkAvailable",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Mute_Myself",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CVoiceChatEvent[]": [
          { "name": "VoiceChat_Events", "readonly": true, "documentation": "" }
        ],
        "CGameUserVoiceChat[]": [
          { "name": "VoiceChat_Users", "readonly": true, "documentation": "" },
          {
            "name": "VoiceChat_Users_Local",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Users_Remote",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Users_Speaking",
            "readonly": true,
            "documentation": "List of users currently speaking. Sorted with local users first."
          },
          {
            "name": "VoiceChat_Users_Muted",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Users_Remote_Muted",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "TaskResult_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "TaskId" }],
          "documentation": ""
        },
        {
          "name": "TaskError_ShowSystemDialog",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ErrorCode" }
          ],
          "documentation": ""
        },
        {
          "name": "GetGroups",
          "returns": "CTaskResult_StringIntList",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": "NullId for the mainuser."
        },
        {
          "name": "FindDisplayName",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "WebServicesUserId" },
            { "identifier": "Boolean", "argument": "IsFirstPartyDisplayName" }
          ],
          "documentation": ""
        },
        {
          "name": "ResolveURLShorcut",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "ShortCutId" }],
          "documentation": ""
        },
        {
          "name": "FindWebServicesUserInfo",
          "returns": "CMasterServerUser",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "CheckNetworkAvailability",
          "returns": "CTaskResult",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "ConnectUser",
          "returns": "CTaskResult_Connect",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "ConnectUser",
          "returns": "CTaskResult_Connect",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            {
              "identifier": "Boolean",
              "argument": "ForceUbisoftConnectOverlay"
            }
          ],
          "documentation": ""
        },
        {
          "name": "ConnectUser",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            {
              "identifier": "Boolean",
              "argument": "ForceUbisoftConnectOverlay"
            },
            { "identifier": "Boolean", "argument": "OfflineMode" }
          ],
          "documentation": ""
        },
        {
          "name": "Commerce_ShowPrimaryStore",
          "returns": "CTaskResult",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "CrossPlay_IsEnabled",
          "returns": "CTaskResult_Bool",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "CrossPlay_Setting_GetEnabled",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "CrossPlay_Setting_SetEnabled",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Boolean", "argument": "Value" }
          ],
          "documentation": ""
        },
        {
          "name": "CrossPlay_V2_IsEnabled",
          "returns": "CUserV2Manager::ECrossPlayState",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "CrossPlay_V2_SetEnabled",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Boolean", "argument": "Enabled" }
          ],
          "documentation": ""
        },
        {
          "name": "Blocklist_CanViewUGC",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "Friend_GetLastChangeIndex",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "Friend_GetList",
          "returns": "CTaskResult_FriendList",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "LiveSession_GetInfo",
          "returns": "CTaskResult_Session_Get",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SessionId" }
          ],
          "documentation": ""
        },
        {
          "name": "News_GetProfileNewsList",
          "returns": "CTaskResult_UserNewsList",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "News_GetSpaceNewsList",
          "returns": "CTaskResult_UserNewsList",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "News_OpenLink",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text", "argument": "Param" }
          ],
          "documentation": ""
        },
        {
          "name": "Prestige_GetAccountPrestigeList",
          "returns": "CTaskResult_UserPrestigeList",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "Prestige_GetCurrentAccountPrestige",
          "returns": "CTaskResult_UserPrestige",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "Prestige_GetCurrentAccountPrestigeForUser",
          "returns": "CTaskResult_UserPrestige",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "Prestige_GetPrestigeList",
          "returns": "CTaskResult_PrestigeList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            {
              "identifier": "CUserV2Manager::EPrestigeMode",
              "argument": "Mode"
            },
            { "identifier": "Integer", "argument": "Year" },
            { "identifier": "Text", "argument": "CategoryType" }
          ],
          "documentation": ""
        },
        {
          "name": "Prestige_SetCurrentAccountPrestige",
          "returns": "CTaskResult_UserPrestige",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "PrestigeId" }
          ],
          "documentation": ""
        },
        {
          "name": "Prestige_ResetCurrentAccountPrestige",
          "returns": "CTaskResult_UserPrestige",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "Squad_AcceptInvitation",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_CancelInvitation",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_Create",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadName" },
            { "identifier": "Integer", "argument": "Size" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_Create",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadName" },
            { "identifier": "Integer", "argument": "Size" },
            { "identifier": "Text", "argument": "Type" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_DeclineInvitation",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_Get",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_GetCurrent",
          "returns": "CTaskResult_Squad",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "Squad_Invite",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_JoinSession",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SessionId" },
            { "identifier": "Boolean", "argument": "IsFirstPartySession" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_Leave",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_RemoveMember",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_SetLeader",
          "returns": "CTaskResult_Squad",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" },
            { "identifier": "Text", "argument": "WebServicesUserId" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_SetLocked",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" },
            { "identifier": "Boolean", "argument": "Locked" }
          ],
          "documentation": ""
        },
        {
          "name": "Squad_SetType",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SquadId" },
            { "identifier": "Text", "argument": "Type" }
          ],
          "documentation": ""
        },
        {
          "name": "VoiceChat_MuteAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "VoiceChat_UnmuteAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "VoiceChat_FindUserFromWebServicesUserId",
          "returns": "CGameUserVoiceChat",
          "params": [{ "identifier": "Text", "argument": "WebServicesUserId" }],
          "documentation": ""
        },
        {
          "name": "Subscription_GetEndTimeStamp",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "SubscriptionName" }
          ],
          "documentation": ""
        },
        {
          "name": "Tag_GetClubTag",
          "returns": "CTaskResult_StringInt",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": ""
        },
        {
          "name": "Tag_GetClubTagList",
          "returns": "CTaskResult_ClubTagList",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text[]", "argument": "WebServicesUserIdList" }
          ],
          "documentation": ""
        },
        {
          "name": "Tag_SetClubTag",
          "returns": "CTaskResult",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ClubTag" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CAnimManager": {
      "inherit": "CNod",
      "enums": {
        "EAnimManagerEasing": [
          "Linear",
          "QuadIn",
          "QuadOut",
          "QuadInOut",
          "CubicIn",
          "CubicOut",
          "CubicInOut",
          "QuartIn",
          "QuartOut",
          "QuartInOut",
          "QuintIn",
          "QuintOut",
          "QuintInOut",
          "SineIn",
          "SineOut",
          "SineInOut",
          "ExpIn",
          "ExpOut",
          "ExpInOut",
          "CircIn",
          "CircOut",
          "CircInOut",
          "BackIn",
          "BackOut",
          "BackInOut",
          "ElasticIn",
          "ElasticOut",
          "ElasticInOut",
          "ElasticIn2",
          "ElasticOut2",
          "ElasticInOut2",
          "BounceIn",
          "BounceOut",
          "BounceInOut"
        ]
      },
      "props": {},
      "methods": [
        {
          "name": "Add",
          "returns": "Void",
          "params": [
            { "identifier": "CMlControl", "argument": "Control" },
            { "identifier": "Text", "argument": "XmlTarget" },
            { "identifier": "Integer", "argument": "StartTime" },
            { "identifier": "Integer", "argument": "Duration" },
            {
              "identifier": "CAnimManager::EAnimManagerEasing",
              "argument": "EasingFunc"
            }
          ],
          "documentation": ""
        },
        {
          "name": "AddChain",
          "returns": "Void",
          "params": [
            { "identifier": "CMlControl", "argument": "Control" },
            { "identifier": "Text", "argument": "XmlTarget" },
            { "identifier": "Integer", "argument": "Duration" },
            {
              "identifier": "CAnimManager::EAnimManagerEasing",
              "argument": "EasingFunc"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Add",
          "returns": "Void",
          "params": [
            { "identifier": "CMlControl", "argument": "Control" },
            { "identifier": "Text", "argument": "XmlTarget" },
            { "identifier": "Integer", "argument": "Duration" },
            {
              "identifier": "CAnimManager::EAnimManagerEasing",
              "argument": "EasingFunc"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Flush",
          "returns": "Void",
          "params": [{ "identifier": "CMlControl", "argument": "Control" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMenuSceneManager": {
      "inherit": "CNod",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "SceneCreate",
          "returns": "Ident",
          "params": [{ "identifier": "Text", "argument": "LayoutFileName" }],
          "documentation": "LayoutFileName: can be 'Default' (or '') for default painter scene, 'Empty' for a simple empty scene, or a filename to game data."
        },
        {
          "name": "SceneDestroy",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SceneId" }],
          "documentation": ""
        },
        {
          "name": "CameraSetLocation",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Real", "argument": "AngleDeg" }
          ],
          "documentation": ""
        },
        {
          "name": "CameraSetLocation",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Real", "argument": "AngleDeg" },
            { "identifier": "Real", "argument": "FovY_Deg" }
          ],
          "documentation": ""
        },
        {
          "name": "CameraSetFromItem",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Ident", "argument": "ItemId" }
          ],
          "documentation": ""
        },
        {
          "name": "LightDir0Set",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Vec3", "argument": "sRGB" },
            { "identifier": "Real", "argument": "Intensity" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemCreate",
          "returns": "Ident",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Text", "argument": "ModelName" },
            { "identifier": "Text", "argument": "SkinName" },
            { "identifier": "Text", "argument": "SkinUrl" }
          ],
          "documentation": "SkinNameOrUrl: can be 'Skins/Model/....', 'http://....', 'Default' (or '') for item default skin, 'Profile' for the user choice for the model. ModelName: item filename."
        },
        {
          "name": "ItemCreate",
          "returns": "Ident",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Text", "argument": "ModelName" },
            { "identifier": "Text", "argument": "SkinName" },
            { "identifier": "Text", "argument": "SkinUrl" },
            { "identifier": "Text", "argument": "SkinOptions" }
          ],
          "documentation": "SkinNameOrUrl: can be 'Skins/Model/....', 'http://....', 'Default' (or '') for item default skin, 'Profile' for the user choice for the model. ModelName: item filename."
        },
        {
          "name": "ItemDestroy",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Ident", "argument": "ItemId" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemSetLocation",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Ident", "argument": "ItemId" },
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Real", "argument": "AngleDeg" },
            { "identifier": "Boolean", "argument": "IsTurntable" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemAttachTo",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Ident", "argument": "ItemId" },
            { "identifier": "Ident", "argument": "ParentItemId" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemSetVehicleState",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Ident", "argument": "ItemId" },
            { "identifier": "Real", "argument": "Steer" },
            { "identifier": "Boolean", "argument": "Brakes" },
            { "identifier": "Boolean", "argument": "FrontLight" },
            { "identifier": "Integer", "argument": "TurboLvl" },
            { "identifier": "Integer", "argument": "BoostLvl" },
            { "identifier": "Boolean", "argument": "BurnoutSmoke" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemSetPlayerState",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Ident", "argument": "ItemId" },
            { "identifier": "Vec3", "argument": "LightrailColor" },
            { "identifier": "Vec3", "argument": "DossardColor" },
            { "identifier": "Text", "argument": "DossardNumber" },
            { "identifier": "Text", "argument": "DossardTrigram" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemSetPlayerState",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Ident", "argument": "ItemId" },
            { "identifier": "CUser", "argument": "User" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemTriggerPlayerGesture",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Ident", "argument": "ItemId" }
          ],
          "documentation": ""
        },
        {
          "name": "ItemSetPivot",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Ident", "argument": "ItemId" },
            { "identifier": "Vec3", "argument": "Pivot" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaneReflectEnable",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Real", "argument": "OutOpacity" },
            { "identifier": "CMlQuad", "argument": "Quad0" },
            { "identifier": "CMlQuad", "argument": "Quad1" },
            { "identifier": "CMlQuad", "argument": "Quad2" },
            { "identifier": "CMlQuad", "argument": "Quad3" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaneReflectEnable",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Real", "argument": "OutOpacity" },
            { "identifier": "CMlQuad", "argument": "Quad0" },
            { "identifier": "CMlQuad", "argument": "Quad1" },
            { "identifier": "CMlQuad", "argument": "Quad2" },
            { "identifier": "CMlQuad", "argument": "Quad3" },
            { "identifier": "Real", "argument": "HorizonAngleDeg_InCamera" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaneReflectRefresh",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetBackgroundQuads",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "CMlQuad", "argument": "Quad0" },
            { "identifier": "CMlQuad", "argument": "Quad1" },
            { "identifier": "CMlQuad", "argument": "Quad2" },
            { "identifier": "CMlQuad", "argument": "Quad3" }
          ],
          "documentation": ""
        },
        {
          "name": "CubeMapSetImage2ds",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Text", "argument": "RelName0" },
            { "identifier": "Text", "argument": "RelName1" },
            { "identifier": "Text", "argument": "RelName2" },
            { "identifier": "Text", "argument": "RelName3" }
          ],
          "documentation": ""
        },
        {
          "name": "ColorGradingSetImage2ds",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Text", "argument": "RelName0" },
            { "identifier": "Text", "argument": "RelName1" },
            { "identifier": "Text", "argument": "RelName2" },
            { "identifier": "Text", "argument": "RelName3" }
          ],
          "documentation": ""
        },
        {
          "name": "MoodLightDir0Set",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Integer", "argument": "iMood" },
            { "identifier": "Vec3", "argument": "sRGB" },
            { "identifier": "Real", "argument": "Intensity" },
            { "identifier": "Real", "argument": "AltitudeDeg" },
            { "identifier": "Real", "argument": "AzimutDeg" }
          ],
          "documentation": "iMood: BackgroundQuads\nAltitudeDeg: 0=horizon, 90=Zenith\nAzimutDeg: 0=North(+Z), 90=East(-X), 180=South(-Z), 270=West(+X)\n!! the feature is enabled only when all 4 Moods have been set !!"
        },
        {
          "name": "PodiumTweakShadingSet",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Real", "argument": "BaseColor" },
            { "identifier": "Real", "argument": "CubeReflect" },
            { "identifier": "Real", "argument": "PlaneReflect" }
          ],
          "documentation": "All scales are [0,1] range"
        },
        {
          "name": "PostFxSet",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SceneId" },
            { "identifier": "Real", "argument": "BloomIntensity" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CSystemPlatform": {
      "inherit": "CNod",
      "enums": {
        "ESystemPlatform": [
          "None",
          "Steam",
          "UPlay",
          "PS4",
          "XBoxOne",
          "PS5",
          "XBoxSeries",
          "Stadia",
          "Luna"
        ],
        "ESystemSkuIdentifier": ["Unknown", "EU", "US", "JP", "CN"]
      },
      "props": {
        "CSystemPlatform::ESystemPlatform": [
          { "name": "Platform", "readonly": true, "documentation": "" }
        ],
        "CSystemPlatform::ESystemSkuIdentifier": [
          { "name": "SkuIdentifier", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "ExeVersion", "readonly": true, "documentation": "" },
          {
            "name": "CurrentLocalDateText",
            "readonly": true,
            "documentation": ""
          },
          { "name": "CurrentTimezone", "readonly": true, "documentation": "" },
          {
            "name": "CurrentTimezoneTimeOffset",
            "readonly": true,
            "documentation": ""
          },
          { "name": "ExtraTool_Info", "readonly": true, "documentation": "" },
          { "name": "ExtraTool_Data", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "CurrentLocalDate",
            "readonly": true,
            "documentation": "Beware: altough it is a number of seconds since 'local epoch', this isnot a unix timestamp as it is the time in the local time zone. It is only useful for localized UI.  Use Timelib::GetCurrent() instead if you need an absolute unix timestamp."
          }
        ],
        "Boolean": [
          {
            "name": "IsWritingUserSave",
            "readonly": true,
            "documentation": "Background write to usersave in progress. Do not switch off the console."
          }
        ]
      },
      "methods": [
        {
          "name": "ClipboardSet",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ClipboardText" }],
          "documentation": ""
        },
        {
          "name": "FlashWindow",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CWSNotificationManager": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CTaskResult[]": [
          {
            "name": "TaskResults",
            "readonly": true,
            "documentation": "Array of task results."
          }
        ]
      },
      "methods": [
        {
          "name": "TaskResult_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "TaskId" }],
          "documentation": "Release a task result no more used."
        },
        {
          "name": "Notification_IsAvailable",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": "Check if a notification is available for the specified user."
        },
        {
          "name": "Notification_PopNext",
          "returns": "CTaskResult_WSNotification",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": "Retrieve the next available notification for the specified user."
        }
      ],
      "documentation": ""
    },
    "CGameModuleEditorBase": {
      "inherit": "CManiaApp",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CManiaAppTitle": {
      "inherit": "CManiaApp",
      "enums": {},
      "props": {
        "CManiaAppEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "LoadingScreenRequireKeyPressed",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "DontScaleMainMenuForHMD",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Authentication_GetTokenResponseReceived",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Adverts_UsePersonnalData",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Adverts_Enabled", "readonly": false, "documentation": "" }
        ],
        "Real": [
          {
            "name": "FillExtraSpaceWithBluredContents_Opacity",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          }
        ],
        "CTitleControl": [
          { "name": "TitleControl", "readonly": true, "documentation": "" }
        ],
        "CTitleEdition": [
          {
            "name": "TitleEdition",
            "readonly": true,
            "documentation": "Only available when editing a title."
          }
        ],
        "CNotificationsConsumer": [
          { "name": "Notifications", "readonly": true, "documentation": "" }
        ],
        "Text": [
          {
            "name": "ExternalRequest_Type",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Authentication_Token",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text[]": [
          {
            "name": "ExternalRequest_Data",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CMatchSettingsManager": [
          {
            "name": "MatchSettingsManager",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMenuSceneManager": [
          { "name": "MenuSceneManager", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "Authentication_ErrorCode",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CVoiceChatConfig": [
          { "name": "VoiceChat", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Menu_Quit",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Menu_Home",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Menu_Solo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Menu_Local",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Menu_Internet",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Menu_Editor",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Menu_Profile",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ExternalRequest_Clear",
          "returns": "Void",
          "params": [],
          "documentation": "Call as soon as the request has been consumed and is being processed."
        },
        {
          "name": "LogToSessionTrace",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Text" }],
          "documentation": ""
        },
        {
          "name": "Authentication_GetToken",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "AppLogin" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMapEditorPlugin": {
      "inherit": "CManiaApp",
      "enums": {
        "CardinalDirections": ["North", "East", "South", "West"],
        "CardinalDirections8": [
          "North",
          "East",
          "South",
          "West",
          "NorthEast",
          "SouthEast",
          "SouthWest",
          "NorthWest"
        ],
        "RelativeDirections": [
          "Forward",
          "RightForward",
          "Right",
          "RightBackward",
          "Backward",
          "LeftBackward",
          "Left",
          "LeftForward"
        ],
        "PlaceMode": [
          "Unknown",
          "Terraform",
          "Block",
          "Macroblock",
          "Skin",
          "CopyPaste",
          "Test",
          "Plugin",
          "CustomSelection",
          "OffZone",
          "BlockProperty",
          "Path",
          "GhostBlock",
          "Item",
          "Light",
          "FreeBlock",
          "FreeMacroblock"
        ],
        "EditMode": [
          "Unknown",
          "Place",
          "FreeLook",
          "Erase",
          "Pick",
          "SelectionAdd",
          "SelectionRemove"
        ],
        "ShadowsQuality": [
          "NotComputed",
          "VeryFast",
          "Fast",
          "Default",
          "High",
          "Ultra"
        ],
        "ValidationStatus": ["NotValidable", "Validable", "Validated"],
        "MapElemColor": ["Default", "White", "Green", "Blue", "Red", "Black"],
        "PhaseOffset": [
          "None",
          "One8th",
          "Two8th",
          "Three8th",
          "Four8th",
          "Five8th",
          "Six8th",
          "Seven8th"
        ],
        "MapElemLightmapQuality": [
          "Normal",
          "High",
          "VeryHigh",
          "Highest",
          "Low",
          "VeryLow",
          "Lowest"
        ]
      },
      "props": {
        "CMapEditorPluginEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "CMap": [{ "name": "Map", "readonly": true, "documentation": "" }],
        "Text": [
          { "name": "MapName", "readonly": true, "documentation": "" },
          { "name": "MapFileName", "readonly": true, "documentation": "" },
          { "name": "ManialinkText", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "IsEditorReadyForRequest",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "BackToMainMenuRequested",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "HoldLoadingScreen",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "IsUltraShadowsQualityAvailable",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EnableMapTypeStartTest",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ForceMacroblockColor",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ForceMacroblockLightmapQuality",
            "readonly": false,
            "documentation": ""
          },
          { "name": "UndergroundMode", "readonly": false, "documentation": "" },
          { "name": "BlockStockMode", "readonly": false, "documentation": "" },
          { "name": "HideInventory", "readonly": false, "documentation": "" },
          {
            "name": "EnableAirMapping",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "EnableMixMapping",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "EnableEditorInputsCustomProcessing",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "EnableCursorShowingWhenInterfaceIsFocused",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "HideEditorInterface",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "HideBlockHelpers",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ShowPlacementGrid",
            "readonly": false,
            "documentation": ""
          },
          { "name": "IsTesting", "readonly": true, "documentation": "" },
          { "name": "IsValidating", "readonly": true, "documentation": "" },
          {
            "name": "EditorInputIsDown_Menu",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_SwitchToRace",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Undo",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Redo",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorTiltLeft",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorTiltRight",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorUp",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorRight",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorDown",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorLeft",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorRaise",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorLower",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorTurn",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorPick",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorPlace",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorDelete",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CameraUp",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CameraRight",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CameraDown",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CameraLeft",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CameraZoomNext",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Camera0",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Camera1",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Camera3",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Camera7",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Camera9",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_PivotChange",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorTurnSlightly",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_CursorTurnSlightlyAntiClockwise",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_IconUp",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_IconRight",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_IconDown",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_IconLeft",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_RemoveAll",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Save",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_SelectAll",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Copy",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Cut",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "EditorInputIsDown_Paste",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMapEditorPlugin::ShadowsQuality": [
          {
            "name": "CurrentShadowsQuality",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMapEditorPlugin::PlaceMode": [
          { "name": "PlaceMode", "readonly": false, "documentation": "" }
        ],
        "CMapEditorPlugin::EditMode": [
          { "name": "EditMode", "readonly": false, "documentation": "" }
        ],
        "CMapEditorPlugin::MapElemColor": [
          { "name": "NextMapElemColor", "readonly": false, "documentation": "" }
        ],
        "CMapEditorPlugin::PhaseOffset": [
          {
            "name": "NextItemPhaseOffset",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NextMbAdditionalPhaseOffset",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CMapEditorPlugin::MapElemLightmapQuality": [
          {
            "name": "NextMapElemLightmapQuality",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CMapEditorInventory": [
          { "name": "Inventory", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "CameraVAngle", "readonly": false, "documentation": "" },
          { "name": "CameraHAngle", "readonly": false, "documentation": "" },
          {
            "name": "CameraToTargetDistance",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ThumbnailCameraVAngle",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ThumbnailCameraHAngle",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ThumbnailCameraRoll",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ThumbnailCameraFovY",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CollectionSquareSize",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CollectionSquareHeight",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "BleacherSpectatorsFillRatio",
            "readonly": false,
            "documentation": "Preview the 'RoadsideSpectators' on the bleachers. if -1, use the BleacherSpectatorsAbsoluteCount instead."
          }
        ],
        "Vec3": [
          {
            "name": "CameraTargetPosition",
            "readonly": false,
            "documentation": ""
          },
          { "name": "CameraPosition", "readonly": true, "documentation": "" },
          {
            "name": "ThumbnailCameraPosition",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CustomSelectionRGB",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CMapEditorPlugin::MapElemLightmapQuality[]": [
          {
            "name": "CopyPaste_GetLightmapQualityInSelection_Results",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CItemAnchor[]": [
          {
            "name": "MacroblockInstanceItemsResults",
            "readonly": true,
            "documentation": ""
          },
          { "name": "Items", "readonly": true, "documentation": "" }
        ],
        "Text[]": [
          {
            "name": "GetItemsCountRequest",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "MediatrackIngameClips",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CMapEditorCamera": [
          { "name": "Camera", "readonly": true, "documentation": "" }
        ],
        "CMapEditorCursor": [
          { "name": "Cursor", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "MediatrackIngameEditedClipIndex",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CollectionGroundY",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "BleacherSpectatorsCount",
            "readonly": false,
            "documentation": "Preview the 'RoadsideSpectators' on the bleachers. used if BleacherSpectatorsFillRatio < 0."
          }
        ],
        "CBlock[]": [
          { "name": "Blocks", "readonly": true, "documentation": "" },
          { "name": "ClassicBlocks", "readonly": true, "documentation": "" },
          { "name": "TerrainBlocks", "readonly": true, "documentation": "" },
          { "name": "GhostBlocks", "readonly": true, "documentation": "" }
        ],
        "CBlockModel[]": [
          { "name": "BlockModels", "readonly": true, "documentation": "" },
          {
            "name": "TerrainBlockModels",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMacroblockModel[]": [
          { "name": "MacroblockModels", "readonly": true, "documentation": "" }
        ],
        "CBlockClipList[]": [
          { "name": "FixedClipLists", "readonly": true, "documentation": "" },
          { "name": "FrameClipLists", "readonly": true, "documentation": "" },
          {
            "name": "MacroblockInstanceClipLists",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMacroblockInstance[]": [
          {
            "name": "MacroblockInstances",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMapEditorConnectResults[]": [
          { "name": "ConnectResults", "readonly": true, "documentation": "" }
        ],
        "CAnchorData[]": [
          { "name": "AnchorData", "readonly": true, "documentation": "" }
        ],
        "Int3[]": [
          {
            "name": "CustomSelectionCoords",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CMapEditorPlugin::ValidationStatus": [
          { "name": "ValidationStatus", "readonly": true, "documentation": "" }
        ],
        "CMlPage": [
          { "name": "ManialinkPage", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "HideOtherPlugins",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ShowOtherPlugins",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ComputeShadows",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ComputeShadows",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorPlugin::ShadowsQuality",
              "argument": "ShadowsQuality"
            }
          ],
          "documentation": ""
        },
        {
          "name": "DisplayDefaultSetObjectivesDialog",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Undo",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Redo",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Help",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Validate",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "AutoSave",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Quit",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "QuickQuit",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "QuitAndSetResult",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text[]", "argument": "Data" }
          ],
          "documentation": ""
        },
        {
          "name": "QuickQuitAndSetResult",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text[]", "argument": "Data" }
          ],
          "documentation": ""
        },
        {
          "name": "TestMapFromStart",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "TestMapFromCoord",
          "returns": "Void",
          "params": [
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "TestMapWithMode",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "RulesModeName" }],
          "documentation": ""
        },
        {
          "name": "TestMapWithMode",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "RulesModeName" },
            { "identifier": "Text", "argument": "SettingsXml" }
          ],
          "documentation": ""
        },
        {
          "name": "TestMapWithMode_SplitScreen",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "RulesModeName" }],
          "documentation": ""
        },
        {
          "name": "TestMapWithMode_SplitScreen",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "RulesModeName" },
            { "identifier": "Integer", "argument": "ScreenCount" }
          ],
          "documentation": ""
        },
        {
          "name": "TestMapWithMode_SplitScreen",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "RulesModeName" },
            { "identifier": "Integer", "argument": "ScreenCount" },
            { "identifier": "Integer", "argument": "FakeCount" },
            { "identifier": "Text", "argument": "SettingsXml" }
          ],
          "documentation": ""
        },
        {
          "name": "SaveMap",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": ""
        },
        {
          "name": "SaveMapGamepadEditor",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": ""
        },
        {
          "name": "SaveMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "FileName" },
            { "identifier": "Text", "argument": "Path" }
          ],
          "documentation": ""
        },
        {
          "name": "GetRaceCamera",
          "returns": "Boolean",
          "params": [
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Real", "argument": "Yaw" },
            { "identifier": "Real", "argument": "Pitch" },
            { "identifier": "Real", "argument": "Roll" },
            { "identifier": "Real", "argument": "FovY" }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveAllBlocks",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveAllTerrain",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveAllOffZone",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveAllObjects",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveAllBlocksAndTerrain",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ShowCustomSelection",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "HideCustomSelection",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CopyPaste_Copy",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CopyPaste_Cut",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CopyPaste_Remove",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CopyPaste_SelectAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CopyPaste_ResetSelection",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "OpenToolsMenu",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "EditMediatrackIngame",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "PreloadAllBlocks",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "PreloadAllItems",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CanPlaceBlock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            },
            { "identifier": "Boolean", "argument": "OnGround" },
            { "identifier": "Integer", "argument": "VariantIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceBlock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CanPlaceGhostBlock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceGhostBlock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CanPlaceBlock_NoDestruction",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            },
            { "identifier": "Boolean", "argument": "OnGround" },
            { "identifier": "Integer", "argument": "VariantIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceBlock_NoDestruction",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CanPlaceRoadBlocks",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "StartCoord" },
            { "identifier": "Int3", "argument": "EndCoord" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceRoadBlocks",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "StartCoord" },
            { "identifier": "Int3", "argument": "EndCoord" }
          ],
          "documentation": ""
        },
        {
          "name": "CanPlaceTerrainBlocks",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "StartCoord" },
            { "identifier": "Int3", "argument": "EndCoord" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceTerrainBlocks",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "StartCoord" },
            { "identifier": "Int3", "argument": "EndCoord" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceTerrainBlocks_NoDestruction",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "StartCoord" },
            { "identifier": "Int3", "argument": "EndCoord" }
          ],
          "documentation": ""
        },
        {
          "name": "CanPlaceMacroblock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceMacroblock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceMacroblock_AirMode",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CanPlaceMacroblock_NoDestruction",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceMacroblock_NoDestruction",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CanPlaceMacroblock_NoTerrain",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceMacroblock_NoTerrain",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveMacroblock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveMacroblock_NoTerrain",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetBlock",
          "returns": "CBlock",
          "params": [{ "identifier": "Int3", "argument": "Coord" }],
          "documentation": ""
        },
        {
          "name": "GetBlock",
          "returns": "CBlock",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetGhostBlock",
          "returns": "CBlock",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "IsBlockModelSkinnable",
          "returns": "Boolean",
          "params": [{ "identifier": "CBlockModel", "argument": "BlockModel" }],
          "documentation": ""
        },
        {
          "name": "GetNbBlockModelSkins",
          "returns": "Integer",
          "params": [{ "identifier": "CBlockModel", "argument": "BlockModel" }],
          "documentation": ""
        },
        {
          "name": "GetBlockModelSkin",
          "returns": "Text",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Integer", "argument": "SkinIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "IsItemModelSkinnable",
          "returns": "Boolean",
          "params": [
            { "identifier": "CGameItemModel", "argument": "ItemModel" }
          ],
          "documentation": ""
        },
        {
          "name": "GetNbItemModelSkins",
          "returns": "Integer",
          "params": [
            { "identifier": "CGameItemModel", "argument": "ItemModel" }
          ],
          "documentation": ""
        },
        {
          "name": "GetItemModelSkin",
          "returns": "Text",
          "params": [
            { "identifier": "CGameItemModel", "argument": "ItemModel" },
            { "identifier": "Integer", "argument": "SkinIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "GetSkinDisplayName",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "SkinFileName" }],
          "documentation": ""
        },
        {
          "name": "GetBlockSkinBg",
          "returns": "Text",
          "params": [{ "identifier": "CBlock", "argument": "Block" }],
          "documentation": ""
        },
        {
          "name": "GetBlockSkinFg",
          "returns": "Text",
          "params": [{ "identifier": "CBlock", "argument": "Block" }],
          "documentation": ""
        },
        {
          "name": "SetBlockSkin",
          "returns": "Void",
          "params": [
            { "identifier": "CBlock", "argument": "Block" },
            { "identifier": "Text", "argument": "SkinFileName" }
          ],
          "documentation": ""
        },
        {
          "name": "SetBlockSkins",
          "returns": "Void",
          "params": [
            { "identifier": "CBlock", "argument": "Block" },
            { "identifier": "Text", "argument": "BgSkinFileName" },
            { "identifier": "Text", "argument": "FgSkinFileName" }
          ],
          "documentation": ""
        },
        {
          "name": "GetItemSkinBg",
          "returns": "Text",
          "params": [
            { "identifier": "CItemAnchor", "argument": "AnchoredObject" }
          ],
          "documentation": ""
        },
        {
          "name": "GetItemSkinFg",
          "returns": "Text",
          "params": [
            { "identifier": "CItemAnchor", "argument": "AnchoredObject" }
          ],
          "documentation": ""
        },
        {
          "name": "SetItemSkin",
          "returns": "Void",
          "params": [
            { "identifier": "CItemAnchor", "argument": "AnchoredObject" },
            { "identifier": "Text", "argument": "SkinFileName" }
          ],
          "documentation": ""
        },
        {
          "name": "SetItemSkins",
          "returns": "Void",
          "params": [
            { "identifier": "CItemAnchor", "argument": "AnchoredObject" },
            { "identifier": "Text", "argument": "BgSkinFileName" },
            { "identifier": "Text", "argument": "FgSkinFileName" }
          ],
          "documentation": ""
        },
        {
          "name": "IsSkinForeground",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Text", "argument": "SkinFileName" }
          ],
          "documentation": ""
        },
        {
          "name": "IsSkinForeground",
          "returns": "Boolean",
          "params": [
            { "identifier": "CGameItemModel", "argument": "ItemModel" },
            { "identifier": "Text", "argument": "SkinFileName" }
          ],
          "documentation": ""
        },
        {
          "name": "IsMacroblockModelSkinnable",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "BlockModel" }
          ],
          "documentation": ""
        },
        {
          "name": "SetMacroblockSkin",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockInstance", "argument": "Macroblock" },
            { "identifier": "Text", "argument": "SkinFileName" }
          ],
          "documentation": ""
        },
        {
          "name": "OpenBlockSkinDialog",
          "returns": "Boolean",
          "params": [{ "identifier": "CBlock", "argument": "Block" }],
          "documentation": ""
        },
        {
          "name": "RemoveBlock",
          "returns": "Boolean",
          "params": [{ "identifier": "Int3", "argument": "Coord" }],
          "documentation": ""
        },
        {
          "name": "RemoveBlock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveGhostBlock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveTerrainBlocks",
          "returns": "Boolean",
          "params": [
            { "identifier": "Int3", "argument": "StartCoord" },
            { "identifier": "Int3", "argument": "EndCoord" }
          ],
          "documentation": ""
        },
        {
          "name": "GetBlockGroundHeight",
          "returns": "Integer",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Integer", "argument": "CoordX" },
            { "identifier": "Integer", "argument": "CoordZ" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetGroundHeight",
          "returns": "Integer",
          "params": [
            { "identifier": "Integer", "argument": "CoordX" },
            { "identifier": "Integer", "argument": "CoordZ" }
          ],
          "documentation": ""
        },
        {
          "name": "GetMouseCoordOnGround",
          "returns": "Int3",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetMouseCoordAtHeight",
          "returns": "Int3",
          "params": [{ "identifier": "Integer", "argument": "CoordY" }],
          "documentation": ""
        },
        {
          "name": "GetStartLineBlock",
          "returns": "CBlock",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveItem",
          "returns": "Boolean",
          "params": [{ "identifier": "CAnchorData", "argument": "Item" }],
          "documentation": ""
        },
        {
          "name": "CopyPaste_AddOrSubSelection",
          "returns": "Void",
          "params": [
            { "identifier": "Int3", "argument": "StartCoord" },
            { "identifier": "Int3", "argument": "EndCoord" }
          ],
          "documentation": ""
        },
        {
          "name": "CopyPaste_Symmetrize",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CopyPaste_GetSelectedCoordsCount",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SaveMacroblock",
          "returns": "Void",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" }
          ],
          "documentation": ""
        },
        {
          "name": "CopyPaste_ApplyColorToSelection",
          "returns": "Boolean",
          "params": [
            {
              "identifier": "CMapEditorPlugin::MapElemColor",
              "argument": "Color"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CopyPaste_IncreaseSelectionPhaseOffset",
          "returns": "Boolean",
          "params": [
            {
              "identifier": "CMapEditorPlugin::PhaseOffset",
              "argument": "Offset"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CopyPaste_DecreaseSelectionPhaseOffset",
          "returns": "Boolean",
          "params": [
            {
              "identifier": "CMapEditorPlugin::PhaseOffset",
              "argument": "Offset"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CopyPaste_SetSelectionPhaseOffset",
          "returns": "Boolean",
          "params": [
            {
              "identifier": "CMapEditorPlugin::PhaseOffset",
              "argument": "Offset"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CopyPaste_ApplyLightmapQualityToSelection",
          "returns": "Boolean",
          "params": [
            {
              "identifier": "CMapEditorPlugin::MapElemLightmapQuality",
              "argument": "LightmapQuality"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CopyPaste_GetLightmapQualityInSelection",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetMacroblockModelFromFilePath",
          "returns": "CMacroblockModel",
          "params": [
            { "identifier": "Text", "argument": "MacroblockModelFilePath" }
          ],
          "documentation": ""
        },
        {
          "name": "GetTerrainBlockModelFromName",
          "returns": "CBlockModel",
          "params": [
            { "identifier": "Text", "argument": "TerrainBlockModelName" }
          ],
          "documentation": ""
        },
        {
          "name": "GetBlockModelFromName",
          "returns": "CBlockModel",
          "params": [{ "identifier": "Text", "argument": "BlockModelName" }],
          "documentation": ""
        },
        {
          "name": "CreateFrameClipList",
          "returns": "CBlockClipList",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CreateFixedClipList",
          "returns": "CBlockClipList",
          "params": [],
          "documentation": ""
        },
        {
          "name": "UnvalidateMetadata",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "UnvalidateGameplayInfo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "UnvalidatePlayfield",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveMacroblock_NoTerrain_NoUnvalidate",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "PlaceMacroblock_NoTerrain_NoUnvalidate",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "ResetAutoRepeat",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ComputeItemsForMacroblockInstance",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMacroblockInstance",
              "argument": "MacroBlockInstance"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetConnectResults",
          "returns": "Void",
          "params": [
            { "identifier": "CBlock", "argument": "ExistingBlock" },
            { "identifier": "CBlockModel", "argument": "NewBlock" }
          ],
          "documentation": ""
        },
        {
          "name": "GetConnectResults",
          "returns": "Void",
          "params": [
            { "identifier": "CBlock", "argument": "ExistingBlock" },
            { "identifier": "CMacroblockModel", "argument": "NewBlock" }
          ],
          "documentation": ""
        },
        {
          "name": "GetConnectResults",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMacroblockInstance",
              "argument": "ExistingBlock"
            },
            { "identifier": "CBlockModel", "argument": "NewBlock" }
          ],
          "documentation": ""
        },
        {
          "name": "GetConnectResults",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMacroblockInstance",
              "argument": "ExistingBlock"
            },
            { "identifier": "CMacroblockModel", "argument": "NewBlock" }
          ],
          "documentation": ""
        },
        {
          "name": "GetStartBlockCount",
          "returns": "Integer",
          "params": [
            { "identifier": "Boolean", "argument": "IncludeMultilaps" }
          ],
          "documentation": ""
        },
        {
          "name": "GetFinishBlockCount",
          "returns": "Integer",
          "params": [
            { "identifier": "Boolean", "argument": "IncludeMultilaps" }
          ],
          "documentation": ""
        },
        {
          "name": "GetMultilapBlockCount",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetCheckpointBlockCount",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetItemsCountResult",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CreateMacroblockInstance",
          "returns": "CMacroblockInstance",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CreateMacroblockInstance",
          "returns": "CMacroblockInstance",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            },
            { "identifier": "Integer", "argument": "UserData" }
          ],
          "documentation": ""
        },
        {
          "name": "CreateMacroblockInstance",
          "returns": "CMacroblockInstance",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            },
            { "identifier": "CBlockClipList", "argument": "DefaultClipList" }
          ],
          "documentation": ""
        },
        {
          "name": "CreateMacroblockInstance",
          "returns": "CMacroblockInstance",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroblockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            },
            { "identifier": "CBlockClipList", "argument": "DefaultClipList" },
            { "identifier": "Integer", "argument": "UserData" }
          ],
          "documentation": ""
        },
        {
          "name": "GetMacroblockInstanceFromOrder",
          "returns": "CMacroblockInstance",
          "params": [{ "identifier": "Integer", "argument": "Order" }],
          "documentation": ""
        },
        {
          "name": "GetMacroblockInstanceFromUnitCoord",
          "returns": "CMacroblockInstance",
          "params": [{ "identifier": "Int3", "argument": "Coord" }],
          "documentation": ""
        },
        {
          "name": "GetLatestMacroblockInstance",
          "returns": "CMacroblockInstance",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetLatestMacroblockInstance",
          "returns": "CMacroblockInstance",
          "params": [{ "identifier": "Integer", "argument": "Offset" }],
          "documentation": ""
        },
        {
          "name": "GetMacroblockInstanceConnectedToClip",
          "returns": "CMacroblockInstance",
          "params": [{ "identifier": "CBlockClip", "argument": "Clip" }],
          "documentation": ""
        },
        {
          "name": "RemoveMacroblockInstance",
          "returns": "Boolean",
          "params": [
            {
              "identifier": "CMacroblockInstance",
              "argument": "MacroblockInstance"
            }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveMacroblockInstanceFromOrder",
          "returns": "Boolean",
          "params": [{ "identifier": "Integer", "argument": "Order" }],
          "documentation": ""
        },
        {
          "name": "RemoveMacroblockInstanceFromUnitCoord",
          "returns": "Boolean",
          "params": [{ "identifier": "Integer", "argument": "Order" }],
          "documentation": ""
        },
        {
          "name": "RemoveMacroblockInstancesByUserData",
          "returns": "Boolean",
          "params": [{ "identifier": "Integer", "argument": "UserData" }],
          "documentation": ""
        },
        {
          "name": "ResetAllMacroblockInstances",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetMaxOrder",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetMapType",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "MapType" }],
          "documentation": ""
        },
        {
          "name": "GetMapType",
          "returns": "Text",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetMapStyle",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "MapStyle" }],
          "documentation": ""
        },
        {
          "name": "GetMapStyle",
          "returns": "Text",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetAvailableMapName",
          "returns": "Text",
          "params": [],
          "documentation": ""
        },
        {
          "name": "IsMapFileNameAvailable",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "MapName" }],
          "documentation": ""
        },
        {
          "name": "GetVec3FromCoord",
          "returns": "Vec3",
          "params": [{ "identifier": "Int3", "argument": "Coord" }],
          "documentation": ""
        },
        {
          "name": "DoesAnchorHaveSpawn",
          "returns": "Boolean",
          "params": [{ "identifier": "CAnchorData", "argument": "Anchor" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CUILayer": {
      "inherit": "CNod",
      "enums": {
        "EUILayerType": [
          "Normal",
          "ScoresTable",
          "ScreenIn3d",
          "AltMenu",
          "Markers",
          "CutScene",
          "InGameMenu",
          "EditorPlugin",
          "ManiaplanetPlugin",
          "ManiaplanetMenu",
          "LoadingScreen"
        ],
        "EUILayerAnimation": [
          "None",
          "DownFast",
          "DownSlow",
          "LeftFast",
          "LeftSlow",
          "RightFast",
          "RightSlow",
          "ScaleFast",
          "ScaleSlow",
          "UpFast",
          "UpSlow"
        ]
      },
      "props": {
        "Boolean": [
          { "name": "IsVisible", "readonly": false, "documentation": "" },
          { "name": "AnimInProgress", "readonly": true, "documentation": "" },
          {
            "name": "IsLocalPageScriptRunning",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CUILayer::EUILayerType": [
          { "name": "Type", "readonly": false, "documentation": "" }
        ],
        "CUILayer::EUILayerAnimation": [
          { "name": "InAnimation", "readonly": false, "documentation": "" },
          { "name": "OutAnimation", "readonly": false, "documentation": "" },
          { "name": "InOutAnimation", "readonly": false, "documentation": "" }
        ],
        "Text": [
          { "name": "AttachId", "readonly": false, "documentation": "" },
          { "name": "ManialinkPage", "readonly": false, "documentation": "" }
        ],
        "CMlPage": [
          { "name": "LocalPage", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTrackingMgr": {
      "inherit": "CNod",
      "enums": {
        "EEventColorLevel": ["White", "Green", "Blue", "Red", "Black"],
        "EEventMedalLevel": ["Finished", "Bronze", "Silver", "Gold", "Author"],
        "EEventSeason": ["Winter", "Spring", "Summer", "Fall"],
        "EPlayTimeContext": ["None", "Club", "Create", "Live", "Local", "Solo"]
      },
      "props": {
        "CTaskResult[]": [
          {
            "name": "TaskResults",
            "readonly": true,
            "documentation": "Array of task results."
          }
        ]
      },
      "methods": [
        {
          "name": "TaskResult_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "TaskId" }],
          "documentation": "Release a task result no more used."
        },
        {
          "name": "Track_Context_PlayTime",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            {
              "identifier": "CTrackingMgr::EPlayTimeContext",
              "argument": "PlayTimeContext"
            }
          ],
          "documentation": "Track_Context_PlayTime"
        },
        {
          "name": "Track_Context_MenuStart",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MenuName" }
          ],
          "documentation": "Track_Context_MenuStart"
        },
        {
          "name": "Track_Context_MenuStop",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MenuName" }
          ],
          "documentation": "Track_Context_MenuStop"
        },
        {
          "name": "Track_Context_GameModeStart",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "GameMode" }
          ],
          "documentation": "Track_Context_GameModeStart"
        },
        {
          "name": "Track_Context_GameModeStop",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "GameMode" }
          ],
          "documentation": "Track_Context_GameModeStop"
        },
        {
          "name": "Track_Context_MapStart",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" },
            { "identifier": "Text", "argument": "Environment" }
          ],
          "documentation": "Track_Context_MapStart"
        },
        {
          "name": "Track_Context_MapStop",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "MapUid" }
          ],
          "documentation": "Track_Context_MapStop"
        },
        {
          "name": "Track_Context_PlayStart",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "Type" }
          ],
          "documentation": "Track_Context_PlayStart"
        },
        {
          "name": "Track_Context_PlayStop",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text", "argument": "Reason" },
            { "identifier": "Integer", "argument": "NbRespawns" }
          ],
          "documentation": "Track_Context_PlayStop"
        },
        {
          "name": "Track_Create_NewMapCreated",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "Environment" },
            { "identifier": "Boolean", "argument": "IsRandomlyGenerated" }
          ],
          "documentation": "Track_Create_NewMapCreated"
        },
        {
          "name": "Track_Live_COTDPlayed",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "Rank" },
            { "identifier": "Boolean", "argument": "Win" }
          ],
          "documentation": "Track_Live_COTDPlayed"
        },
        {
          "name": "Track_Live_MultiplayerPlayed",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "Rank" },
            { "identifier": "Boolean", "argument": "Win" }
          ],
          "documentation": "Track_Live_MultiplayerPlayed"
        },
        {
          "name": "Track_Live_RankedPlayed",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "Rank" },
            { "identifier": "Boolean", "argument": "Win" }
          ],
          "documentation": "Track_Live_RankedPlayed"
        },
        {
          "name": "Track_Live_RoyalPlayed_V2",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "Rank" },
            { "identifier": "Boolean", "argument": "Win" },
            { "identifier": "Boolean", "argument": "IsSuperRoyal" },
            { "identifier": "Text", "argument": "Division" }
          ],
          "documentation": "Track_Live_RoyalPlayed_V2"
        },
        {
          "name": "Track_Live_RoyalSectionFinished_V2",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            {
              "identifier": "CTrackingMgr::EEventColorLevel",
              "argument": "ColorLevel"
            }
          ],
          "documentation": "Track_Live_RoyalSectionFinished_V2"
        },
        {
          "name": "Track_Local_HotseatPlayed_V2",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": "Track_Local_HotseatPlayed_V2"
        },
        {
          "name": "Track_Local_SplitScreenPlayed_V2",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "UserId" }],
          "documentation": "Track_Local_SplitScreenPlayed_V2"
        },
        {
          "name": "Track_News_PlayerAction",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "NewsId" },
            { "identifier": "Text", "argument": "Placement" },
            { "identifier": "Text", "argument": "Action" }
          ],
          "documentation": "Track_News_PlayerAction"
        },
        {
          "name": "Track_News_PlayerImpression",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "NewsId" },
            { "identifier": "Text", "argument": "Placement" },
            { "identifier": "Integer", "argument": "Duration" }
          ],
          "documentation": "Track_News_PlayerImpression"
        },
        {
          "name": "Track_Player_MedalEarned",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "Finished" },
            { "identifier": "Integer", "argument": "BronzeMedal" },
            { "identifier": "Integer", "argument": "SilverMedal" },
            { "identifier": "Integer", "argument": "GoldMedal" },
            { "identifier": "Integer", "argument": "AuthorMedal" },
            { "identifier": "Boolean", "argument": "IsOfficialCampaign" },
            { "identifier": "Boolean", "argument": "IsTOTD" }
          ],
          "documentation": "Track_Player_MedalEarned"
        },
        {
          "name": "Track_Player_OfficialCampaignAllTrackCompleted_V2",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "Year" },
            {
              "identifier": "CTrackingMgr::EEventSeason",
              "argument": "Season"
            },
            {
              "identifier": "CTrackingMgr::EEventMedalLevel",
              "argument": "MedalLevel"
            }
          ],
          "documentation": "Track_Player_OfficialCampaignAllTrackCompleted_V2"
        },
        {
          "name": "Track_Player_TrackOfTheDayWeekAllTrackCompleted_V2",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "Year" },
            { "identifier": "Integer", "argument": "Week" },
            {
              "identifier": "CTrackingMgr::EEventMedalLevel",
              "argument": "MedalLevel"
            }
          ],
          "documentation": "Track_Player_TrackOfTheDayWeekAllTrackCompleted_V2"
        },
        {
          "name": "Track_Player_TrophyEarned",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Integer", "argument": "T1CountPtr" },
            { "identifier": "Integer", "argument": "T2CountPtr" },
            { "identifier": "Integer", "argument": "T3CountPtr" },
            { "identifier": "Integer", "argument": "T4CountPtr" },
            { "identifier": "Integer", "argument": "T5CountPtr" },
            { "identifier": "Integer", "argument": "T6CountPtr" },
            { "identifier": "Integer", "argument": "T7CountPtr" },
            { "identifier": "Integer", "argument": "T8CountPtr" },
            { "identifier": "Integer", "argument": "T9CountPtr" }
          ],
          "documentation": "Track_Player_TrophyEarned"
        },
        {
          "name": "Track_Player_StartActivity",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ActivityId" }
          ],
          "documentation": "Track_Player_StartActivity"
        },
        {
          "name": "Track_Player_EndActivity",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "ActivityId" }
          ],
          "documentation": "Track_Player_EndActivity"
        }
      ],
      "documentation": ""
    },
    "CAnyEditorPlugin": {
      "inherit": "CManiaApp",
      "enums": { "EInteractionStatus": ["Active", "Closed", "Aborted"] },
      "props": {
        "CManiaAppEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "CEditorModule": [
          { "name": "ModuleEditor", "readonly": true, "documentation": "" }
        ],
        "CEditorMesh": [
          { "name": "MeshEditor", "readonly": true, "documentation": "" }
        ],
        "CEditorEditor": [
          { "name": "EditorEditor", "readonly": true, "documentation": "" }
        ],
        "CEditorMediaTracker": [
          { "name": "MediaTracker", "readonly": true, "documentation": "" }
        ],
        "CEditorSkin": [
          { "name": "SkinEditor", "readonly": true, "documentation": "" }
        ],
        "CAnyEditorPlugin::EInteractionStatus": [
          { "name": "InteractionStatus", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CEditorPluginHandle": {
      "inherit": "CNod",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CMapInfo": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "MapUid", "readonly": true, "documentation": "" },
          { "name": "Comments", "readonly": true, "documentation": "" },
          { "name": "CollectionName", "readonly": true, "documentation": "" },
          { "name": "AuthorLogin", "readonly": true, "documentation": "" },
          { "name": "AuthorNickName", "readonly": true, "documentation": "" },
          { "name": "AuthorZonePath", "readonly": true, "documentation": "" },
          {
            "name": "AuthorZoneFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "AuthorCountryFlagUrl",
            "readonly": true,
            "documentation": ""
          },
          { "name": "MapType", "readonly": true, "documentation": "" },
          { "name": "MapStyle", "readonly": true, "documentation": "" },
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "Path", "readonly": true, "documentation": "" },
          { "name": "FileName", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "CopperPrice", "readonly": true, "documentation": "" },
          {
            "name": "TMObjective_AuthorTime",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "TMObjective_GoldTime",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "TMObjective_SilverTime",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "TMObjective_BronzeTime",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "TMObjective_NbLaps",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          { "name": "Unlocked", "readonly": true, "documentation": "" },
          { "name": "IsPlayable", "readonly": true, "documentation": "" },
          {
            "name": "CreatedWithSimpleEditor",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CreatedWithPartyEditor",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CreatedWithGamepadEditor",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "TMObjective_IsLapRace",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CClient": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CUser": [{ "name": "User", "readonly": true, "documentation": "" }],
        "CUIConfig": [{ "name": "UI", "readonly": true, "documentation": "" }],
        "Boolean": [
          {
            "name": "IsConnectedToMasterServer",
            "readonly": true,
            "documentation": "Otherwise, it's a LAN account not currently authentified with the masterserver."
          },
          { "name": "IsSpectator", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "ClientVersion", "readonly": true, "documentation": "" },
          {
            "name": "ClientTitleVersion",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          {
            "name": "IdleDuration",
            "readonly": true,
            "documentation": "Duration during which the player is not active while they should be (AFK)."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CUIConfig": {
      "inherit": "CNod",
      "enums": {
        "EUISequence": [
          "None",
          "Playing",
          "Intro",
          "Outro",
          "Podium",
          "CustomMTClip",
          "EndRound",
          "PlayersPresentation",
          "UIInteraction",
          "RollingBackgroundIntro",
          "CustomMTClip_WithUIInteraction",
          "Finish"
        ],
        "EUIStatus": ["None", "Normal", "Warning", "Error", "Official"],
        "EVisibility": [
          "None",
          "Normal",
          "Manual",
          "ForcedHidden",
          "ForcedVisible"
        ],
        "ELabelsVisibility": [
          "None",
          "Never",
          "Always",
          "WhenInFrustum",
          "WhenVisible",
          "WhenInMiddleOfScreen"
        ],
        "EAvatarVariant": ["Default", "Sad", "Happy"],
        "EUISound": [
          "Default",
          "Silence",
          "StartMatch",
          "EndMatch",
          "StartRound",
          "EndRound",
          "PhaseChange",
          "TieBreakPoint",
          "TiePoint",
          "VictoryPoint",
          "Capture",
          "TimeOut",
          "Notice",
          "Warning",
          "PlayerEliminated",
          "PlayerHit",
          "Checkpoint",
          "Finish",
          "Record",
          "ScoreProgress",
          "RankChange",
          "Bonus",
          "FirstHit",
          "Combo",
          "PlayersRemaining",
          "Custom1",
          "Custom2",
          "Custom3",
          "Custom4"
        ],
        "ENoticeLevel": [
          "Default",
          "PlayerInfo",
          "PlayerWarning",
          "MapInfo",
          "MapWarning",
          "MatchInfo",
          "MatchWarning"
        ],
        "EMessageDisplay": ["Chat", "Small", "Status", "Big"],
        "EObserverMode": ["Default", "Forced", "Forbidden", "Manual"],
        "EHudVisibility": ["Nothing", "Everything", "MarkersOnly", "Default"],
        "ECutSceneStyle": ["None", "TM", "SM"]
      },
      "props": {
        "CUIConfig::EUISequence": [
          { "name": "UISequence", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "UISequenceIsCompleted",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "UISequence_CanSkipIntroMT",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "DisableZoomTransitions",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverrideMarkers",
            "readonly": false,
            "documentation": "If True, the markers of this UI config overrides the markers of more generic UI configs.\nIf False they are merged."
          },
          {
            "name": "OverlayHideNotices",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideMapInfo",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideOpponentsInfo",
            "readonly": false,
            "documentation": ""
          },
          { "name": "OverlayHideChat", "readonly": false, "documentation": "" },
          {
            "name": "OverlayHideCheckPointList",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideRoundScores",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideCountdown",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideCrosshair",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideGauges",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideConsumables",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHide321Go",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayMute321Go",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideBackground",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideChrono",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideSpeedAndDist",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHidePersonnalBestAndRank",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHidePosition",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideCheckPointTime",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideEndMapLadderRecap",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideMultilapInfos",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideSpectatorControllers",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayHideSpectatorInfos",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayChatHideAvatar",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NoticesFilter_HidePlayerInfo",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NoticesFilter_HidePlayerWarning",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NoticesFilter_HidePlayerInfoIfNotMe",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NoticesFilter_HidePlayerWarningIfNotMe",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NoticesFilter_HideMapInfo",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NoticesFilter_HideMapWarning",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NoticesFilter_HideMatchInfo",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NoticesFilter_HideMatchWarning",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScoreTableOnlyManialink",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AltMenuNoDefaultScores",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AltMenuNoCustomScores",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OverlayScoreSummary",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScreenIn3dHideScoreSummary",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScreenIn3dHideVersus",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "DisplayControl_UseLiveCamera",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "DisplayControl_UseEsportsProgrammation",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LabelsVisibility_SkipMarkersOnly",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "PlayerDisableFreeCam",
            "readonly": false,
            "documentation": ""
          },
          { "name": "ForceSpectator", "readonly": false, "documentation": "" }
        ],
        "Text": [
          {
            "name": "UISequence_CustomMTClip",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UISequence_PodiumPlayersWin",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UISequence_PodiumPlayersLose",
            "readonly": false,
            "documentation": ""
          },
          { "name": "ManialinkPage", "readonly": false, "documentation": "" },
          { "name": "BigMessage", "readonly": false, "documentation": "" },
          {
            "name": "BigMessageAvatarLogin",
            "readonly": false,
            "documentation": ""
          },
          { "name": "StatusMessage", "readonly": false, "documentation": "" },
          { "name": "GaugeMessage", "readonly": false, "documentation": "" },
          {
            "name": "MarkersXML",
            "readonly": false,
            "documentation": "An XML text describing the map tooltips appearing in the HUD.<br/>It's a set of &lt;marker/&gt; elements which can have the following attributes : <ol><li>label : a text to display</li><li>pos : a vector of 3 world coordinates desribing the position of the marker</li><li>playerlogin : alternatively, instead of using pos, you can use a player login. The marker will smoothly follow the player</li><li>playerid : similar to playerlogin. Fill it with Player.MarkerId. The marker will smoothly follow the player</li><li>box : a vector of 3 dimensions describing the size of the marked object (allows a better placement of the marker on the screen)</li><li>gauge : a Real. If between 0. and 1. a gauge will be shown undeneath the text</li><li>imageurl : a string. URL of an image to use</li><li>distmax : a real. The marker will disappear if the dist to it is greater than distmax</li><li>isturning : a bool. Only for markers attached to players. If the marker appear on a minimap, it will turn around to reflect the player orientation.</li></ol>"
          },
          { "name": "ScoreTable", "readonly": false, "documentation": "" },
          { "name": "SmallScoreTable", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "UISequence_CustomMTRefTime",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "BigMessageSoundVariant",
            "readonly": false,
            "documentation": ""
          },
          { "name": "GaugeClan", "readonly": false, "documentation": "" },
          {
            "name": "OverlayChatLineCount",
            "readonly": false,
            "documentation": "Values in range (0 - 40)"
          },
          {
            "name": "ScoreSummary_Points1",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScoreSummary_RoundPoints1",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScoreSummary_MatchPoints1",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScoreSummary_Points2",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScoreSummary_RoundPoints2",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScoreSummary_MatchPoints2",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CountdownEndTime",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AlliesLabelsMaxCount",
            "readonly": false,
            "documentation": "Values in range (0 - 250)"
          },
          {
            "name": "SpectatorForceCameraType",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUIConfig::ECutSceneStyle": [
          {
            "name": "UISequence_CutSceneStyle",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUIConfig::EAvatarVariant": [
          {
            "name": "BigMessageAvatarVariant",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUIConfig::EUISound": [
          { "name": "BigMessageSound", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "GaugeRatio", "readonly": false, "documentation": "" },
          {
            "name": "OverlayChatWidthCoef",
            "readonly": false,
            "documentation": "Values in range (0.100000-10.000000)"
          },
          {
            "name": "ScoreSummary_Gauge1",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScoreSummary_Gauge2",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "SpectatorCamAutoLatitude",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "SpectatorCamAutoLongitude",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "SpectatorCamAutoRadius",
            "readonly": false,
            "documentation": ""
          }
        ],
        "l": [{ "name": "t", "readonly": false, "documentation": "" }],
        "CUIConfigMarker[]": [
          { "name": "Markers", "readonly": true, "documentation": "" }
        ],
        "CUILayer[]": [
          { "name": "UILayers", "readonly": true, "documentation": "" }
        ],
        "Vec2": [
          {
            "name": "OverlayChatOffset",
            "readonly": false,
            "documentation": ""
          },
          { "name": "CountdownCoord", "readonly": false, "documentation": "" }
        ],
        "CUIConfig::ENoticeLevel": [
          {
            "name": "NoticesFilter_LevelToShowAsBigMessage",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUIConfig::EVisibility": [
          {
            "name": "ScoreTableVisibility",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "SmallScoreTableVisibility",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AlliesLabelsShowGauges",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AlliesLabelsShowNames",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "TeamLabelsShowGauges",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "TeamLabelsShowNames",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OpposingTeamLabelsShowGauges",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OpposingTeamLabelsShowNames",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Ident": [
          {
            "name": "ScoreSummary_Player1",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ScoreSummary_Player2",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUIConfig::EUIStatus": [
          { "name": "UIStatus", "readonly": false, "documentation": "" }
        ],
        "CUIConfig::EHudVisibility": [
          { "name": "LabelsVisibility", "readonly": false, "documentation": "" }
        ],
        "CUIConfig::ELabelsVisibility": [
          {
            "name": "AlliesLabelsVisibility",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "TeamLabelsVisibility",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "OpposingTeamLabelsVisibility",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUIConfig::EObserverMode": [
          {
            "name": "SpectatorObserverMode",
            "readonly": false,
            "documentation": "When not in spectator mode, allow/forbid to change the camera to observe other players. (in Trackmania there's no 'Manual' mode.)"
          }
        ]
      },
      "methods": [
        {
          "name": "Spectator_SetAutoTarget_Clear",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Spectator_SetAutoTarget_All",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Spectator_SetAutoTarget_User",
          "returns": "Void",
          "params": [{ "identifier": "CUser", "argument": "User" }],
          "documentation": ""
        },
        {
          "name": "Spectator_SetForcedTarget_Clear",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Spectator_SetForcedTarget_AllPlayers",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Spectator_SetForcedTarget_AllMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Spectator_SetForcedTarget_Entity",
          "returns": "Void",
          "params": [{ "identifier": "CEntity", "argument": "Entity" }],
          "documentation": ""
        },
        {
          "name": "Spectator_SetForcedTarget_Landmark",
          "returns": "Void",
          "params": [{ "identifier": "CMapLandmark", "argument": "Landmark" }],
          "documentation": ""
        },
        {
          "name": "Spectator_SetForcedTarget_Ghost",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "GhostInstanceId" }],
          "documentation": "Only in local scripts, since ghosts are only known on the client."
        },
        {
          "name": "Spectator_SetForcedTarget_Clan",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "ClanNumber" }],
          "documentation": ""
        },
        {
          "name": "SendChat",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Text" }],
          "documentation": ""
        },
        {
          "name": "SendNotice",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Text" },
            { "identifier": "CUIConfig::ENoticeLevel", "argument": "Level" },
            { "identifier": "CUser", "argument": "Avatar" },
            {
              "identifier": "CUIConfig::EAvatarVariant",
              "argument": "AvatarVariant"
            },
            { "identifier": "CUIConfig::EUISound", "argument": "Sound" },
            { "identifier": "Integer", "argument": "SoundVariant" }
          ],
          "documentation": ""
        },
        {
          "name": "GetLayerManialinkAction",
          "returns": "Text",
          "params": [{ "identifier": "CUILayer", "argument": "Layer" }],
          "documentation": ""
        },
        {
          "name": "ClearLayerManialinkAction",
          "returns": "Void",
          "params": [{ "identifier": "CUILayer", "argument": "Layer" }],
          "documentation": ""
        },
        {
          "name": "AddMarker",
          "returns": "CUIConfigMarker",
          "params": [{ "identifier": "Vec3", "argument": "Position" }],
          "documentation": ""
        },
        {
          "name": "AddMarker",
          "returns": "CUIConfigMarker",
          "params": [{ "identifier": "CEntity", "argument": "Entity" }],
          "documentation": ""
        },
        {
          "name": "AddMarker",
          "returns": "CUIConfigMarker",
          "params": [{ "identifier": "CMapLandmark", "argument": "Landmark" }],
          "documentation": ""
        },
        {
          "name": "AddMarker",
          "returns": "CUIConfigMarker",
          "params": [{ "identifier": "Ident", "argument": "GhostInstanceId" }],
          "documentation": ""
        },
        {
          "name": "RemoveMarker",
          "returns": "Void",
          "params": [{ "identifier": "CUIConfigMarker", "argument": "Marker" }],
          "documentation": ""
        },
        {
          "name": "ClearMarkers",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "QueueMessage",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Duration" },
            { "identifier": "Integer", "argument": "Priority" },
            { "identifier": "CUIConfig::EMessageDisplay", "argument": "Level" },
            { "identifier": "Text", "argument": "Message" },
            { "identifier": "CUser", "argument": "Avatar" },
            {
              "identifier": "CUIConfig::EAvatarVariant",
              "argument": "AvatarVariant"
            },
            { "identifier": "CUIConfig::EUISound", "argument": "Sound" },
            { "identifier": "Integer", "argument": "SoundVariant" }
          ],
          "documentation": ""
        },
        {
          "name": "QueueMessage",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Duration" },
            { "identifier": "Integer", "argument": "Priority" },
            { "identifier": "CUIConfig::EMessageDisplay", "argument": "Level" },
            { "identifier": "Text", "argument": "Message" },
            { "identifier": "CUIConfig::EUISound", "argument": "Sound" },
            { "identifier": "Integer", "argument": "SoundVariant" }
          ],
          "documentation": ""
        },
        {
          "name": "QueueMessage",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Duration" },
            { "identifier": "Integer", "argument": "Priority" },
            { "identifier": "CUIConfig::EMessageDisplay", "argument": "Level" },
            { "identifier": "Text", "argument": "Message" }
          ],
          "documentation": ""
        },
        {
          "name": "ClearMessages",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CPlayer": {
      "inherit": "CEntity",
      "enums": {},
      "props": {
        "CUser": [{ "name": "User", "readonly": true, "documentation": "" }],
        "Integer": [
          { "name": "RequestedClan", "readonly": true, "documentation": "" },
          {
            "name": "LandmarkOrderSelector_Race",
            "readonly": false,
            "documentation": "This player will only have Race interactions (CP, finishes...) with landmarks whose Order is equal to the selector. Set to -1 to interact with all landmarks."
          }
        ],
        "Boolean": [
          { "name": "RequestsSpectate", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CScore": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CUser": [{ "name": "User", "readonly": true, "documentation": "" }],
        "Boolean": [
          {
            "name": "IsRegisteredForLadderMatch",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Real": [
          { "name": "LadderScore", "readonly": true, "documentation": "" },
          {
            "name": "LadderMatchScoreValue",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Integer": [
          {
            "name": "LadderRankSortValue",
            "readonly": false,
            "documentation": ""
          },
          { "name": "LadderClan", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTeam": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Name", "readonly": false, "documentation": "" },
          { "name": "ZonePath", "readonly": false, "documentation": "" },
          { "name": "City", "readonly": false, "documentation": "" },
          { "name": "EmblemUrl", "readonly": false, "documentation": "" },
          {
            "name": "PresentationManialinkUrl",
            "readonly": false,
            "documentation": ""
          },
          { "name": "ClubLinkUrl", "readonly": false, "documentation": "" },
          { "name": "ColorText", "readonly": true, "documentation": "" },
          { "name": "ColorizedName", "readonly": true, "documentation": "" }
        ],
        "Vec3": [
          { "name": "ColorPrimary", "readonly": false, "documentation": "" },
          { "name": "ColorSecondary", "readonly": false, "documentation": "" },
          { "name": "ColorUI", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CServerPluginEvent": {
      "inherit": "CBaseConstEvent",
      "enums": {
        "EType": [
          "Unknown",
          "ClientConnected",
          "ClientDisconnected",
          "MapLoaded",
          "BeginMatch",
          "BeginRound",
          "EndRound",
          "EndMatch",
          "MapUnloadRequested",
          "MapUnloaded",
          "ChatCommand",
          "ChatMessage",
          "ModeCallback"
        ],
        "EChatOption": [
          "Default",
          "ToSpectatorCurrent",
          "ToSpectatorAll",
          "ToTeam"
        ]
      },
      "props": {
        "CServerPluginEvent::EType": [
          { "name": "Type", "readonly": true, "documentation": "Event type." }
        ],
        "CClient": [
          { "name": "Client", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "ChatText", "readonly": true, "documentation": "" },
          { "name": "ChatCommandType", "readonly": true, "documentation": "" },
          { "name": "ModeCallbackType", "readonly": true, "documentation": "" }
        ],
        "CServerPluginEvent::EChatOption": [
          { "name": "ChatOption", "readonly": true, "documentation": "" }
        ],
        "Text[]": [
          { "name": "ChatCommandData", "readonly": false, "documentation": "" },
          { "name": "ModeCallbackData", "readonly": false, "documentation": "" }
        ],
        "CScore[]": [
          { "name": "EndMatchScores", "readonly": true, "documentation": "" }
        ],
        "Integer[]": [
          { "name": "EndMatchRanks", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CUIConfigMgr": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CUIConfig": [
          { "name": "UIAll", "readonly": true, "documentation": "" }
        ],
        "CUIConfig[]": [
          { "name": "UI", "readonly": true, "documentation": "" }
        ],
        "CUILayer[]": [
          { "name": "UILayers", "readonly": true, "documentation": "" },
          { "name": "UIReplayLayers", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "UISequenceMaxDuration",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Boolean": [
          {
            "name": "HoldLoadingScreen",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUIConfigEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "ResetAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetUI",
          "returns": "CUIConfig",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "GetUI",
          "returns": "CUIConfig",
          "params": [{ "identifier": "CUser", "argument": "User" }],
          "documentation": ""
        },
        {
          "name": "GetUI",
          "returns": "CUIConfig",
          "params": [{ "identifier": "CClient", "argument": "Client" }],
          "documentation": ""
        },
        {
          "name": "UILayerCreate",
          "returns": "CUILayer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "UILayerDestroy",
          "returns": "Void",
          "params": [{ "identifier": "CUILayer", "argument": "Layer" }],
          "documentation": ""
        },
        {
          "name": "UILayerDestroyAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CServerAdmin": {
      "inherit": "CNod",
      "enums": {
        "ESpecMode": [
          "Selectable",
          "SpectatorForced",
          "PlayerForced",
          "SpectatorSelectable",
          "PlayerSelectable"
        ]
      },
      "props": {
        "CServerInfo": [
          {
            "name": "ServerInfo",
            "readonly": true,
            "documentation": "ServerInfo"
          }
        ],
        "Boolean": [
          {
            "name": "IsDisableChangeTeams",
            "readonly": false,
            "documentation": "Disable Team change UI on the clients."
          },
          {
            "name": "IsDisableProfileSkins",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Authentication_GetTokenResponseReceived",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          {
            "name": "Authentication_ErrorCode",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text": [
          {
            "name": "Authentication_Token",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "PlayerRestrictions",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "AutoTeamBalance",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Kick",
          "returns": "Boolean",
          "params": [
            { "identifier": "CUser", "argument": "User" },
            { "identifier": "Text", "argument": "Reason" }
          ],
          "documentation": ""
        },
        {
          "name": "Kick",
          "returns": "Boolean",
          "params": [
            { "identifier": "CClient", "argument": "Client" },
            { "identifier": "Text", "argument": "Reason" }
          ],
          "documentation": ""
        },
        {
          "name": "Ban",
          "returns": "Boolean",
          "params": [
            { "identifier": "CUser", "argument": "User" },
            { "identifier": "Text", "argument": "Reason" }
          ],
          "documentation": ""
        },
        {
          "name": "Ban",
          "returns": "Boolean",
          "params": [
            { "identifier": "CClient", "argument": "Client" },
            { "identifier": "Text", "argument": "Reason" }
          ],
          "documentation": ""
        },
        {
          "name": "ForceSpectator",
          "returns": "Boolean",
          "params": [
            { "identifier": "CUser", "argument": "User" },
            { "identifier": "CServerAdmin::ESpecMode", "argument": "SpecMode" }
          ],
          "documentation": ""
        },
        {
          "name": "ForceSpectator",
          "returns": "Boolean",
          "params": [
            { "identifier": "CClient", "argument": "Client" },
            { "identifier": "CServerAdmin::ESpecMode", "argument": "SpecMode" }
          ],
          "documentation": ""
        },
        {
          "name": "ForcePlayerRequestedTeam",
          "returns": "Boolean",
          "params": [
            { "identifier": "CUser", "argument": "User" },
            { "identifier": "Integer", "argument": "Team" }
          ],
          "documentation": ""
        },
        {
          "name": "ForcePlayerRequestedTeam",
          "returns": "Boolean",
          "params": [
            { "identifier": "CClient", "argument": "Client" },
            { "identifier": "Integer", "argument": "Team" }
          ],
          "documentation": "Team is 1 or 2."
        },
        {
          "name": "ConnectFakePlayer",
          "returns": "Text",
          "params": [],
          "documentation": "Connect a fake player (to help with debugging game modes)"
        },
        {
          "name": "DisconnectFakePlayer",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Login" }],
          "documentation": ""
        },
        {
          "name": "SetLobbyInfo",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "IsLobby" },
            { "identifier": "Integer", "argument": "LobbyPlayerCount" },
            { "identifier": "Integer", "argument": "LobbyMaxPlayerCount" },
            { "identifier": "Real", "argument": "LobbyPlayersLevel" }
          ],
          "documentation": ""
        },
        {
          "name": "SendToServerAfterMatch",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ServerUrl" }],
          "documentation": ""
        },
        {
          "name": "CustomizeQuitDialog",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ManialinkPage" },
            { "identifier": "Text", "argument": "SendToServerUrl" },
            { "identifier": "Boolean", "argument": "ProposeAddToFavorites" },
            { "identifier": "Integer", "argument": "ForceDelay" }
          ],
          "documentation": ""
        },
        {
          "name": "Authentication_GetToken",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "UserId" },
            { "identifier": "Text", "argument": "AppLogin" }
          ],
          "documentation": "Always use NullId as UserId."
        },
        {
          "name": "SetViewerCount",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "ViewerCount" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CXmlRpc": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CXmlRpcEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SendCallback",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Param1" },
            { "identifier": "Text", "argument": "Param2" }
          ],
          "documentation": ""
        },
        {
          "name": "SendCallbackArray",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text[]", "argument": "Data" }
          ],
          "documentation": ""
        },
        {
          "name": "SendCallback_BeginRound",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SendCallback_EndRound",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CTaskResult": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Boolean": [
          {
            "name": "IsProcessing",
            "readonly": true,
            "documentation": "Returns a boolean indicating if the task is still processing."
          },
          {
            "name": "HasSucceeded",
            "readonly": true,
            "documentation": "Returns a boolean indicating if the task has succeeded."
          },
          {
            "name": "HasFailed",
            "readonly": true,
            "documentation": "Returns a boolean indicating if the task has failed or has been canceled."
          },
          {
            "name": "IsCanceled",
            "readonly": true,
            "documentation": "Returns a boolean indicating if the task has been canceled."
          }
        ],
        "Text": [
          {
            "name": "ErrorType",
            "readonly": true,
            "documentation": "Returns the type of the error if the task has failed."
          },
          {
            "name": "ErrorCode",
            "readonly": true,
            "documentation": "Returns the code of the error if the task has failed."
          },
          {
            "name": "ErrorDescription",
            "readonly": true,
            "documentation": "Returns the description of the error if the task has failed."
          }
        ]
      },
      "methods": [
        {
          "name": "Cancel",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CGhost": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Ident": [
          { "name": "Id", "readonly": true, "documentation": "Ghost id" }
        ],
        "CTmRaceResultNod": [
          {
            "name": "Result",
            "readonly": true,
            "documentation": "Result associated to this ghost (score/time/respawncount)."
          }
        ],
        "Text": [
          {
            "name": "Nickname",
            "readonly": false,
            "documentation": "Nickname of the player."
          },
          {
            "name": "Trigram",
            "readonly": false,
            "documentation": "Trigram of the player."
          },
          { "name": "CountryPath", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SetProfileInfoFromUser",
          "returns": "Void",
          "params": [{ "identifier": "CUser", "argument": "User" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CTaskResult_Ghost": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "CGhost": [
          {
            "name": "Ghost",
            "readonly": true,
            "documentation": "Ghost contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotification_Prestige": {
      "inherit": "CNotification",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CNotification_Squad": {
      "inherit": "CNotification",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CSkinInfo": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "Type", "readonly": true, "documentation": "" },
          { "name": "Url", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CAccountTrophyGain": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "AccountId", "readonly": true, "documentation": "" },
          { "name": "WebServicesUserId", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "T1Count", "readonly": true, "documentation": "" },
          { "name": "T2Count", "readonly": true, "documentation": "" },
          { "name": "T3Count", "readonly": true, "documentation": "" },
          { "name": "T4Count", "readonly": true, "documentation": "" },
          { "name": "T5Count", "readonly": true, "documentation": "" },
          { "name": "T6Count", "readonly": true, "documentation": "" },
          { "name": "T7Count", "readonly": true, "documentation": "" },
          { "name": "T8Count", "readonly": true, "documentation": "" },
          { "name": "T9Count", "readonly": true, "documentation": "" },
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTrophyAchievement": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "TrophyAchievementId",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "TrophyAchievementType",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMode": {
      "inherit": "CNod",
      "enums": {
        "EMedal": ["None", "Finished", "Bronze", "Silver", "Gold", "Author"]
      },
      "props": {
        "CTaskResult[]": [
          { "name": "TaskResults", "readonly": true, "documentation": "" }
        ],
        "Text": [
          {
            "name": "ModeStatusMessage",
            "readonly": false,
            "documentation": ""
          },
          { "name": "ServerLogin", "readonly": true, "documentation": "" },
          { "name": "ServerName", "readonly": true, "documentation": "" },
          { "name": "ServerModeName", "readonly": true, "documentation": "" },
          { "name": "MapName", "readonly": true, "documentation": "" },
          {
            "name": "MapPlayerModelName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "NeutralEmblemUrl",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ForcedClubLinkUrl1",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "ForcedClubLinkUrl2",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "ClientManiaAppUrl",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CTitle": [
          { "name": "LoadedTitle", "readonly": true, "documentation": "" }
        ],
        "CMap": [{ "name": "Map", "readonly": true, "documentation": "" }],
        "Boolean": [
          { "name": "HasPodium", "readonly": true, "documentation": "" },
          {
            "name": "MatchEndRequested",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ServerShutdownRequested",
            "readonly": true,
            "documentation": ""
          },
          { "name": "MapLoaded", "readonly": true, "documentation": "" },
          {
            "name": "Ladder_RequestInProgress",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Solo_NewRecordSequenceInProgress",
            "readonly": true,
            "documentation": ""
          },
          { "name": "UseMinimap", "readonly": false, "documentation": "" },
          {
            "name": "Replay_AutoStart",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "EnableGhostRecording",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUser[]": [{ "name": "Users", "readonly": true, "documentation": "" }],
        "CTeam[]": [{ "name": "Teams", "readonly": true, "documentation": "" }],
        "Integer": [
          { "name": "Now", "readonly": true, "documentation": "" },
          { "name": "Period", "readonly": true, "documentation": "" },
          { "name": "NextMapIndex", "readonly": false, "documentation": "" },
          { "name": "UiUpdatePeriod", "readonly": true, "documentation": "" }
        ],
        "CMapInfo[]": [
          { "name": "MapList", "readonly": true, "documentation": "" }
        ],
        "CUIConfigMgr": [
          { "name": "UIManager", "readonly": true, "documentation": "" }
        ],
        "CModulePlaygroundHud": [
          { "name": "Hud", "readonly": true, "documentation": "" }
        ],
        "CServerAdmin": [
          { "name": "ServerAdmin", "readonly": true, "documentation": "" }
        ],
        "CXmlRpc": [
          { "name": "XmlRpc", "readonly": true, "documentation": "" }
        ],
        "CParsingManager": [
          { "name": "Xml", "readonly": true, "documentation": "" }
        ],
        "CHttpManager": [
          { "name": "Http", "readonly": true, "documentation": "" }
        ],
        "CInputManager": [
          {
            "name": "Input",
            "readonly": true,
            "documentation": "Only available for local solo modes."
          }
        ],
        "CDataFileMgr": [
          {
            "name": "DataFileMgr",
            "readonly": true,
            "documentation": "Only available for local solo modes."
          }
        ],
        "CScoreMgr": [
          { "name": "ScoreMgr", "readonly": true, "documentation": "" }
        ],
        "CSystemPlatform": [
          { "name": "System", "readonly": true, "documentation": "" }
        ],
        "CUserV2Manager": [
          { "name": "UserMgr", "readonly": true, "documentation": "" }
        ],
        "CModeTurretManager": [
          { "name": "TurretsManager", "readonly": true, "documentation": "" }
        ],
        "CModeVehicleManager": [
          { "name": "VehiclesManager", "readonly": true, "documentation": "" }
        ],
        "CActionManager": [
          { "name": "ActionsManager", "readonly": true, "documentation": "" }
        ],
        "CGhost[]": [
          { "name": "Ghosts", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "TaskResult_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "TaskId" }],
          "documentation": ""
        },
        {
          "name": "TweakTeamColorsToAvoidHueOverlap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RequestLoadMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RequestUnloadMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Hud_Load",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ModuleName" }],
          "documentation": ""
        },
        {
          "name": "PassOn",
          "returns": "Void",
          "params": [
            { "identifier": "CUIConfigEvent", "argument": "EventToPassOn" }
          ],
          "documentation": ""
        },
        {
          "name": "Discard",
          "returns": "Void",
          "params": [
            { "identifier": "CUIConfigEvent", "argument": "EventToDiscard" }
          ],
          "documentation": ""
        },
        {
          "name": "Ladder_OpenMatch_Request",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Ladder_AddPlayer",
          "returns": "Void",
          "params": [{ "identifier": "CScore", "argument": "PlayerScore" }],
          "documentation": ""
        },
        {
          "name": "Ladder_OpenMatch_BeginRequest",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Ladder_OpenMatch_AddPlayer",
          "returns": "Void",
          "params": [{ "identifier": "CScore", "argument": "PlayerScore" }],
          "documentation": ""
        },
        {
          "name": "Ladder_OpenMatch_EndRequest",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Ladder_CloseMatchRequest",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Ladder_CancelMatchRequest",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Ladder_SetResultsVersion",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Version" }],
          "documentation": ""
        },
        {
          "name": "Ladder_SetMatchMakingMatchId",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "MatchId" }],
          "documentation": ""
        },
        {
          "name": "Ladder_EnableChallengeMode",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Enable" }],
          "documentation": ""
        },
        {
          "name": "Trophy_CompetitionMatch_AddResult",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "WebServicesUserId" },
            { "identifier": "Integer", "argument": "MatchRank" },
            { "identifier": "Integer", "argument": "TrophyRanking" }
          ],
          "documentation": ""
        },
        {
          "name": "Trophy_CompetitionMatch_ClearResultList",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Trophy_CompetitionMatch_SendResultList",
          "returns": "CTaskResult_AccountTrophyGainList",
          "params": [
            { "identifier": "Text", "argument": "CompetitionName" },
            { "identifier": "Text", "argument": "CompetitionStage" },
            { "identifier": "Text", "argument": "CompetitionStageStep" },
            { "identifier": "Text", "argument": "CompetitionMatchInfo" }
          ],
          "documentation": ""
        },
        {
          "name": "Trophy_LiveTimeAttackAchievement_AddResult",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "WebServicesUserId" },
            { "identifier": "Integer", "argument": "MatchRank" },
            { "identifier": "Integer", "argument": "TrophyRanking" }
          ],
          "documentation": ""
        },
        {
          "name": "Trophy_LiveTimeAttackAchievement_ClearResultList",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Trophy_LiveTimeAttackAchievement_SendResultList",
          "returns": "CTaskResult_AccountTrophyGainList",
          "params": [{ "identifier": "Integer", "argument": "Duration" }],
          "documentation": ""
        },
        {
          "name": "AutoTeamBalance",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Solo_SetNewRecord",
          "returns": "Void",
          "params": [
            { "identifier": "CScore", "argument": "PlayerScore" },
            { "identifier": "CMode::EMedal", "argument": "PlayerScore" }
          ],
          "documentation": ""
        },
        {
          "name": "Synchro_AddBarrier",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Synchro_BarrierReached",
          "returns": "Boolean",
          "params": [{ "identifier": "Integer", "argument": "Barrier" }],
          "documentation": ""
        },
        {
          "name": "Users_AreAllies",
          "returns": "Boolean",
          "params": [
            { "identifier": "CUser", "argument": "User1" },
            { "identifier": "CUser", "argument": "User2" }
          ],
          "documentation": ""
        },
        {
          "name": "Users_RequestSwitchToSpectator",
          "returns": "Void",
          "params": [{ "identifier": "CUser", "argument": "User" }],
          "documentation": ""
        },
        {
          "name": "Users_CreateFake",
          "returns": "CUser",
          "params": [
            { "identifier": "Text", "argument": "NickName" },
            { "identifier": "Integer", "argument": "RequestedTeam" }
          ],
          "documentation": ""
        },
        {
          "name": "Users_DestroyFake",
          "returns": "Void",
          "params": [{ "identifier": "CUser", "argument": "User" }],
          "documentation": ""
        },
        {
          "name": "Users_SetNbFakeUsers",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "NbTeam1" },
            { "identifier": "Integer", "argument": "NbTeam2" }
          ],
          "documentation": ""
        },
        {
          "name": "Users_DestroyAllFakes",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ItemList_Begin",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ItemList_Begin",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ItemList_Add",
          "returns": "Ident",
          "params": [{ "identifier": "Text", "argument": "ModelName" }],
          "documentation": ""
        },
        {
          "name": "ItemList_AddWithSkin",
          "returns": "Ident",
          "params": [
            { "identifier": "Text", "argument": "ModelName" },
            { "identifier": "Text", "argument": "SkinNameOrUrl" }
          ],
          "documentation": "SkinNameOrUrl: can be 'Skins/Model/....', 'http://....', 'Default' (or '') for item default skin, 'Profile' for the user choice for the model. ModelName: 'DefaultPlayerModel' for the default map model, or the item filename."
        },
        {
          "name": "ItemList_End",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "DemoToken_StartUsingToken",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "DemoToken_StopUsingToken",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "DemoToken_GetAndUseToken",
          "returns": "Void",
          "params": [{ "identifier": "CUser", "argument": "User" }],
          "documentation": ""
        },
        {
          "name": "ActionList_Begin",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ActionList_Begin",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ActionList_Add",
          "returns": "Ident",
          "params": [{ "identifier": "Text", "argument": "ActionName" }],
          "documentation": ""
        },
        {
          "name": "ActionList_End",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Replay_Start",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Replay_Stop",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Ghost_Release",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "GhostId" }],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Playlist_Clear",
          "returns": "Void",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Playlist_Add",
          "returns": "Void",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "CGhost", "argument": "Ghost" }
          ],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Upload_Begin",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "TeamLevel" }],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Upload_TeamMember_Begin",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Upload_AddGhost",
          "returns": "Void",
          "params": [{ "identifier": "CGhost", "argument": "Ghost" }],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Upload_TeamMember_End",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Upload_End",
          "returns": "CTaskResult",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Download_Begin",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Download_AddRange",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "TeamLevelMin" },
            { "identifier": "Integer", "argument": "TeamLevelMax" },
            { "identifier": "Integer", "argument": "Count" }
          ],
          "documentation": ""
        },
        {
          "name": "GhostDriver_Download_End",
          "returns": "CWebServicesTaskResult_GhostDriver_Download",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GameScene_ResetAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Dbg_DumpDeclareForVariables",
          "returns": "Text",
          "params": [
            { "identifier": "CNod", "argument": "Nod" },
            { "identifier": "Boolean", "argument": "StatsOnly" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CSmPlayer": {
      "inherit": "CPlayer",
      "enums": { "ESpawnStatus": ["NotSpawned", "Spawning", "Spawned"] },
      "props": {
        "CSmScore": [
          { "name": "Score", "readonly": true, "documentation": "" }
        ],
        "CSmPlayer::ESpawnStatus": [
          { "name": "SpawnStatus", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "StartTime", "readonly": true, "documentation": "" },
          { "name": "EndTime", "readonly": false, "documentation": "" },
          { "name": "CurrentLapNumber", "readonly": true, "documentation": "" },
          { "name": "CurrentRaceTime", "readonly": true, "documentation": "" },
          { "name": "CurrentLapTime", "readonly": true, "documentation": "" },
          {
            "name": "ActionWheelSelectedSlotIndex",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Armor", "readonly": false, "documentation": "" },
          { "name": "ArmorMax", "readonly": false, "documentation": "" },
          { "name": "ArmorGain", "readonly": false, "documentation": "" },
          {
            "name": "ArmorReplenishGain",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Stamina", "readonly": false, "documentation": "" },
          { "name": "StaminaMaxValue", "readonly": true, "documentation": "" },
          { "name": "CurrentClan", "readonly": true, "documentation": "" },
          { "name": "IdleDuration", "readonly": true, "documentation": "" },
          {
            "name": "NbActiveAttractors",
            "readonly": true,
            "documentation": ""
          },
          { "name": "DisplaySpeed", "readonly": true, "documentation": "" },
          { "name": "EngineCurGear", "readonly": true, "documentation": "" },
          {
            "name": "WheelsContactCount",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "WheelsSkiddingCount",
            "readonly": true,
            "documentation": ""
          },
          { "name": "FlyingDuration", "readonly": true, "documentation": "" },
          { "name": "SkiddingDuration", "readonly": true, "documentation": "" },
          {
            "name": "HandicapNoGasDuration",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "HandicapForceGasDuration",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "HandicapNoBrakesDuration",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "HandicapNoSteeringDuration",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "HandicapNoGripDuration",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer[]": [
          {
            "name": "RaceWaypointTimes",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LapWaypointTimes",
            "readonly": false,
            "documentation": "Equals CurrentLapWaypointTimes when not empty. If it is empty (i.e. before the 1st CP of a new lap), equals PreviousLapWaypointTimes."
          },
          {
            "name": "CurrentLapWaypointTimes",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "PreviousLapWaypointTimes",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Real": [
          {
            "name": "AmmoGain",
            "readonly": false,
            "documentation": "Values in range (0.000000-10.000000)"
          },
          {
            "name": "ArmorPower",
            "readonly": false,
            "documentation": "Values in range (0.100000-10.000000)"
          },
          {
            "name": "StaminaMax",
            "readonly": false,
            "documentation": "Values in range (0.100000-3.000000)"
          },
          {
            "name": "StaminaGain",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "StaminaPower",
            "readonly": false,
            "documentation": "Values in range (0.100000-1.000000)"
          },
          {
            "name": "SpeedPower",
            "readonly": false,
            "documentation": "Values in range (0.100000-1.000000)"
          },
          {
            "name": "JumpPower",
            "readonly": false,
            "documentation": "Values in range (0.100000-1.000000)"
          },
          {
            "name": "EnergyLevel",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "GetLinearHue",
            "readonly": true,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          { "name": "ForceLinearHue", "readonly": false, "documentation": "" },
          {
            "name": "ThrowSpeed",
            "readonly": false,
            "documentation": "Values in range (0.000000-500.000000)"
          },
          { "name": "AimYaw", "readonly": true, "documentation": "" },
          { "name": "AimPitch", "readonly": true, "documentation": "" },
          { "name": "AimRoll", "readonly": true, "documentation": "" },
          { "name": "Speed", "readonly": true, "documentation": "" },
          {
            "name": "AccelCoef",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "ControlCoef",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "GravityCoef",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "AdherenceCoef",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          { "name": "Upwardness", "readonly": true, "documentation": "" },
          { "name": "Distance", "readonly": true, "documentation": "" },
          { "name": "InputSteer", "readonly": true, "documentation": "" },
          { "name": "InputGasPedal", "readonly": true, "documentation": "" },
          { "name": "EngineRpm", "readonly": true, "documentation": "" },
          { "name": "EngineTurboRatio", "readonly": true, "documentation": "" },
          { "name": "SkiddingDistance", "readonly": true, "documentation": "" },
          { "name": "FlyingDistance", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "AllowWallJump", "readonly": false, "documentation": "" },
          {
            "name": "AllowProgressiveJump",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UseAlternateWeaponVisual",
            "readonly": false,
            "documentation": ""
          },
          { "name": "IsHighlighted", "readonly": false, "documentation": "" },
          { "name": "HasShield", "readonly": false, "documentation": "" },
          { "name": "IsInVehicle", "readonly": true, "documentation": "" },
          { "name": "IsStuck", "readonly": false, "documentation": "" },
          {
            "name": "IsEntityStateAvailable",
            "readonly": true,
            "documentation": ""
          },
          { "name": "IsUnderground", "readonly": true, "documentation": "" },
          { "name": "IsTouchingGround", "readonly": true, "documentation": "" },
          { "name": "IsInAir", "readonly": true, "documentation": "" },
          { "name": "IsInWater", "readonly": true, "documentation": "" },
          { "name": "IsInOffZone", "readonly": true, "documentation": "" },
          { "name": "IsOnTech", "readonly": true, "documentation": "" },
          { "name": "IsOnTechGround", "readonly": true, "documentation": "" },
          { "name": "IsOnTechLaser", "readonly": true, "documentation": "" },
          { "name": "IsOnTechArrow", "readonly": true, "documentation": "" },
          { "name": "IsOnTechNucleus", "readonly": true, "documentation": "" },
          { "name": "IsOnTechArmor", "readonly": true, "documentation": "" },
          { "name": "IsOnTechSafeZone", "readonly": true, "documentation": "" },
          { "name": "IsOnTechTeleport", "readonly": true, "documentation": "" },
          { "name": "IsOnTechNoWeapon", "readonly": true, "documentation": "" },
          {
            "name": "IsPowerJumpActivable",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "IsTeleportActivable",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "IsAttractorActivable",
            "readonly": true,
            "documentation": ""
          },
          { "name": "IsCapturing", "readonly": true, "documentation": "" },
          { "name": "IsFakePlayer", "readonly": true, "documentation": "" },
          { "name": "IsBot", "readonly": true, "documentation": "" },
          {
            "name": "UseCrudeExtrapolation",
            "readonly": false,
            "documentation": "Use a low-fi extrapolation to display the player. This extrapolation mode does not take interactions into account. Only use it when this player does not interact with other player (e.g. TM TimeAttack, SM Obstacle)."
          },
          { "name": "TrustClientSimu", "readonly": false, "documentation": "" },
          { "name": "InputIsBraking", "readonly": true, "documentation": "" }
        ],
        "Vec3": [
          { "name": "ForceColor", "readonly": false, "documentation": "" },
          { "name": "Dossard_Color", "readonly": false, "documentation": "" },
          { "name": "Position", "readonly": true, "documentation": "" },
          { "name": "AimDirection", "readonly": true, "documentation": "" },
          { "name": "UpDirection", "readonly": true, "documentation": "" },
          { "name": "LeftDirection", "readonly": true, "documentation": "" },
          { "name": "Velocity", "readonly": true, "documentation": "" }
        ],
        "Text": [
          {
            "name": "Dossard",
            "readonly": false,
            "documentation": "5 ascii chars (ex: '01TMN') or empty for default value"
          },
          { "name": "Dossard_Number", "readonly": false, "documentation": "" },
          { "name": "Dossard_Trigram", "readonly": false, "documentation": "" }
        ],
        "Ident": [
          { "name": "ForceModelId", "readonly": false, "documentation": "" }
        ],
        "CSmMapLandmark": [
          { "name": "CapturedLandmark", "readonly": true, "documentation": "" }
        ],
        "CSmObject[]": [
          { "name": "Objects", "readonly": true, "documentation": "" }
        ],
        "CModeVehicle": [
          { "name": "Vehicle", "readonly": true, "documentation": "" }
        ],
        "CSmPlayerDriver": [
          { "name": "Driver", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmModeEvent": {
      "inherit": "CBaseEvent",
      "enums": {
        "EType": [
          "Unknown",
          "OnShoot",
          "OnHit",
          "OnNearMiss",
          "OnArmorEmpty",
          "OnCapture",
          "OnShotDeny",
          "OnFallDamage",
          "OnCommand",
          "OnPlayerAdded",
          "OnPlayerRemoved",
          "OnPlayerRequestRespawn",
          "OnActionCustomEvent",
          "OnActionEvent",
          "OnPlayerTouchesObject",
          "OnPlayerThrowsObject",
          "OnPlayerTriggersSector",
          "OnPlayerTriggersWaypoint",
          "OnPlayerRequestActionChange",
          "OnVehicleArmorEmpty",
          "OnVehicleCollision",
          "OnVehicleVsVehicleCollision",
          "OnPlayerRequestItemInteraction"
        ],
        "EActionSlot": [
          "Slot_A",
          "Slot_B",
          "Slot_C",
          "Slot_D",
          "Slot_E",
          "Slot_F",
          "Slot_G",
          "Slot_H"
        ],
        "EActionInput": [
          "Weapon",
          "Secondary",
          "Movement",
          "QuickAccess1",
          "QuickAccess2",
          "QuickAccess3",
          "QuickAccess4",
          "QuickAccess5",
          "QuickAccess6",
          "QuickAccess7",
          "QuickAccess8",
          "QuickAccess9",
          "QuickAccess0",
          "Consumable1",
          "Consumable2",
          "None"
        ]
      },
      "props": {
        "CSmModeEvent::EType": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "CSmPlayer": [
          { "name": "Player", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "Damage", "readonly": false, "documentation": "" },
          { "name": "VictimShield", "readonly": true, "documentation": "" },
          { "name": "ShooterPoints", "readonly": false, "documentation": "" },
          { "name": "ShooterClan", "readonly": true, "documentation": "" },
          { "name": "UserData", "readonly": true, "documentation": "" },
          { "name": "WeaponNum", "readonly": true, "documentation": "" },
          { "name": "ShooterWeaponNum", "readonly": true, "documentation": "" },
          { "name": "VictimWeaponNum", "readonly": true, "documentation": "" },
          { "name": "WaypointTime", "readonly": true, "documentation": "" },
          { "name": "WaypointLapTime", "readonly": true, "documentation": "" },
          {
            "name": "CommandValueInteger",
            "readonly": true,
            "documentation": ""
          },
          { "name": "ActionChange", "readonly": true, "documentation": "" }
        ],
        "CEntity": [
          { "name": "VictimEntity", "readonly": true, "documentation": "" },
          { "name": "ShooterEntity", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "Height", "readonly": true, "documentation": "" },
          { "name": "MissDist", "readonly": true, "documentation": "" },
          { "name": "CommandValueReal", "readonly": true, "documentation": "" }
        ],
        "Vec3": [
          { "name": "ItemPosition", "readonly": true, "documentation": "" },
          {
            "name": "PlayerLastPosition",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "PlayerLastAimDirection",
            "readonly": true,
            "documentation": ""
          },
          { "name": "CommandValueVec3", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "ShooterUsedAction",
            "readonly": true,
            "documentation": ""
          },
          { "name": "VictimUsedAction", "readonly": true, "documentation": "" },
          { "name": "IsFinish", "readonly": true, "documentation": "" },
          { "name": "IsNewLap", "readonly": true, "documentation": "" },
          { "name": "PlayerWasSpawned", "readonly": true, "documentation": "" },
          {
            "name": "PlayerWasDisconnected",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "PlayerWasInLadderMatch",
            "readonly": true,
            "documentation": ""
          },
          { "name": "GiveUp", "readonly": true, "documentation": "" },
          { "name": "RegressRespawn", "readonly": true, "documentation": "" },
          {
            "name": "CommandValueBoolean",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CSmModeEvent::EActionSlot": [
          {
            "name": "ShooterActionSlot",
            "readonly": true,
            "documentation": ""
          },
          { "name": "VictimActionSlot", "readonly": true, "documentation": "" },
          { "name": "ActionSlot", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "ShooterActionId", "readonly": true, "documentation": "" },
          { "name": "VictimActionId", "readonly": true, "documentation": "" },
          { "name": "ActionId", "readonly": true, "documentation": "" },
          { "name": "Param1", "readonly": true, "documentation": "" },
          { "name": "CommandName", "readonly": true, "documentation": "" },
          { "name": "CommandValueText", "readonly": true, "documentation": "" }
        ],
        "CSmModeEvent::EActionInput": [
          { "name": "ActionInput", "readonly": true, "documentation": "" }
        ],
        "Text[]": [
          { "name": "Param2", "readonly": false, "documentation": "" }
        ],
        "CSmObject": [
          { "name": "Object", "readonly": true, "documentation": "" }
        ],
        "CSmMapLandmark": [
          { "name": "Landmark", "readonly": true, "documentation": "" }
        ],
        "CUser": [{ "name": "User", "readonly": true, "documentation": "" }],
        "Vec2": [
          { "name": "CommandValueVec2", "readonly": true, "documentation": "" }
        ],
        "Int2": [
          { "name": "CommandValueInt2", "readonly": true, "documentation": "" }
        ],
        "Int3": [
          { "name": "CommandValueInt3", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmMapBase": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Clan", "readonly": false, "documentation": "" },
          {
            "name": "NumberOfCollectors",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          { "name": "IsActive", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmMapLandmark": {
      "inherit": "CMapLandmark",
      "enums": {},
      "props": {
        "CSmMapBase": [
          { "name": "Base", "readonly": true, "documentation": "" }
        ],
        "CSmMapGate": [
          { "name": "Gate", "readonly": true, "documentation": "" }
        ],
        "CSmMapGauge": [
          { "name": "Gauge", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmScore": {
      "inherit": "CScore",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "TeamNum", "readonly": true, "documentation": "" },
          { "name": "Points", "readonly": false, "documentation": "" },
          { "name": "RoundPoints", "readonly": false, "documentation": "" },
          {
            "name": "NbRespawnsRequested",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NbEliminationsInflicted",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "NbEliminationsTaken",
            "readonly": true,
            "documentation": ""
          },
          { "name": "DamageInflicted", "readonly": true, "documentation": "" },
          { "name": "DamageTaken", "readonly": true, "documentation": "" }
        ],
        "Integer[]": [
          { "name": "BestRaceTimes", "readonly": false, "documentation": "" },
          { "name": "PrevRaceTimes", "readonly": false, "documentation": "" },
          { "name": "BestLapTimes", "readonly": false, "documentation": "" },
          { "name": "PrevLapTimes", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMapSpawn": {
      "inherit": "CNod",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CModeTurret": {
      "inherit": "CEntity",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Armor", "readonly": false, "documentation": "" },
          { "name": "ArmorMax", "readonly": false, "documentation": "" }
        ],
        "CPlayer": [{ "name": "Owner", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CModeVehicle": {
      "inherit": "CEntity",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Armor", "readonly": false, "documentation": "" },
          { "name": "ArmorMax", "readonly": false, "documentation": "" },
          { "name": "Clan", "readonly": false, "documentation": "" }
        ],
        "Vec3": [
          { "name": "Position", "readonly": true, "documentation": "" },
          { "name": "Left", "readonly": true, "documentation": "" },
          { "name": "Up", "readonly": true, "documentation": "" },
          { "name": "Dir", "readonly": true, "documentation": "" },
          { "name": "Velocity", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "Pitch", "readonly": true, "documentation": "" },
          { "name": "Roll", "readonly": true, "documentation": "" },
          { "name": "AccelCoef", "readonly": false, "documentation": "" },
          { "name": "AccelInput", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SetEngineActivated",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "IsActivated" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMapBotPath": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [{ "name": "Clan", "readonly": true, "documentation": "" }],
        "Vec3[]": [{ "name": "Path", "readonly": false, "documentation": "" }],
        "Boolean": [
          { "name": "IsFlying", "readonly": true, "documentation": "" }
        ],
        "Ident": [
          { "name": "BotModelId", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMapBotSpawn": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Boolean": [
          { "name": "IsFlying", "readonly": true, "documentation": "" }
        ],
        "Ident": [
          { "name": "BotModelId", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CEntity": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Ident": [
          {
            "name": "MarkerId",
            "readonly": true,
            "documentation": "Use this instead of Id when filling CUIConfig.MarkersXML"
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMapWaypoint": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Boolean": [
          { "name": "IsFinish", "readonly": true, "documentation": "" },
          { "name": "IsMultiLap", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmObject": {
      "inherit": "CEntity",
      "enums": { "EStatus": ["OnPlayer", "OnAnchor", "InWorld", "Unspawned"] },
      "props": {
        "CSmObject::EStatus": [
          { "name": "Status", "readonly": true, "documentation": "" }
        ],
        "Ident": [
          { "name": "ModelId", "readonly": true, "documentation": "" },
          {
            "name": "ThrowLatestPlayerId",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CSmPlayer": [
          {
            "name": "Player",
            "readonly": true,
            "documentation": "Player holding the object, or Null if the object isn't held by a player."
          }
        ],
        "CSmMapLandmark": [
          { "name": "AnchorLandmark", "readonly": true, "documentation": "" }
        ],
        "Vec3": [
          { "name": "Position", "readonly": true, "documentation": "" },
          { "name": "Vel", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "MachineState", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "Throwable", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SetAnchor",
          "returns": "Void",
          "params": [
            { "identifier": "CMapObjectAnchor", "argument": "ObjectAnchor" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPlayer",
          "returns": "Void",
          "params": [{ "identifier": "CSmPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "SetPosition",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Position" }],
          "documentation": ""
        },
        {
          "name": "SetPositionAndVel",
          "returns": "Void",
          "params": [
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Vec3", "argument": "Vel" }
          ],
          "documentation": ""
        },
        {
          "name": "SetUnspawned",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CGhostManager": {
      "inherit": "CNod",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "Ghost_Add",
          "returns": "Ident",
          "params": [{ "identifier": "CGhost", "argument": "Ghost" }],
          "documentation": ""
        },
        {
          "name": "Ghost_Add",
          "returns": "Ident",
          "params": [
            { "identifier": "CGhost", "argument": "Ghost" },
            { "identifier": "Boolean", "argument": "IsGhostLayer" }
          ],
          "documentation": ""
        },
        {
          "name": "Ghost_Add",
          "returns": "Ident",
          "params": [
            { "identifier": "CGhost", "argument": "Ghost" },
            { "identifier": "Boolean", "argument": "IsGhostLayer" },
            { "identifier": "Integer", "argument": "TimeOffset" }
          ],
          "documentation": ""
        },
        {
          "name": "Ghost_AddWaypointSynced",
          "returns": "Ident",
          "params": [
            { "identifier": "CGhost", "argument": "Ghost" },
            { "identifier": "Boolean", "argument": "IsGhostLayer" }
          ],
          "documentation": ""
        },
        {
          "name": "Ghost_IsReplayOver",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "GhostInstanceId" }],
          "documentation": ""
        },
        {
          "name": "Ghost_IsVisible",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "GhostInstanceId" }],
          "documentation": ""
        },
        {
          "name": "Ghost_Remove",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "GhostInstanceId" }],
          "documentation": ""
        },
        {
          "name": "Ghost_RemoveAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Ghost_SetDossard",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "GhostInstanceId" },
            { "identifier": "Text", "argument": "Dossard" }
          ],
          "documentation": "5 ascii chars (ex: '01TMN') or empty for default value"
        },
        {
          "name": "Ghost_SetDossard",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "GhostInstanceId" },
            { "identifier": "Text", "argument": "Dossard" },
            { "identifier": "Vec3", "argument": "Color" }
          ],
          "documentation": "5 ascii chars (ex: '01TMN') or empty for default value + color"
        }
      ],
      "documentation": ""
    },
    "CMapType": {
      "inherit": "CMapEditorPlugin",
      "enums": {
        "ValidationStatus": ["NotValidable", "Validable", "Validated"]
      },
      "props": {
        "Boolean": [
          {
            "name": "CustomEditAnchorData",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ValidationEndRequested",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ValidationEndNoConfirm",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "IsSwitchedToPlayground",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMapType::ValidationStatus": [
          { "name": "ValidationStatus", "readonly": false, "documentation": "" }
        ],
        "Text": [
          {
            "name": "ValidabilityRequirementsMessage",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUIConfigMgr": [
          { "name": "UIManager", "readonly": true, "documentation": "" }
        ],
        "CUser[]": [{ "name": "Users", "readonly": true, "documentation": "" }]
      },
      "methods": [
        {
          "name": "ClearMapMetadata",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RequestEnterPlayground",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RequestLeavePlayground",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CAction": {
      "inherit": "CNod",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CSmActionEvent": {
      "inherit": "CBaseConstEvent",
      "enums": {
        "EType": [
          "OnHitPlayer",
          "OnProjectileEnd",
          "OnProjectileDestroyed",
          "OnHitObject",
          "OnHitShield",
          "OnHitVehicle",
          "OnShieldEnd",
          "OnHitTurret",
          "OnInputChange",
          "OnFocusedScroll"
        ],
        "EInputChange": [
          "IsActive",
          "Focused_Main",
          "Focused_Secondary",
          "Focused_QuickAccess1",
          "Focused_QuickAccess2",
          "Focused_QuickAccess3",
          "Focused_QuickAccess4",
          "Focused_QuickAccess5",
          "Focused_QuickAccess6",
          "Focused_QuickAccess7",
          "Focused_QuickAccess8",
          "Focused_QuickAccess9",
          "Focused_QuickAccess0",
          "Focused_Consumable1",
          "Focused_Consumable2"
        ]
      },
      "props": {
        "CSmActionEvent::EType": [
          { "name": "Type", "readonly": true, "documentation": "Type." }
        ],
        "Ident": [
          { "name": "ProjectileModelId", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "ProjectileStartDate",
            "readonly": true,
            "documentation": ""
          },
          { "name": "Damage", "readonly": true, "documentation": "" },
          { "name": "ContextId", "readonly": true, "documentation": "" },
          { "name": "Shield", "readonly": true, "documentation": "" },
          { "name": "ScrollDelta", "readonly": true, "documentation": "" }
        ],
        "Vec3": [
          { "name": "Position", "readonly": true, "documentation": "" },
          { "name": "Direction", "readonly": true, "documentation": "" },
          { "name": "Normal", "readonly": true, "documentation": "" }
        ],
        "CEntity": [
          { "name": "Victim", "readonly": true, "documentation": "" }
        ],
        "CSmActionEvent::EInputChange": [
          { "name": "Input", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlScriptIngame": {
      "inherit": "CMlScript",
      "enums": {
        "EInGameMenuResult": [
          "Resume",
          "Quit",
          "NormalMenu",
          "AdvancedMenu",
          "ServerSettings"
        ],
        "EUISound": [
          "Default",
          "Silence",
          "StartMatch",
          "EndMatch",
          "StartRound",
          "EndRound",
          "PhaseChange",
          "TieBreakPoint",
          "TiePoint",
          "VictoryPoint",
          "Capture",
          "TimeOut",
          "Notice",
          "Warning",
          "PlayerEliminated",
          "PlayerHit",
          "Checkpoint",
          "Finish",
          "Record",
          "ScoreProgress",
          "RankChange",
          "Bonus",
          "FirstHit",
          "Combo",
          "PlayersRemaining",
          "Custom1",
          "Custom2",
          "Custom3",
          "Custom4"
        ]
      },
      "props": {
        "Integer": [
          { "name": "GameTime", "readonly": false, "documentation": "" },
          { "name": "SplitScreenNum", "readonly": false, "documentation": "" },
          { "name": "SplitScreenCount", "readonly": false, "documentation": "" }
        ],
        "CPlaygroundClient": [
          { "name": "Playground", "readonly": true, "documentation": "" }
        ],
        "const": [
          {
            "name": "UI",
            "readonly": true,
            "documentation": "(read-only) UI actually displayed, as defined by the server."
          }
        ],
        "CUIConfig": [
          {
            "name": "ClientUI",
            "readonly": true,
            "documentation": "Locally accessible by the client script to locally override settings from the server."
          }
        ],
        "Boolean": [
          {
            "name": "IsSpectator",
            "readonly": false,
            "documentation": "Is in spectator mode - may be only for a short time between rounds."
          },
          {
            "name": "IsSpectatorClient",
            "readonly": false,
            "documentation": "Client actually desires to spectate instead of playing."
          },
          { "name": "UseClans", "readonly": false, "documentation": "" },
          { "name": "UseForcedClans", "readonly": false, "documentation": "" },
          {
            "name": "IsInGameMenuDisplayed",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "SplitScreenIsHorizontal",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CManiaAppPlaygroundCommon": [
          {
            "name": "ParentApp",
            "readonly": true,
            "documentation": "Will be Null if the script is not runing in a layer of an app."
          }
        ],
        "CMap": [{ "name": "Map", "readonly": true, "documentation": "" }],
        "Text": [
          {
            "name": "CurrentServerLogin",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CurrentServerName",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CurrentServerDesc",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CurrentServerJoinLink",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CurrentServerModeName",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "ShowCurChallengeCard",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ShowModeHelp",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CopyServerLinkToClipBoard",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "JoinTeam1",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "JoinTeam2",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RequestSpectatorClient",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Spectator" }],
          "documentation": "Request change of IsSpectatorClient (not immediate, and it may be refused)."
        },
        {
          "name": "SetSpectateTarget",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Player" }],
          "documentation": "Set the spectated player, but do not switch to spectator mode automatically. Equivalent to numpad1/2/3/4"
        },
        {
          "name": "ShowProfile",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "ShowInGameMenu",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CloseInGameMenu",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMlScriptIngame::EInGameMenuResult",
              "argument": "Result"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CloseScoresTable",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "PlayUiSound",
          "returns": "Void",
          "params": [
            { "identifier": "CMlScriptIngame::EUISound", "argument": "Sound" },
            { "identifier": "Integer", "argument": "SoundVariant" },
            { "identifier": "Real", "argument": "Volume" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlScriptIngame_ReadOnly": {
      "inherit": "CMlScript_ReadOnly",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "GameTime", "readonly": false, "documentation": "" },
          { "name": "SplitScreenNum", "readonly": false, "documentation": "" },
          { "name": "SplitScreenCount", "readonly": false, "documentation": "" }
        ],
        "const": [
          {
            "name": "Playground",
            "readonly": true,
            "documentation": "Read-only"
          },
          { "name": "Map", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "IsSpectator",
            "readonly": false,
            "documentation": "Is in spectator mode - may be only for a short time between rounds."
          },
          {
            "name": "IsSpectatorClient",
            "readonly": false,
            "documentation": "Client actually desires to spectate instead of playing."
          },
          { "name": "UseClans", "readonly": false, "documentation": "" },
          { "name": "UseForcedClans", "readonly": false, "documentation": "" },
          {
            "name": "IsInGameMenuDisplayed",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "SplitScreenIsHorizontal",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Text": [
          {
            "name": "CurrentServerLogin",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CurrentServerName",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CurrentServerDesc",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CurrentServerJoinLink",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CurrentServerModeName",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CGameUserVoiceChat": {
      "inherit": "CNod",
      "enums": { "EMuteSetting": ["Muted", "NotMuted"] },
      "props": {
        "CGameUserVoiceChat::EMuteSetting": [
          { "name": "MuteSetting", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsLocal", "readonly": true, "documentation": "" },
          { "name": "IsMuted", "readonly": true, "documentation": "" },
          {
            "name": "MuteChangePending",
            "readonly": true,
            "documentation": ""
          },
          { "name": "IsSpeaking", "readonly": true, "documentation": "" },
          { "name": "IsConnected", "readonly": true, "documentation": "" },
          { "name": "Supported", "readonly": true, "documentation": "" }
        ],
        "CUser": [
          {
            "name": "MatchingPlayerInfo",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CAudioSettings": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "DirtyCounter", "readonly": false, "documentation": "" },
          {
            "name": "VoiceChat_Devices_DirtyCounter",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text[]": [
          { "name": "Devices", "readonly": false, "documentation": "" },
          {
            "name": "VoiceChat_Devices_In",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Devices_Out",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Text": [
          { "name": "Device_Current", "readonly": false, "documentation": "" },
          {
            "name": "Device_NextApply",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Device_In_Current",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Device_Out_Current",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Device_In_NextApply",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Device_Out_NextApply",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Real": [
          {
            "name": "VoiceChat_SpeakerVolume",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "VoiceChat_VoiceDetection_Sensitivity",
            "readonly": false,
            "documentation": "VoiceChat_VoiceDetection_Sensitivity is a value between 0 and 1."
          }
        ],
        "NSystemConfig::EVoiceDetectionMode": [
          {
            "name": "VoiceChat_VoiceDetection_Mode",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CModuleMenuComponent": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CUILayer": [
          { "name": "ComponentLayer", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Hide",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        { "name": "Show", "returns": "Void", "params": [], "documentation": "" }
      ],
      "documentation": ""
    },
    "CModulePlayground": {
      "inherit": "CNod",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "Hide",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Hide",
          "returns": "Void",
          "params": [{ "identifier": "CUIConfig", "argument": "UIConfig" }],
          "documentation": ""
        },
        {
          "name": "Show",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Show",
          "returns": "Void",
          "params": [{ "identifier": "CUIConfig", "argument": "UIConfig" }],
          "documentation": ""
        },
        {
          "name": "IsVisible",
          "returns": "Boolean",
          "params": [{ "identifier": "CUIConfig", "argument": "UIConfig" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModuleMenuPage": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "Name", "readonly": true, "documentation": "" }],
        "CModuleMenuComponent[]": [
          { "name": "Components", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CEditorModule": {
      "inherit": "CEditorBase",
      "enums": {
        "EModuleType": [
          "Undefined",
          "Hud",
          "Inventory",
          "Store",
          "ScoresTable",
          "Equipment",
          "MenuBase",
          "MenuPage",
          "Chrono",
          "SpeedMeter",
          "PlayerState",
          "TeamState"
        ]
      },
      "props": {
        "CModuleMenuModel": [
          { "name": "EditedMenu", "readonly": true, "documentation": "" }
        ],
        "CModuleMenuPageModel": [
          { "name": "EditedMenuPage", "readonly": true, "documentation": "" }
        ],
        "CModulePlaygroundHudModel": [
          {
            "name": "EditedPlaygroundHud",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          {
            "name": "FileBrowser_IsRunning",
            "readonly": true,
            "documentation": ""
          },
          { "name": "IsPreviewMode", "readonly": false, "documentation": "" }
        ],
        "Text": [
          {
            "name": "FileBrowser_FilePath",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CEditorPluginModuleEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "NewModule",
          "returns": "Void",
          "params": [
            {
              "identifier": "CEditorModule::EModuleType",
              "argument": "ModuleType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "OpenModule",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Path" }],
          "documentation": ""
        },
        {
          "name": "Save",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SaveAs",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Path" }],
          "documentation": ""
        },
        {
          "name": "SaveCopyAs",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Path" }],
          "documentation": ""
        },
        {
          "name": "ForceExit",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetPreviewBackground",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Url" }],
          "documentation": ""
        },
        {
          "name": "ReloadPreview",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "EditedPlaygroundHud_SetPreviewContext",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "ContextId" }],
          "documentation": ""
        },
        {
          "name": "FileBrowser_Open",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "FileBrowser_Save",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CEditorMesh": {
      "inherit": "CEditorAsset",
      "enums": {
        "EEdgesDisplay": ["Any", "Borders", "None"],
        "EEdgesConstraint": ["Any", "Adjacent", "Closed"],
        "EElemType": ["Vertex", "Edge", "Face", "EVoxel", "Any"],
        "EInteraction": [
          "Creation",
          "Pick",
          "PickJoint",
          "VoxelPickDrag_Base",
          "VoxelPickDrag_Creation",
          "VoxelPickDrag_Delete",
          "VoxelPickDrag_Select",
          "VoxelPickDrag_Pick",
          "VoxelPickDrag_SelectTranslation",
          "VoxelPickDrag_SelectRotation",
          "VoxelPickDrag_Paste",
          "Selection",
          "Translation",
          "PickTranslation",
          "ExtrudeTranslation",
          "Rotation",
          "PickRotation",
          "Scale",
          "Curve2D",
          "Merge",
          "Split",
          "Mirror",
          "Paste",
          "PasteMaterial",
          "BlocTransformation",
          "None"
        ],
        "ETexCoordLayer": ["Lightmap"],
        "EMaterialFilterCriterion": [
          "IsAutomatic",
          "IsBadForHorizontalFaces",
          "IsBadForVerticalFaces"
        ],
        "EFilterKind": ["NoFilter", "PassIfMatches", "CutIfMatches"],
        "EUVEditorMode": ["UV", "Atlas_ApplyOnClic", "Atlas_SelectOnClic"],
        "EUVEditorProjectionType": [
          "Planar",
          "Curve2D",
          "Cylindrical2D",
          "Cubic",
          "Polyedric",
          "Cylindrical",
          "ApplyOnlyMaterial"
        ],
        "ELayerType": [
          "AddGeometry",
          "SubdivideSmooth",
          "Translation",
          "Rotation",
          "Scale",
          "Mirror",
          "MoveToGround",
          "Extrude",
          "Subdivide",
          "Chaos",
          "Smooth",
          "BorderTransition",
          "BlocTransfo",
          "Voxels",
          "TriggerShape",
          "RespawnPos",
          "Sector",
          "Light",
          "LightModel",
          "WaterShape",
          "None"
        ],
        "ETitleCoreType": ["TrackMania", "ShootMania"]
      },
      "props": {
        "Boolean": [
          {
            "name": "GoToMaterialEditor",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "IsCreateMaterial",
            "readonly": false,
            "documentation": ""
          },
          { "name": "IsEditingLayer", "readonly": false, "documentation": "" },
          { "name": "LayerIndep", "readonly": false, "documentation": "" },
          { "name": "LayerIndexAxisX", "readonly": false, "documentation": "" },
          { "name": "LayerIndexAxisY", "readonly": false, "documentation": "" },
          { "name": "LayerIndexAxisZ", "readonly": false, "documentation": "" },
          { "name": "Layer_IsVisible", "readonly": false, "documentation": "" },
          {
            "name": "Layer_IsCollidable",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LayerGeneratable",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AddTransitionInProgress",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Tmp_UseParts", "readonly": true, "documentation": "" },
          { "name": "IsDebug", "readonly": true, "documentation": "" },
          {
            "name": "CameraEatingInputsScript",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "EditionBox_IsPlaneOriented",
            "readonly": true,
            "documentation": ""
          },
          { "name": "DisplayVertices", "readonly": false, "documentation": "" },
          { "name": "DisplayFaces", "readonly": false, "documentation": "" },
          { "name": "DisplayJoints", "readonly": false, "documentation": "" },
          {
            "name": "GridSnap_IsActive",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "IsUsingPhysicMatLib",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Display_HideElemsByDistance_IsActive",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "VoxelSpaceIsInteractive",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "MustClearLastSaveBuffer",
            "readonly": false,
            "documentation": ""
          },
          { "name": "IsExperimental", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "SubdivideSmooth_NbSteps",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NewTransitionPosition",
            "readonly": false,
            "documentation": ""
          },
          { "name": "RotateAxis", "readonly": false, "documentation": "" },
          { "name": "VertexCount", "readonly": true, "documentation": "" },
          { "name": "EdgeCount", "readonly": true, "documentation": "" },
          { "name": "FaceCount", "readonly": true, "documentation": "" },
          { "name": "RotationStep", "readonly": true, "documentation": "" },
          {
            "name": "MaterialGameplayIdNumber",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MaterialsUpdateId",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Material_Atlas_SelectedSubTexIndex",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CreationElemsCount",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Display_HideElemsByDistance_Distance",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "PrefabNamesUpdateId",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "PrefabListCurrentPage",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Prefab_TotalNb", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "LayerValueAxisX", "readonly": false, "documentation": "" },
          { "name": "LayerValueAxisY", "readonly": false, "documentation": "" },
          { "name": "LayerValueAxisZ", "readonly": false, "documentation": "" },
          {
            "name": "LayerValueParam1",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LayerValueParam2",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LayerValueParam3",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LayerValueParam4",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "NewTransitionSize",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Scale", "readonly": true, "documentation": "" },
          { "name": "Step", "readonly": true, "documentation": "" },
          { "name": "Size", "readonly": true, "documentation": "" },
          { "name": "RotationValue", "readonly": true, "documentation": "" },
          { "name": "ScalingStep", "readonly": true, "documentation": "" },
          { "name": "ScalingRatio", "readonly": true, "documentation": "" },
          {
            "name": "Display_HideElemsByDistance_Opacity",
            "readonly": false,
            "documentation": ""
          },
          { "name": "VoxelSpaceStep", "readonly": false, "documentation": "" }
        ],
        "Text": [
          { "name": "LayerName", "readonly": false, "documentation": "" },
          {
            "name": "NewTransitionName",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CEditorMesh::EEdgesDisplay": [
          { "name": "DisplayEdges", "readonly": false, "documentation": "" }
        ],
        "Ident[]": [
          { "name": "MaterialIds", "readonly": false, "documentation": "" },
          {
            "name": "MaterialPhysicsIds",
            "readonly": false,
            "documentation": ""
          },
          { "name": "MaterialDynaIds", "readonly": false, "documentation": "" }
        ],
        "Text[]": [
          { "name": "MaterialNames", "readonly": false, "documentation": "" },
          {
            "name": "MaterialPhysicsNames",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "MaterialDynaNames",
            "readonly": false,
            "documentation": ""
          },
          { "name": "PrefabNames", "readonly": false, "documentation": "" }
        ],
        "Integer[]": [
          {
            "name": "MaterialPhysics_GameplayRemap",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Vec3[]": [
          {
            "name": "MaterialLastUsedColors",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "MaterialBaseColors",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Vec3": [
          {
            "name": "CurrentColorForSpecialMaterials",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "VoxelSpaceCenter",
            "readonly": false,
            "documentation": ""
          },
          { "name": "VoxelSpaceAngle", "readonly": false, "documentation": "" }
        ],
        "CEditorMesh::EInteraction": [
          {
            "name": "CurrentInteraction",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Ident": [
          { "name": "SelectionSet", "readonly": true, "documentation": "" }
        ],
        "CEditorEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Layers_GetCount",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Layers_GetLayerIdFromIndex",
          "returns": "Ident",
          "params": [{ "identifier": "Integer", "argument": "LayerIndex" }],
          "documentation": ""
        },
        {
          "name": "Layers_GetLayerNameFromIndex",
          "returns": "Text",
          "params": [{ "identifier": "Integer", "argument": "LayerIndex" }],
          "documentation": ""
        },
        {
          "name": "Layers_GetLayerTypeFromIndex",
          "returns": "CEditorMesh::ELayerType",
          "params": [{ "identifier": "Integer", "argument": "LayerIndex" }],
          "documentation": ""
        },
        {
          "name": "Layers_GetLayerGeneratableFromIndex",
          "returns": "Boolean",
          "params": [{ "identifier": "Integer", "argument": "LayerIndex" }],
          "documentation": ""
        },
        {
          "name": "Layers_SetLayerGeneratableFromIndex",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "LayerIndex" },
            { "identifier": "Boolean", "argument": "LayerGeneratability" }
          ],
          "documentation": ""
        },
        {
          "name": "Layers_AddLayer",
          "returns": "Void",
          "params": [
            { "identifier": "CEditorMesh::ELayerType", "argument": "LayerType" }
          ],
          "documentation": ""
        },
        {
          "name": "Layers_GetLayerIdSelected",
          "returns": "Ident",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Layers_SetLayerIdSelected",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "LayerId" }],
          "documentation": ""
        },
        {
          "name": "Layers_GetLayerSelectedType",
          "returns": "CEditorMesh::ELayerType",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Layers_GetLayerSelectedIndex",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Layers_GetEditedLayerType",
          "returns": "CEditorMesh::ELayerType",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Layers_GetLayerSelectedName",
          "returns": "Text",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Layers_EditMask",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "LayerIndex" }],
          "documentation": ""
        },
        {
          "name": "Layers_EditMaskValidate",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "LayerIndex" }],
          "documentation": ""
        },
        {
          "name": "Layers_MoveSelectedLayerUp",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Layers_MoveSelectedLayerDown",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Layers_EditSelectedLayer",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "RegenerateSolid" }
          ],
          "documentation": ""
        },
        {
          "name": "Layers_CloseEditSelectedLayer",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Layers_DeleteSelectedLayer",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Transitions_GetCount",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Transitions_AddTransition",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "TransitionName" },
            { "identifier": "Integer", "argument": "TransitionPosition" },
            { "identifier": "Real", "argument": "TransitionSize" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_DeleteCurrentTransition",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Transitions_GetTransitionSelectedIndex",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Transitions_SetTransitionSelectedIndex",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "TransitionIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_GetTransitionCurrentPage",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Transitions_SetTransitionCurrentPage",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "TransitionCurrentPage" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_GetTransitionNameFromIndex",
          "returns": "Text",
          "params": [
            { "identifier": "Integer", "argument": "TransitionIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_SetTransitionNameFromIndex",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "TransitionIndex" },
            { "identifier": "Real", "argument": "TransitionName" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_GetTransitionVisibilityFromIndex",
          "returns": "Boolean",
          "params": [
            { "identifier": "Integer", "argument": "TransitionIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_SetTransitionVisibilityFromIndex",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "TransitionIndex" },
            { "identifier": "Boolean", "argument": "TransitionVisibility" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_GetTransitionSizeFromIndex",
          "returns": "Real",
          "params": [
            { "identifier": "Integer", "argument": "TransitionIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_SetTransitionSizeFromIndex",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "TransitionIndex" },
            { "identifier": "Real", "argument": "TransitionSize" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_GetTransitionPositionFromIndex",
          "returns": "Integer",
          "params": [
            { "identifier": "Integer", "argument": "TransitionIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "Transitions_SetTransitionPositionFromIndex",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "TransitionIndex" },
            { "identifier": "Integer", "argument": "TransitionPosition" }
          ],
          "documentation": ""
        },
        {
          "name": "EditionBox_SetStep",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Step" }],
          "documentation": ""
        },
        {
          "name": "EditedMesh_Clear",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "EditedMesh_Simplify",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "EditedMesh_SimplifySelection",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "EditedMesh_Lod",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "FacesRatio" }],
          "documentation": ""
        },
        {
          "name": "UVUnwrap",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            {
              "identifier": "CEditorMesh::ETexCoordLayer",
              "argument": "ETexCoordLayer"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Undo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Redo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SwitchPlane",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GridSnap_SetActive",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "IsActive" }],
          "documentation": ""
        },
        {
          "name": "PickInfo_GetNormal",
          "returns": "Vec3",
          "params": [],
          "documentation": ""
        },
        {
          "name": "PickInfo_GetPosition",
          "returns": "Vec3",
          "params": [],
          "documentation": ""
        },
        {
          "name": "PickInfo_GetAnchorId",
          "returns": "Ident",
          "params": [],
          "documentation": ""
        },
        {
          "name": "PickInfo_GetEdgeLength",
          "returns": "Real",
          "params": [],
          "documentation": ""
        },
        {
          "name": "PickInfo_GetNextVertexPosition",
          "returns": "Vec3",
          "params": [],
          "documentation": ""
        },
        {
          "name": "PickInfo_GetMaterial",
          "returns": "Ident",
          "params": [],
          "documentation": ""
        },
        {
          "name": "PickInfo_GetError",
          "returns": "Text",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Part_SetAnchorPos",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Position" }],
          "documentation": ""
        },
        {
          "name": "Part_SetIsJoint",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "IsJoint" }],
          "documentation": ""
        },
        {
          "name": "Part_ClearAnchor",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Joint_Add",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Position" }],
          "documentation": ""
        },
        {
          "name": "Joint_Link",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "IdChild" },
            { "identifier": "Ident", "argument": "IdParent" }
          ],
          "documentation": ""
        },
        {
          "name": "Anchor_Remove",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "Id" }],
          "documentation": ""
        },
        {
          "name": "Material_GetMaterialIdSelected",
          "returns": "Ident",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Material_SetMaterialIdSelected",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "MaterialEditorId" }],
          "documentation": ""
        },
        {
          "name": "MaterialDyna_GetMaterialIdSelected",
          "returns": "Ident",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MaterialDyna_SetMaterialIdSelected",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "DynaMaterialType" }],
          "documentation": ""
        },
        {
          "name": "Material_GetSubTexIndexSelected",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Material_MaterialLibGetCount",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Material_SetDefault",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "MaterialId" }],
          "documentation": ""
        },
        {
          "name": "Material_GetDefault",
          "returns": "Ident",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MaterialPhysic_GetDefault",
          "returns": "Ident",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MaterialPhysic_GetIndex",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MaterialPhysic_GetGameplayId",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "MaterialId" }],
          "documentation": ""
        },
        {
          "name": "MaterialPhysic_GetNextBitmap",
          "returns": "CImage",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MaterialDyna_GetDefault",
          "returns": "Ident",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MaterialDyna_SetDefault",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "MaterialId" }],
          "documentation": ""
        },
        {
          "name": "Material_GetBitmapBase",
          "returns": "CImage",
          "params": [{ "identifier": "Ident", "argument": "MaterialId" }],
          "documentation": ""
        },
        {
          "name": "Material_GetBitmap",
          "returns": "CImage",
          "params": [{ "identifier": "Ident", "argument": "MaterialId" }],
          "documentation": ""
        },
        {
          "name": "MaterialDyna_GetBitmap",
          "returns": "CImage",
          "params": [{ "identifier": "Ident", "argument": "MaterialId" }],
          "documentation": ""
        },
        {
          "name": "Material_IsSpecialColored",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "MaterialId" }],
          "documentation": ""
        },
        {
          "name": "Material_MatchesCriterion",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "MaterialId" },
            {
              "identifier": "CEditorMesh::EMaterialFilterCriterion",
              "argument": "ResultSetHandle"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Material_SetFilter",
          "returns": "Void",
          "params": [
            {
              "identifier": "CEditorMesh::EMaterialFilterCriterion",
              "argument": "Criterion"
            },
            {
              "identifier": "CEditorMesh::EFilterKind",
              "argument": "FilterKind"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Material_GetFilter",
          "returns": "CEditorMesh::EFilterKind",
          "params": [
            {
              "identifier": "CEditorMesh::EMaterialFilterCriterion",
              "argument": "Criterion"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Material_ClearFilters",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_SetIsRotation",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "IsRotation" }],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_SetIsScale",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "IsScale" }],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_SetIsScale1D",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "IsScale" }],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_Open",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "MaterialId" },
            { "identifier": "CMlQuad", "argument": "LocationQuad" }
          ],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_Close",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_IsRunning",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_SetMode",
          "returns": "Void",
          "params": [
            { "identifier": "CEditorMesh::EUVEditorMode", "argument": "Mode" }
          ],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_GetMode",
          "returns": "CEditorMesh::EUVEditorMode",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_SetProjectionType",
          "returns": "Void",
          "params": [
            {
              "identifier": "CEditorMesh::EUVEditorProjectionType",
              "argument": "ProjectionType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Material_IsGameMaterial",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Material_IsCustomLinkFull",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "MaterialId" }],
          "documentation": ""
        },
        {
          "name": "Material_UVEditor_Apply",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Material_CopyMaterial",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "Material_PasteMaterial",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "Interaction_Close",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_SetPreview",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetToPreview" }],
          "documentation": ""
        },
        {
          "name": "Interaction_StartCreation",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "CreationSetHandle" },
            { "identifier": "CEditorMesh::EElemType", "argument": "ElemType" },
            { "identifier": "Ident", "argument": "SetToPickFromHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_Creation_GetElems",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "ResultSetHandle" }],
          "documentation": ""
        },
        {
          "name": "Interaction_Creation_ClearParams",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_Creation_SetEdgesConstraint",
          "returns": "Void",
          "params": [
            {
              "identifier": "CEditorMesh::EEdgesConstraint",
              "argument": "EdgesConstraint"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_Creation_SetAutoMerge",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "AutoMerge" }],
          "documentation": ""
        },
        {
          "name": "Interaction_StartPaste",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartBlocTransformation",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "TransformationSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_StartCurve2D",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "BordersSetHandle" }],
          "documentation": ""
        },
        {
          "name": "Interaction_CloseCurve2D",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "CanDoCurve2D" }],
          "documentation": ""
        },
        {
          "name": "Interaction_StartPick",
          "returns": "Boolean",
          "params": [
            { "identifier": "CEditorMesh::EElemType", "argument": "ElemType" },
            { "identifier": "Ident", "argument": "SetToPickFrom" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_StartPickJoint",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartVoxelPickDrag_Base",
          "returns": "Boolean",
          "params": [
            { "identifier": "CEditorMesh::EElemType", "argument": "ElemType" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_StartVoxelPickDrag_Creation",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartVoxelPickDrag_Delete",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartVoxelPickDrag_Select",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "SelectionSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_CloseVoxelPickDrag_Select",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartVoxelPickDrag_Pick",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_CloseVoxelPickDrag_Pick",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartVoxelPickDrag_SelectTranslation",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartVoxelPickDrag_SelectRotation",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartVoxelPickDrag_Paste",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CutVoxels",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CopyVoxels",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartMerge",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "MergeSetHandle" }],
          "documentation": ""
        },
        {
          "name": "Interaction_StartMirror",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "Interaction_Selection_ClearParams",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_Selection_SetUseParts",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "UseParts" }],
          "documentation": ""
        },
        {
          "name": "Interaction_Selection_SetCanEnterLeaf",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "CanEnterLeaf" }],
          "documentation": ""
        },
        {
          "name": "Interaction_StartSelection",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "SelectionSetHandle" },
            { "identifier": "CEditorMesh::EElemType", "argument": "ElemType" },
            { "identifier": "Ident", "argument": "SelectionSetToPickFrom" },
            { "identifier": "Boolean", "argument": "IsFromALayer" },
            { "identifier": "Boolean", "argument": "AllowDoubleClick" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_CloseSelection",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Interaction_StartTranslation",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "TranslationSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_StartPickTranslation",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "TranslationSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_StartRotation",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "RotationSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_StartPickRotation",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "RotationSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "Interaction_Rotation_SetStep",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "RotationStep" }],
          "documentation": ""
        },
        {
          "name": "Interaction_StartPickScale",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "ScalingSetHandle" }],
          "documentation": ""
        },
        {
          "name": "Interaction_Scale_SetStep",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "ScalingStep" }],
          "documentation": ""
        },
        {
          "name": "Interaction_StartSplit",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Display_HighlightSet",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "Display_ClearHighlighting",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Display_HideElemsByDistance_Start",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "Display_HideElemsByDistance_Stop",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Display_HideMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Display_ShowMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MergeAllSuperposedElements",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "Selection_Undo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Selection_Redo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Selection_Invert",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Selection_SelectAllByMaterial",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetOfElements_Create",
          "returns": "Ident",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetOfElements_CopyFrom",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "DestinationSet" },
            { "identifier": "Ident", "argument": "SourceSet" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfElements_Append",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "DestinationSet" },
            { "identifier": "Ident", "argument": "SourceSet" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfElements_Destroy",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_Empty",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_SetAllElements",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_SetAllFaces",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_DeleteElements",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_DeleteElements",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            { "identifier": "Boolean", "argument": "Spread" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfElements_HasHorizontalFaces",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_HasVerticalFaces",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_GetElemsCount",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_GetVerticesCount",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_GetEdgesCount",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_GetFacesCount",
          "returns": "Integer",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "ExtendSelectedSet",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "GetBordersSet",
          "returns": "Boolean",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            { "identifier": "Ident", "argument": "SetBordersHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "GetBordersVertexs",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            { "identifier": "Ident", "argument": "SetVertexHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SelectionSet_SelectAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Curve2DPolygon",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "FourVertexSetHandle" },
            { "identifier": "Ident", "argument": "Sethandle" },
            { "identifier": "Integer", "argument": "SubTexIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "Preview_Clear",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "VoxelSpace_SetVec3",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Pos" }],
          "documentation": ""
        },
        {
          "name": "VoxelSpace_GetVoxelsCount",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "VoxelSpace_SelectAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "VoxelSpace_DeleteOneVoxel",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "VoxelSpace_DeleteSelection",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "VoxelSpace_ApplyMaterialToVoxel",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "VoxelSpace_GenerateMesh",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetOfElements_ProjectOnPlane",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_ProjectOnGround",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            { "identifier": "Real", "argument": "Height" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfElements_SplitEdgeWithVertex",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_CollapseEdgeWithVertex",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_Subdivide",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfElements_Subdivide_Interpolation",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawCircle",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "InputSetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawDisc",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "InputSetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawCircle",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "CenterSetHandle" },
            { "identifier": "Vec3", "argument": "PointOnCircle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawIcosahedron",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "InputSetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawIcosahedron",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "CenterSetHandle" },
            { "identifier": "Vec3", "argument": "PointOnCircle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawIcosahedricSphere",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "InputSetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawPoly",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "InputSetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" },
            { "identifier": "Integer", "argument": "VerticesCount" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawPoly",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "CenterSetHandle" },
            { "identifier": "Vec3", "argument": "PointOnPoly" },
            { "identifier": "Ident", "argument": "ResultSetHandle" },
            { "identifier": "Integer", "argument": "VerticesCount" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawSpline",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ControlSetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_Weld",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "VerticesSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfVertices_DrawBox",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "ControlSetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfEdges_Fill",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfEdges_Flip",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfEdges_BorderExpand",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfOneEdge_FaceLoopExpand",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfOneEdge_EdgeLoopExpand",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "SetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfOneFace_CutHole",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "FaceSetHandle" },
            { "identifier": "Ident", "argument": "EdgesSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfFaces_Extrude",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfFaces_QuadsToTriangles",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfFaces_TrianglesToQuads",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            { "identifier": "Ident", "argument": "ResultSetHandle" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfFaces_ApplyMaterial",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "SetHandle" },
            { "identifier": "Ident", "argument": "MaterialId" }
          ],
          "documentation": ""
        },
        {
          "name": "SetOfFaces_PlanarExpand",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "FacesSetHandle" }],
          "documentation": ""
        },
        {
          "name": "SetOfFaces_ChangeOrientation",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "FacesSetHandle" }],
          "documentation": ""
        },
        {
          "name": "Prefabs_Reload",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Prefab_Export",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Prefab_Import",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "PrefabIndex" }],
          "documentation": ""
        },
        {
          "name": "Parts_CanMergeParts",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Parts_CanGroupParts",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Parts_CanUngroupParts",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Parts_GetOpsState",
          "returns": "Int3",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Parts_MergeSelectedParts",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Parts_Group",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Parts_UngroupSelectedParts",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        { "name": "Cut", "returns": "Void", "params": [], "documentation": "" },
        {
          "name": "Copy",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "AddUndoState",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "AutoSave",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": ""
        },
        {
          "name": "GetTitleCoreType",
          "returns": "CEditorMesh::ETitleCoreType",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CEditorEditor": {
      "inherit": "CEditorBase",
      "enums": {},
      "props": {
        "Boolean": [
          {
            "name": "Bindings_RequestInput_Done",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text[]": [
          { "name": "BindingContexts", "readonly": false, "documentation": "" },
          {
            "name": "RequestedContextBindings",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CEditorEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Bindings_AddContext",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ContextName" }],
          "documentation": ""
        },
        {
          "name": "Bindings_AddBinding",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "BindingScriptId" },
            { "identifier": "Text", "argument": "BindingDisplayName" }
          ],
          "documentation": ""
        },
        {
          "name": "Bindings_RemoveContext",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ContextName" }],
          "documentation": ""
        },
        {
          "name": "Bindings_RemoveBinding",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "BindingName" }
          ],
          "documentation": ""
        },
        {
          "name": "Bindings_RequestInput",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "BindingName" }
          ],
          "documentation": ""
        },
        {
          "name": "Bindings_SetBindingScriptId",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "BindingScriptId" },
            { "identifier": "Text", "argument": "NewBindingScriptId" }
          ],
          "documentation": ""
        },
        {
          "name": "Bindings_SetBindingDisplayName",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "BindingScriptId" },
            { "identifier": "Text", "argument": "BindingDisplayName" }
          ],
          "documentation": ""
        },
        {
          "name": "Bindings_SetContextName",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "NewContextName" }
          ],
          "documentation": ""
        },
        {
          "name": "Bindings_GetContextBindings",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ContextName" }],
          "documentation": ""
        },
        {
          "name": "Bindings_GetBindingActionName",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "BindingName" }
          ],
          "documentation": ""
        },
        {
          "name": "Bindings_GetBindingDisplayName",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "ContextName" },
            { "identifier": "Text", "argument": "BindingName" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CEditorMediaTracker": {
      "inherit": "CEditorPluginAPI",
      "enums": {
        "EMediaTrackerBlockType": [
          "Ghost",
          "CameraCustom",
          "CameraPath",
          "Time",
          "FxColors",
          "Sound",
          "Fog",
          "TransitionFade",
          "CameraEffectShake",
          "CameraEffectScript",
          "Stereo3d",
          "DOF",
          "ToneMapping",
          "BloomHdr",
          "DirtyLens",
          "ColorGrading",
          "FxCameraBlend",
          "MusicEffect",
          "TimeSpeed",
          "TextBlock",
          "Image",
          "ColoringCapturable",
          "ColoringBase",
          "CameraGame",
          "Trails",
          "Manialink",
          "EditingCut",
          "CamFxInertialTracking",
          "VehicleLight",
          "Interface",
          "Triangles2D",
          "Triangles3D",
          "CameraOrbital",
          "OpponentVisibility",
          "Spectators"
        ],
        "EMediaTrackerCopyType": ["None", "Key", "Block"],
        "EMediaTrackerPasteType": [
          "None",
          "KeyInfo",
          "NewKey",
          "BlockCurrentTrack",
          "BlockNewTrack"
        ],
        "EMediaTrackerGhostRef": ["Author", "Ghost1", "Ghost2", "Ghost3"]
      },
      "props": {
        "Real": [
          { "name": "CurrentTimer", "readonly": false, "documentation": "" },
          { "name": "PlaySpeed", "readonly": false, "documentation": "" },
          { "name": "CameraSpeed", "readonly": false, "documentation": "" },
          {
            "name": "ClipConditionValue",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Boolean": [
          {
            "name": "UseOrbitalInsteadOfFreeCam",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "UseClipCamWhenAvailable",
            "readonly": false,
            "documentation": ""
          },
          { "name": "CanUseClipCam", "readonly": false, "documentation": "" }
        ],
        "CMediaTrackerClip": [
          { "name": "Clip", "readonly": true, "documentation": "" }
        ],
        "CMediaTrackerClipGroup": [
          { "name": "ClipGroup", "readonly": true, "documentation": "" }
        ],
        "CEditorEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "PopUpMessage", "readonly": true, "documentation": "" }
        ],
        "CEditorMediaTracker::EMediaTrackerBlockType": [
          { "name": "EditMode", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "TimePlay",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "TimeStop",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "TimeToggle",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Rewind",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Quit",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "UpdatePropertyListReadOnly",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CreateBlock",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CreateKey",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ToggleTriggersMode",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CreateClip",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveClip",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Undo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Redo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ImportClip",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ExportClip",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ImportGhosts",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ToggleRecordGhostMode",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ShootVideo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ShootScreen",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ComputeShadows",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ToggleDisplayPlayerNames",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "InformInterfaceIsHidden",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ToggleGhostRef",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "StopGhostRefPreview",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ToggleClipCondition",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Copy",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Paste",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        { "name": "Cut", "returns": "Void", "params": [], "documentation": "" },
        {
          "name": "DuplicateTrack",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SplitBlock",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MergeTracks",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ToggleAlwaysShowTriggerZone",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ResetTriggerZone",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveAllTracks",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetClip",
          "returns": "Void",
          "params": [{ "identifier": "CMediaTrackerClip", "argument": "Clip" }],
          "documentation": ""
        },
        {
          "name": "IsPlaying",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "IsDevMode",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetCameraDrawRect",
          "returns": "Void",
          "params": [
            { "identifier": "Vec2", "argument": "Pos" },
            { "identifier": "Vec2", "argument": "Size" }
          ],
          "documentation": ""
        },
        {
          "name": "GetSelectedClip",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetSelectedTrack",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetSelectedBlock",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetSelectedKey",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SelectItem",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Track" },
            { "identifier": "Integer", "argument": "Block" },
            { "identifier": "Integer", "argument": "Key" }
          ],
          "documentation": ""
        },
        {
          "name": "CreateTrack",
          "returns": "Void",
          "params": [
            {
              "identifier": "CEditorMediaTracker::EMediaTrackerBlockType",
              "argument": "Type"
            }
          ],
          "documentation": ""
        },
        {
          "name": "CanCreateTrack",
          "returns": "Boolean",
          "params": [
            {
              "identifier": "CEditorMediaTracker::EMediaTrackerBlockType",
              "argument": "Type"
            }
          ],
          "documentation": ""
        },
        {
          "name": "IsKeyStartEnd",
          "returns": "Boolean",
          "params": [
            { "identifier": "Integer", "argument": "Track" },
            { "identifier": "Integer", "argument": "Block" },
            { "identifier": "Integer", "argument": "Key" }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveTrack",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Track" }],
          "documentation": ""
        },
        {
          "name": "RemoveBlock",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Track" },
            { "identifier": "Integer", "argument": "Block" }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveKey",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Track" },
            { "identifier": "Integer", "argument": "Block" },
            { "identifier": "Integer", "argument": "Key" }
          ],
          "documentation": ""
        },
        {
          "name": "CanRemoveAllKeys",
          "returns": "Boolean",
          "params": [
            { "identifier": "Integer", "argument": "Track" },
            { "identifier": "Integer", "argument": "Block" }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveAllKeys",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Track" },
            { "identifier": "Integer", "argument": "Block" }
          ],
          "documentation": ""
        },
        {
          "name": "SetProcessCamInputs",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "ProcessCamInputs" }
          ],
          "documentation": ""
        },
        {
          "name": "ToolBarSetVisible",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Visible" }],
          "documentation": ""
        },
        {
          "name": "IsTriggersModeOn",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "IsRecordGhostModeOn",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetTempHidePropertyList",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "TempHide" }],
          "documentation": ""
        },
        {
          "name": "SetClipName",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Index" },
            { "identifier": "Text", "argument": "Name" }
          ],
          "documentation": ""
        },
        {
          "name": "SetTrackName",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Index" },
            { "identifier": "Text", "argument": "Name" }
          ],
          "documentation": ""
        },
        {
          "name": "SetTrackIsCycling",
          "returns": "Void",
          "params": [
            { "identifier": "CMediaTrackerTrack", "argument": "Track" },
            { "identifier": "Boolean", "argument": "IsCycling" }
          ],
          "documentation": ""
        },
        {
          "name": "SetTrackIsKeepPlaying",
          "returns": "Void",
          "params": [
            { "identifier": "CMediaTrackerTrack", "argument": "Track" },
            { "identifier": "Boolean", "argument": "IsKeepPlaying" }
          ],
          "documentation": ""
        },
        {
          "name": "GetTrackIsCycling",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMediaTrackerTrack", "argument": "Track" }
          ],
          "documentation": ""
        },
        {
          "name": "GetTrackIsKeepPlaying",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMediaTrackerTrack", "argument": "Track" }
          ],
          "documentation": ""
        },
        {
          "name": "SetStartIsCycling",
          "returns": "Void",
          "params": [
            { "identifier": "CMediaTrackerTrack", "argument": "Track" }
          ],
          "documentation": ""
        },
        {
          "name": "SetStopIsCycling",
          "returns": "Void",
          "params": [
            { "identifier": "CMediaTrackerTrack", "argument": "Track" }
          ],
          "documentation": ""
        },
        {
          "name": "GetStartIsCycling",
          "returns": "Real",
          "params": [
            { "identifier": "CMediaTrackerTrack", "argument": "Track" }
          ],
          "documentation": ""
        },
        {
          "name": "GetStopIsCycling",
          "returns": "Real",
          "params": [
            { "identifier": "CMediaTrackerTrack", "argument": "Track" }
          ],
          "documentation": ""
        },
        {
          "name": "GetGhostRefName",
          "returns": "Text",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetClipConditionName",
          "returns": "Text",
          "params": [],
          "documentation": ""
        },
        {
          "name": "HasClipCondition",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetTimeLimit",
          "returns": "Real",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetTimer",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Time" }],
          "documentation": ""
        },
        {
          "name": "SetCurrentBlockStart",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Start" }],
          "documentation": ""
        },
        {
          "name": "SetCurrentBlockEnd",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "End" }],
          "documentation": ""
        },
        {
          "name": "CanCopy",
          "returns": "CEditorMediaTracker::EMediaTrackerCopyType",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CanCut",
          "returns": "CEditorMediaTracker::EMediaTrackerCopyType",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CanPaste",
          "returns": "CEditorMediaTracker::EMediaTrackerPasteType",
          "params": [],
          "documentation": ""
        },
        {
          "name": "HasCopiedItem",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "IsPropertyListReadOnlyAndVisible",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SelectGhostRef",
          "returns": "Void",
          "params": [
            {
              "identifier": "CEditorMediaTracker::EMediaTrackerGhostRef",
              "argument": "Type"
            }
          ],
          "documentation": ""
        },
        {
          "name": "DeleteGhostRef",
          "returns": "Void",
          "params": [
            {
              "identifier": "CEditorMediaTracker::EMediaTrackerGhostRef",
              "argument": "Type"
            }
          ],
          "documentation": ""
        },
        {
          "name": "RecordGhostRef",
          "returns": "Void",
          "params": [
            {
              "identifier": "CEditorMediaTracker::EMediaTrackerGhostRef",
              "argument": "Type"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GhostRefExists",
          "returns": "Boolean",
          "params": [
            {
              "identifier": "CEditorMediaTracker::EMediaTrackerGhostRef",
              "argument": "Type"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetSelectedGhostRef",
          "returns": "CEditorMediaTracker::EMediaTrackerGhostRef",
          "params": [],
          "documentation": ""
        },
        {
          "name": "StartGhostRefPreview",
          "returns": "Void",
          "params": [
            {
              "identifier": "CEditorMediaTracker::EMediaTrackerGhostRef",
              "argument": "Type"
            }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveAllGhostTracksExcept",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Track" }],
          "documentation": ""
        },
        {
          "name": "RemoveAllCameraTracksExcept",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Track" }],
          "documentation": ""
        },
        {
          "name": "CanRemoveAllGhostTracks",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CanRemoveAllCameraTracks",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "IsGhostRefPreview",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetProfileTheme",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Theme" }],
          "documentation": ""
        },
        {
          "name": "GetProfileTheme",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CEditorSkin": {
      "inherit": "CEditorPluginAPI",
      "enums": {
        "EPainterMode": [
          "NoOp",
          "Fill",
          "Brush",
          "Sticker",
          "Layer",
          "BadgeSlots",
          "Team"
        ],
        "EPainterSolidType": [
          "Other",
          "CarWithPilot",
          "Pilot_Male",
          "Pilot_Female",
          "Helmet"
        ],
        "EEditorSkin_IconType": ["Stickers", "Brushs", "Layers", "SubObjects"]
      },
      "props": {
        "CImage[]": [
          { "name": "AllIcons", "readonly": false, "documentation": "" }
        ],
        "CEditorEvent[]": [
          { "name": "PendingEvents", "readonly": false, "documentation": "" }
        ],
        "Vec3[]": [
          { "name": "CustomColors", "readonly": false, "documentation": "" }
        ],
        "CEditorSkin::EPainterMode": [
          { "name": "PainterMode", "readonly": false, "documentation": "" }
        ],
        "CEditorSkin::EPainterSolidType": [
          { "name": "PainterSolidType", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsTextEnabled", "readonly": false, "documentation": "" },
          { "name": "IsPickingColor", "readonly": false, "documentation": "" },
          { "name": "IsErasing", "readonly": false, "documentation": "" },
          {
            "name": "IsUsingShininessOnly",
            "readonly": false,
            "documentation": ""
          },
          { "name": "IsBrushNormal", "readonly": false, "documentation": "" },
          { "name": "IsTextSymmetry", "readonly": false, "documentation": "" },
          { "name": "IsEditingLayer", "readonly": false, "documentation": "" },
          { "name": "CanUndo", "readonly": false, "documentation": "" },
          { "name": "CanRedo", "readonly": false, "documentation": "" },
          {
            "name": "IsFillWithReplacement",
            "readonly": false,
            "documentation": ""
          },
          { "name": "IsSkinHelmetOk", "readonly": false, "documentation": "" },
          { "name": "IsCameraButtonOn", "readonly": false, "documentation": "" }
        ],
        "Integer[]": [
          {
            "name": "SubObjectsSelected",
            "readonly": false,
            "documentation": ""
          },
          { "name": "LayersSelected", "readonly": false, "documentation": "" },
          {
            "name": "StickersSelected",
            "readonly": false,
            "documentation": ""
          },
          { "name": "BrushsSelected", "readonly": false, "documentation": "" },
          {
            "name": "SubFolderElemSelected",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "CurrentLayerSubObjectsSelected",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "SubObjectsCount", "readonly": false, "documentation": "" },
          { "name": "LayersCount", "readonly": false, "documentation": "" },
          { "name": "StickersCount", "readonly": false, "documentation": "" },
          { "name": "BrushsCount", "readonly": false, "documentation": "" },
          {
            "name": "CurSubFolderElemCount",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "EditionLayersCount",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "EditionLayerSelected",
            "readonly": false,
            "documentation": ""
          },
          { "name": "SubObjectHovered", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "Transparency", "readonly": false, "documentation": "" },
          { "name": "Scale", "readonly": false, "documentation": "" },
          { "name": "Rough", "readonly": false, "documentation": "" },
          { "name": "Metal", "readonly": false, "documentation": "" }
        ],
        "Vec3": [{ "name": "Color", "readonly": false, "documentation": "" }],
        "Text": [
          {
            "name": "TextToCreateBitmap",
            "readonly": false,
            "documentation": ""
          },
          { "name": "SkinName", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "ToggleIsTextEnabled",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ToggleIsPickingColor",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "TogglePaintSymMode",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "EditCurrentLayerSelected",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "AddAndEditLayer",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CloseEditSelectedLayer",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MoveSelectedLayerUp",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MoveSelectedLayerDown",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "DeleteSelectedLayer",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Undo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Redo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ExportSkin",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "AlignBrushSticker",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "AskSwitchEditedNodType",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ToggleHelper",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ToggleLight",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ExportLayerEdition",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ImportLayerEdition",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetAllIconFromId",
          "returns": "CImage",
          "params": [
            { "identifier": "Integer", "argument": "Index" },
            {
              "identifier": "CEditorSkin::EEditorSkin_IconType",
              "argument": "IconType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetSubFolderIconFromId",
          "returns": "CImage",
          "params": [
            { "identifier": "Integer", "argument": "FolderIndex" },
            { "identifier": "Integer", "argument": "ElemIndex" },
            {
              "identifier": "CEditorSkin::EEditorSkin_IconType",
              "argument": "IconType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetLayerNameFromIndex",
          "returns": "Text",
          "params": [{ "identifier": "Integer", "argument": "Index" }],
          "documentation": ""
        },
        {
          "name": "GetLayerVisibleFromIndex",
          "returns": "Boolean",
          "params": [{ "identifier": "Integer", "argument": "Index" }],
          "documentation": ""
        },
        {
          "name": "SetLayerVisibleFromIndex",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "IsVisible" },
            { "identifier": "Integer", "argument": "Index" }
          ],
          "documentation": ""
        },
        {
          "name": "SetPainterMode",
          "returns": "Boolean",
          "params": [
            { "identifier": "CEditorSkin::EPainterMode", "argument": "Mode" }
          ],
          "documentation": ""
        },
        {
          "name": "GetSubObjectMaxPage",
          "returns": "Integer",
          "params": [{ "identifier": "Integer", "argument": "NbPerPage" }],
          "documentation": ""
        },
        {
          "name": "GetMainFrameMaxPage",
          "returns": "Integer",
          "params": [{ "identifier": "Integer", "argument": "NbPerPage" }],
          "documentation": ""
        },
        {
          "name": "OnLayerSelected",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "CurrentPage" },
            { "identifier": "Integer", "argument": "Index" }
          ],
          "documentation": ""
        },
        {
          "name": "OnStickerSelected",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "CurrentPage" },
            { "identifier": "Integer", "argument": "Index" }
          ],
          "documentation": ""
        },
        {
          "name": "OnBrushSelected",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "CurrentPage" },
            { "identifier": "Integer", "argument": "Index" }
          ],
          "documentation": ""
        },
        {
          "name": "OnSubFolderElemSelected",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "SubFolderCurrentPage" },
            { "identifier": "Integer", "argument": "ElemIndex" }
          ],
          "documentation": ""
        },
        {
          "name": "SetCurrentLayerSelectedName",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Name" }],
          "documentation": ""
        },
        {
          "name": "AddScale",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Delta" }],
          "documentation": ""
        },
        {
          "name": "AddAngle",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "DeltaRad" }],
          "documentation": ""
        },
        {
          "name": "SetSubObjectIndexForLayer",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "SubObjectIndex" },
            { "identifier": "Integer", "argument": "LayerIndex" },
            { "identifier": "Boolean", "argument": "ResetFirst" }
          ],
          "documentation": ""
        },
        {
          "name": "IsElemAtScriptIndexFolder",
          "returns": "Boolean",
          "params": [
            { "identifier": "Integer", "argument": "ScriptIndex" },
            {
              "identifier": "CEditorSkin::EEditorSkin_IconType",
              "argument": "IconType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "GetFolderNameFromScriptIndex",
          "returns": "Text",
          "params": [
            { "identifier": "Integer", "argument": "ScriptIndex" },
            {
              "identifier": "CEditorSkin::EEditorSkin_IconType",
              "argument": "IconType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "IsCtrlDown",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetSubObjectNameFromIndex",
          "returns": "Text",
          "params": [{ "identifier": "Integer", "argument": "ScriptIndex" }],
          "documentation": ""
        },
        {
          "name": "OpenMediaFolder",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "SubFolderPath" }],
          "documentation": ""
        },
        {
          "name": "ReloadResources",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "forSubObjects" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModuleMenuLayer": {
      "inherit": "CManiaAppTitleLayer",
      "enums": {},
      "props": {
        "CModuleMenuComponent[]": [
          { "name": "Components", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetFirstComponent",
          "returns": "CModuleMenuComponent",
          "params": [{ "identifier": "Text", "argument": "Name" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CTitleControl": {
      "inherit": "CNod",
      "enums": {
        "ESplitScreenLayout": ["Horizontal", "Vertical", "Four"],
        "EResult": [
          "Success",
          "Error_Internal",
          "Error_DataMgr",
          "Error_Net_ServerNotFound",
          "Error_Net_ServerUnreachable",
          "Error_Net_Disconnected",
          "Error_Net_WrongPassword",
          "Error_Network_OnlineExpired",
          "Error_Network_ServerFull",
          "Error_Abort"
        ],
        "EEditorType": [
          "ActionMaker",
          "ChallengeEditor",
          "ItemEditor",
          "InterfaceDesigner",
          "MeshModeler",
          "ModuleStudio",
          "PixelArt",
          "EditorEditor",
          "VehicleAssembler",
          "MaterialEditor",
          "*unused*"
        ],
        "EReplayEditType": ["None", "Edit", "View", "Shoot"]
      },
      "props": {
        "Boolean": [
          {
            "name": "IsReady",
            "readonly": true,
            "documentation": "Can a command be issued."
          },
          { "name": "CanPublishFiles", "readonly": true, "documentation": "" },
          {
            "name": "JoinServer_DisableSystemDialogs",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CTitleControl::EResult": [
          {
            "name": "LatestResult",
            "readonly": true,
            "documentation": "Result of the latest command issued."
          }
        ],
        "Text": [
          { "name": "CustomResultType", "readonly": true, "documentation": "" }
        ],
        "Text[]": [
          { "name": "CustomResultData", "readonly": false, "documentation": "" }
        ],
        "CServerInfo[]": [
          { "name": "LocalServers", "readonly": true, "documentation": "" },
          {
            "name": "LocalServers_CurrentTitle",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CServerInfo": [
          {
            "name": "GetServerInfo_Result",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "PlayMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Map" },
            { "identifier": "Text", "argument": "Mode" },
            { "identifier": "Text", "argument": "SettingsXml" }
          ],
          "documentation": ""
        },
        {
          "name": "PlayCampaign",
          "returns": "Void",
          "params": [
            { "identifier": "CCampaign", "argument": "Campaign" },
            { "identifier": "CMapInfo", "argument": "MapInfo" },
            { "identifier": "Text", "argument": "Mode" },
            { "identifier": "Text", "argument": "SettingsXml" }
          ],
          "documentation": ""
        },
        {
          "name": "PlayMapList",
          "returns": "Void",
          "params": [
            { "identifier": "Text[]", "argument": "MapList" },
            { "identifier": "Text", "argument": "Mode" },
            { "identifier": "Text", "argument": "SettingsXml" }
          ],
          "documentation": ""
        },
        {
          "name": "PlayMatchSettings",
          "returns": "Void",
          "params": [
            { "identifier": "CMatchSettings", "argument": "MatchSettings" },
            { "identifier": "Text", "argument": "OverrideMode" },
            { "identifier": "Text", "argument": "OverrideSettingsXml" }
          ],
          "documentation": ""
        },
        {
          "name": "PlayAgainstReplay",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Replay" },
            { "identifier": "Text", "argument": "Mode" },
            { "identifier": "Text", "argument": "SettingsXml" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySplitScreen",
          "returns": "Void",
          "params": [
            {
              "identifier": "CTitleControl::ESplitScreenLayout",
              "argument": "LayoutType"
            },
            { "identifier": "Text[]", "argument": "MapList" },
            { "identifier": "Text", "argument": "Mode" },
            { "identifier": "Text", "argument": "SettingsXml" }
          ],
          "documentation": ""
        },
        {
          "name": "PlayMultiOnSameScreen",
          "returns": "Void",
          "params": [
            { "identifier": "Text[]", "argument": "MapList" },
            { "identifier": "Text", "argument": "Mode" },
            { "identifier": "Text", "argument": "SettingsXml" }
          ],
          "documentation": ""
        },
        {
          "name": "PlaySplitScreen",
          "returns": "Void",
          "params": [
            {
              "identifier": "CTitleControl::ESplitScreenLayout",
              "argument": "LayoutType"
            },
            { "identifier": "CMatchSettings", "argument": "MatchSettings" }
          ],
          "documentation": ""
        },
        {
          "name": "PlayMultiOnSameScreen",
          "returns": "Void",
          "params": [
            { "identifier": "CMatchSettings", "argument": "MatchSettings" }
          ],
          "documentation": ""
        },
        {
          "name": "ViewReplay",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Replay" }],
          "documentation": ""
        },
        {
          "name": "OpenEditor",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "EditorName" },
            { "identifier": "Text", "argument": "MainPluginSettings" }
          ],
          "documentation": ""
        },
        {
          "name": "OpenEditor",
          "returns": "Void",
          "params": [
            {
              "identifier": "CTitleControl::EEditorType",
              "argument": "EditorType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "EditSkins",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "EditSkinsFromFileName",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "SkinFilePath" }],
          "documentation": ""
        },
        {
          "name": "EditReplay",
          "returns": "Void",
          "params": [{ "identifier": "Text[]", "argument": "ReplayList" }],
          "documentation": ""
        },
        {
          "name": "EditReplay",
          "returns": "Void",
          "params": [
            { "identifier": "Text[]", "argument": "ReplayList" },
            {
              "identifier": "CTitleControl::EReplayEditType",
              "argument": "EditType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "EditGhosts",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Map" }],
          "documentation": ""
        },
        {
          "name": "EditAsset",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "EditorName" },
            { "identifier": "Text", "argument": "MainPluginSettingsXml" },
            { "identifier": "Text", "argument": "RelativeFileName" }
          ],
          "documentation": ""
        },
        {
          "name": "EditMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Map" },
            { "identifier": "Text", "argument": "EditorPluginScript" },
            { "identifier": "Text", "argument": "EditorPluginArgument" }
          ],
          "documentation": ""
        },
        {
          "name": "EditMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Map" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text", "argument": "EditorPluginScript" },
            { "identifier": "Text", "argument": "EditorPluginArgument" }
          ],
          "documentation": ""
        },
        {
          "name": "EditMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Map" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text", "argument": "EditorPluginScript" },
            { "identifier": "Text", "argument": "EditorPluginArgument" },
            { "identifier": "Boolean", "argument": "UpgradeToAdvancedEditor" }
          ],
          "documentation": ""
        },
        {
          "name": "EditMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Map" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text[]", "argument": "EditorPluginsScripts" },
            { "identifier": "Text[]", "argument": "EditorPluginsArguments" },
            { "identifier": "Boolean", "argument": "UpgradeToAdvancedEditor" }
          ],
          "documentation": ""
        },
        {
          "name": "EditMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Map" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text[]", "argument": "EditorPluginsScripts" },
            { "identifier": "Text[]", "argument": "EditorPluginsArguments" },
            { "identifier": "Boolean", "argument": "UpgradeToAdvancedEditor" },
            { "identifier": "Boolean", "argument": "OnlyUseForcedPlugins" }
          ],
          "documentation": ""
        },
        {
          "name": "EditNewMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Environment" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text", "argument": "MapType" },
            { "identifier": "Text", "argument": "EditorPluginScript" },
            { "identifier": "Text", "argument": "EditorPluginArgument" }
          ],
          "documentation": ""
        },
        {
          "name": "EditNewMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Environment" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text", "argument": "MapType" },
            { "identifier": "Boolean", "argument": "UseSimpleEditor" },
            { "identifier": "Text", "argument": "EditorPluginScript" },
            { "identifier": "Text", "argument": "EditorPluginArgument" }
          ],
          "documentation": ""
        },
        {
          "name": "EditNewMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Environment" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text", "argument": "MapType" },
            { "identifier": "Boolean", "argument": "UseSimpleEditor" },
            { "identifier": "Text[]", "argument": "EditorPluginsScripts" },
            { "identifier": "Text[]", "argument": "EditorPluginsArguments" }
          ],
          "documentation": ""
        },
        {
          "name": "EditNewMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Environment" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text", "argument": "MapType" },
            { "identifier": "Boolean", "argument": "UseSimpleEditor" },
            { "identifier": "Text[]", "argument": "EditorPluginsScripts" },
            { "identifier": "Text[]", "argument": "EditorPluginsArguments" },
            { "identifier": "Boolean", "argument": "OnlyUseForcedPlugins" }
          ],
          "documentation": ""
        },
        {
          "name": "EditNewMapFromBaseMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "BaseMapName" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text", "argument": "MapType" },
            { "identifier": "Text", "argument": "EditorPluginScript" },
            { "identifier": "Text", "argument": "EditorPluginArgument" }
          ],
          "documentation": ""
        },
        {
          "name": "EditNewMapFromBaseMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "BaseMapName" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text", "argument": "MapType" },
            { "identifier": "Text", "argument": "EditorPluginScript" },
            { "identifier": "Text", "argument": "EditorPluginArgument" }
          ],
          "documentation": ""
        },
        {
          "name": "EditNewMapFromBaseMap",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "BaseMapName" },
            { "identifier": "Text", "argument": "Decoration" },
            { "identifier": "Text", "argument": "ModNameOrUrl" },
            { "identifier": "Text", "argument": "PlayerModel" },
            { "identifier": "Text", "argument": "MapType" },
            { "identifier": "Text[]", "argument": "EditorPluginsScripts" },
            { "identifier": "Text[]", "argument": "EditorPluginsArguments" },
            { "identifier": "Boolean", "argument": "OnlyUseForcedPlugins" }
          ],
          "documentation": ""
        },
        {
          "name": "PublishFile",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": "Set FileName='' to open a file select dialog."
        },
        {
          "name": "ProcessManiaCodeXml",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ManiaCodeXml" }],
          "documentation": ""
        },
        {
          "name": "DiscoverLocalServers",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CreateServer",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ServerName" },
            { "identifier": "Text", "argument": "ServerComment" },
            { "identifier": "Integer", "argument": "MaxPlayerCount" },
            { "identifier": "Text", "argument": "Password" },
            { "identifier": "Text", "argument": "PasswordSpectators" },
            { "identifier": "CMatchSettings", "argument": "MatchSettings" }
          ],
          "documentation": ""
        },
        {
          "name": "CreateServer",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ServerName" },
            { "identifier": "Text", "argument": "ServerComment" },
            { "identifier": "Integer", "argument": "MaxPlayerCount" },
            { "identifier": "Text", "argument": "Password" },
            { "identifier": "Text", "argument": "PasswordSpectators" },
            { "identifier": "CMatchSettings", "argument": "MatchSettings" },
            { "identifier": "Boolean", "argument": "LocalOnly" }
          ],
          "documentation": ""
        },
        {
          "name": "GetServerInfo",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ServerLogin" }],
          "documentation": "Fetch the server info, from the account id, or 'IP:xxx.xxx.xxx.xxx' with LAN ip"
        },
        {
          "name": "GetServerInfo",
          "returns": "Void",
          "params": [
            { "identifier": "CServerInfo", "argument": "LocalServer" }
          ],
          "documentation": ""
        },
        {
          "name": "GetServerInfo_Abort",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Join_GetServerInfo_Result",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "AsSpectator" },
            { "identifier": "Text", "argument": "Password" }
          ],
          "documentation": ""
        },
        {
          "name": "JoinServer",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ServerLogin" },
            { "identifier": "Boolean", "argument": "AsSpectator" },
            { "identifier": "Text", "argument": "Password" }
          ],
          "documentation": "Join a server"
        },
        { "name": "Quit", "returns": "Void", "params": [], "documentation": "" }
      ],
      "documentation": ""
    },
    "CManiaAppStation": {
      "inherit": "CManiaAppBase",
      "enums": {},
      "props": {
        "CStation": [
          { "name": "Station", "readonly": true, "documentation": "" }
        ],
        "CPackCreatorTitleInfo[]": [
          {
            "name": "Maker_EditedTitles",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "EnterStation",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Maker_EditTitle",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "EditedTitleId" }],
          "documentation": ""
        },
        {
          "name": "Maker_EditNewTitle",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "EditedTitleName" }],
          "documentation": "A new title id will be derived from the EditedTitleName."
        }
      ],
      "documentation": ""
    },
    "CStation": {
      "inherit": "CNod",
      "enums": {
        "EEchelon": [
          "None",
          "Bronze1",
          "Bronze2",
          "Bronze3",
          "Silver1",
          "Silver2",
          "Silver3",
          "Gold1",
          "Gold2",
          "Gold3"
        ]
      },
      "props": {
        "CTitle": [{ "name": "Title", "readonly": true, "documentation": "" }],
        "Integer": [
          {
            "name": "AudienceRegisteredUsers",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CampaignMedalsMax",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CampaignMedalsCurrent",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CampaignMedalsRanking",
            "readonly": true,
            "documentation": ""
          },
          { "name": "LadderRank", "readonly": true, "documentation": "" },
          {
            "name": "NextEchelonPercent",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Real": [
          { "name": "LadderPoints", "readonly": true, "documentation": "" },
          { "name": "GhostAlpha", "readonly": false, "documentation": "" }
        ],
        "CStation::EEchelon": [
          { "name": "Echelon", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "DisableQuickEnter",
            "readonly": false,
            "documentation": ""
          },
          { "name": "IsLogoVisible", "readonly": false, "documentation": "" },
          {
            "name": "IsEditable",
            "readonly": true,
            "documentation": "Is title present in WorkTitles folder?"
          }
        ],
        "Vec3": [
          { "name": "FocusLightColor", "readonly": false, "documentation": "" },
          { "name": "NormalLightColor", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CManiaAppBrowser": {
      "inherit": "CManiaApp",
      "enums": {},
      "props": {
        "CManiaAppEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "Text": [
          {
            "name": "BrowserFocusedFrameId",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "BrowserBack",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "BrowserQuit",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "BrowserHome",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "BrowserReload",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMap": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CMapInfo": [
          { "name": "MapInfo", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "MapName", "readonly": false, "documentation": "" },
          { "name": "Comments", "readonly": false, "documentation": "" },
          {
            "name": "AuthorZoneIconUrl",
            "readonly": true,
            "documentation": ""
          },
          { "name": "CollectionName", "readonly": true, "documentation": "" },
          { "name": "DecorationName", "readonly": true, "documentation": "" },
          { "name": "AuthorLogin", "readonly": true, "documentation": "" },
          { "name": "AuthorNickName", "readonly": true, "documentation": "" },
          { "name": "AuthorZonePath", "readonly": true, "documentation": "" },
          { "name": "MapType", "readonly": true, "documentation": "" },
          { "name": "MapStyle", "readonly": true, "documentation": "" },
          {
            "name": "ObjectiveTextAuthor",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ObjectiveTextGold",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ObjectiveTextSilver",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "ObjectiveTextBronze",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Integer": [
          {
            "name": "TMObjective_AuthorTime",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "TMObjective_GoldTime",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "TMObjective_SilverTime",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "TMObjective_BronzeTime",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "TMObjective_NbLaps",
            "readonly": false,
            "documentation": ""
          },
          { "name": "CopperPrice", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "TMObjective_IsLapRace",
            "readonly": false,
            "documentation": ""
          },
          { "name": "HasCustomIntro", "readonly": true, "documentation": "" },
          { "name": "HasCustomMusic", "readonly": true, "documentation": "" }
        ],
        "Int3": [{ "name": "Size", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlFrame": {
      "inherit": "CMlControl",
      "enums": {},
      "props": {
        "CMlControl[]": [
          { "name": "Controls", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "ScrollActive", "readonly": false, "documentation": "" },
          { "name": "ScrollGridSnap", "readonly": false, "documentation": "" },
          { "name": "DisablePreload", "readonly": false, "documentation": "" }
        ],
        "Vec2": [
          { "name": "ScrollOffset", "readonly": false, "documentation": "" },
          { "name": "ScrollAnimOffset", "readonly": true, "documentation": "" },
          { "name": "ScrollMax", "readonly": false, "documentation": "" },
          { "name": "ScrollMin", "readonly": false, "documentation": "" },
          { "name": "ScrollGrid", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetFirstChild",
          "returns": "CMlControl",
          "params": [{ "identifier": "Text", "argument": "ControlId" }],
          "documentation": ""
        },
        {
          "name": "Scroll",
          "returns": "Void",
          "params": [{ "identifier": "Vec2", "argument": "DeltaInGridUnits" }],
          "documentation": ""
        },
        {
          "name": "ScrollBumpTop",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ScrollBumpBottom",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ScrollBumpLeft",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ScrollBumpRight",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CBaseConstEvent": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Boolean": [
          {
            "name": "HasBeenProcessed",
            "readonly": false,
            "documentation": "Use this flag to solve issues where some events are interpreted twice by different script librairies.<br/>Discard events if the flag is set. Set the flag after handling the event."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlColorPicker": {
      "inherit": "CMlControl",
      "enums": {},
      "props": {
        "Vec3": [{ "name": "Color", "readonly": false, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlTimeLine": {
      "inherit": "CMlControl",
      "enums": {},
      "props": {
        "Real": [
          { "name": "Time", "readonly": false, "documentation": "" },
          { "name": "TimeMin", "readonly": false, "documentation": "" },
          { "name": "TimeMax", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          { "name": "Page", "readonly": false, "documentation": "" },
          { "name": "TracksPerPage", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsDraggingCursor", "readonly": true, "documentation": "" },
          { "name": "IsDraggingBlock", "readonly": true, "documentation": "" },
          { "name": "IsDraggingKey", "readonly": true, "documentation": "" },
          { "name": "IsScaling", "readonly": true, "documentation": "" },
          { "name": "IsPanning", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "ShowFullTimeLine",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ResetCycling",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetSimpleMediaTrackerPilot",
          "returns": "Void",
          "params": [
            { "identifier": "CEditorMediaTracker", "argument": "MediaTracker" }
          ],
          "documentation": ""
        },
        {
          "name": "SetSelection",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Track" },
            { "identifier": "Integer", "argument": "Block" },
            { "identifier": "Integer", "argument": "Key" }
          ],
          "documentation": ""
        },
        {
          "name": "SetSeparatorColor",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "HexColor" }],
          "documentation": ""
        },
        {
          "name": "SetBgColor",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "HexColor" }],
          "documentation": ""
        },
        {
          "name": "SetCursorColor",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "HexColor" }],
          "documentation": ""
        },
        {
          "name": "SetRulerColor",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "HexColor" }],
          "documentation": ""
        },
        {
          "name": "SetRulerLineColor",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "HexColor" }],
          "documentation": ""
        },
        {
          "name": "SetKeyColor",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "HexColor" }],
          "documentation": ""
        },
        {
          "name": "SetStartIsCycling",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Time" }],
          "documentation": ""
        },
        {
          "name": "SetStopIsCycling",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Time" }],
          "documentation": ""
        },
        {
          "name": "SetTimeLimit",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "TimeLimit" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlSlider": {
      "inherit": "CMlControl",
      "enums": {},
      "props": {
        "Real": [
          { "name": "Value", "readonly": false, "documentation": "" },
          { "name": "MinRange", "readonly": false, "documentation": "" },
          { "name": "MaxRange", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlMediaPlayer": {
      "inherit": "CMlControl",
      "enums": {},
      "props": {
        "Boolean": [
          { "name": "IsInitPlay", "readonly": false, "documentation": "" },
          { "name": "Music", "readonly": false, "documentation": "" },
          { "name": "IsLooping", "readonly": false, "documentation": "" }
        ],
        "Real": [{ "name": "Volume", "readonly": false, "documentation": "" }],
        "Text": [{ "name": "Url", "readonly": false, "documentation": "" }]
      },
      "methods": [
        {
          "name": "Play",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Stop",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "StopAndRewind",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlGraph": {
      "inherit": "CMlControl",
      "enums": {},
      "props": {
        "Vec2": [
          { "name": "CoordsMin", "readonly": false, "documentation": "" },
          { "name": "CoordsMax", "readonly": false, "documentation": "" }
        ],
        "CMlGraphCurve[]": [
          { "name": "Curves", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "AddCurve",
          "returns": "CMlGraphCurve",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RemoveCurve",
          "returns": "Void",
          "params": [{ "identifier": "CMlGraphCurve", "argument": "Curve" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlGauge": {
      "inherit": "CMlControl",
      "enums": {},
      "props": {
        "Text": [{ "name": "Style", "readonly": false, "documentation": "" }],
        "Real": [
          {
            "name": "Ratio",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "GradingRatio",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          }
        ],
        "Integer": [{ "name": "Clan", "readonly": false, "documentation": "" }],
        "Vec3": [{ "name": "Color", "readonly": false, "documentation": "" }],
        "Boolean": [
          { "name": "DrawBackground", "readonly": false, "documentation": "" },
          {
            "name": "DrawBlockBackground",
            "readonly": false,
            "documentation": ""
          },
          { "name": "CenteredBar", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SetRatio",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "NewRatio" }],
          "documentation": ""
        },
        {
          "name": "SetClan",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "NewClan" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlCamera": {
      "inherit": "CMlControl",
      "enums": {},
      "props": {
        "Boolean": [
          { "name": "Fullscreen", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlTextEdit": {
      "inherit": "CMlControl",
      "enums": {
        "EControlScriptEditorTextFormat": [
          "Basic",
          "Script",
          "Password",
          "Newpassword"
        ]
      },
      "props": {
        "Text": [{ "name": "Value", "readonly": false, "documentation": "" }],
        "Integer": [
          { "name": "MaxLine", "readonly": false, "documentation": "" },
          { "name": "ValueLineCount", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "AutoNewLine", "readonly": false, "documentation": "" },
          { "name": "ShowLineNumbers", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "LineSpacing", "readonly": false, "documentation": "" },
          { "name": "Opacity", "readonly": false, "documentation": "" },
          { "name": "TextSizeReal", "readonly": false, "documentation": "" }
        ],
        "Vec3": [
          { "name": "TextColor", "readonly": false, "documentation": "" }
        ],
        "CMlTextEdit::EControlScriptEditorTextFormat": [
          { "name": "TextFormat", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "StartEdition",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlEntry": {
      "inherit": "CMlControl",
      "enums": {
        "ETextFormat": ["Basic", "Script", "Password", "Newpassword"],
        "ValueType": [
          "Ml_Unknown",
          "Ml_Natural",
          "Ml_Integer",
          "Ml_Real",
          "Ml_String",
          "Ml_TimeMmSsCc",
          "Ml_TimeHhMmSs",
          "Ml_RealFormated",
          "Ml_TimeMmSs",
          "Ml_Ascii7bit",
          "Ml_Real3Decimals",
          "Ml_TimeHhMmSs_24",
          "Ml_TimeHhMm",
          "Ml_Percent",
          "Ml_Hexa",
          "Ml_TimeHhMmSsOrMmSs",
          "Ml_TimeHhMmFromSeconds",
          "Ml_TimeHhMmSsMil"
        ]
      },
      "props": {
        "Text": [{ "name": "Value", "readonly": false, "documentation": "" }],
        "CMlEntry::ETextFormat": [
          { "name": "TextFormat", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "Opacity", "readonly": false, "documentation": "" },
          { "name": "TextSizeReal", "readonly": false, "documentation": "" }
        ],
        "Vec3": [
          { "name": "TextColor", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          { "name": "MaxLength", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "StartEdition",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetText",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "NewText" },
            { "identifier": "Boolean", "argument": "SendSubmitEvent" }
          ],
          "documentation": ""
        },
        {
          "name": "GetValueType",
          "returns": "CMlEntry::ValueType",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetValueType",
          "returns": "Void",
          "params": [
            { "identifier": "CMlEntry::ValueType", "argument": "ValueType" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlLabel": {
      "inherit": "CMlControl",
      "enums": {
        "EBlendMode": ["Default", "Add"],
        "EFilterProfanities": ["Never", "OnlyIfNotTranslated", "Always"]
      },
      "props": {
        "Text": [
          { "name": "Style", "readonly": false, "documentation": "" },
          { "name": "Substyle", "readonly": false, "documentation": "" },
          { "name": "TextFont", "readonly": false, "documentation": "" },
          { "name": "Value", "readonly": false, "documentation": "" },
          {
            "name": "TextPrefix",
            "readonly": false,
            "documentation": "Used to include styling attributes like $s,$o..."
          },
          { "name": "TTS_AltText", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          { "name": "ValueLineCount", "readonly": true, "documentation": "" },
          { "name": "MaxLine", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "LineSpacing", "readonly": false, "documentation": "" },
          { "name": "ItalicSlope", "readonly": false, "documentation": "" },
          { "name": "Opacity", "readonly": false, "documentation": "" },
          { "name": "TextSizeReal", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "AppendEllipsis", "readonly": false, "documentation": "" },
          { "name": "AutoNewLine", "readonly": false, "documentation": "" },
          {
            "name": "TTS_AltText_Translate",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Vec3": [
          { "name": "TextColor", "readonly": false, "documentation": "" }
        ],
        "CMlLabel::EBlendMode": [
          { "name": "Blend", "readonly": false, "documentation": "" }
        ],
        "CMlLabel::EFilterProfanities": [
          {
            "name": "FilterProfanities",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "SetText",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "NewText" }],
          "documentation": ""
        },
        {
          "name": "ComputeWidth",
          "returns": "Real",
          "params": [{ "identifier": "Text", "argument": "Text" }],
          "documentation": ""
        },
        {
          "name": "ComputeWidth",
          "returns": "Real",
          "params": [
            { "identifier": "Text", "argument": "Text" },
            { "identifier": "Boolean", "argument": "Translated" }
          ],
          "documentation": ""
        },
        {
          "name": "ComputeHeight",
          "returns": "Real",
          "params": [{ "identifier": "Text", "argument": "Text" }],
          "documentation": ""
        },
        {
          "name": "TTS_Focus",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "TTS_Unfocus",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlMinimap": {
      "inherit": "CMlControl",
      "enums": {},
      "props": {
        "Vec3": [
          { "name": "WorldPosition", "readonly": false, "documentation": "" }
        ],
        "Vec2": [
          { "name": "MapPosition", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "MapYaw", "readonly": false, "documentation": "" },
          {
            "name": "ZoomFactor",
            "readonly": false,
            "documentation": "Values in range (0.500000-10.000000)"
          }
        ],
        "Boolean": [
          { "name": "Underground", "readonly": false, "documentation": "" },
          {
            "name": "DisableAutoUnderground",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "Fog_SetAll",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Value" }],
          "documentation": ""
        },
        {
          "name": "Fog_ClearDisk",
          "returns": "Void",
          "params": [
            { "identifier": "Vec3", "argument": "WorldCenter" },
            { "identifier": "Real", "argument": "Radius" },
            { "identifier": "Real", "argument": "FadeSize" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlQuad": {
      "inherit": "CMlControl",
      "enums": {
        "EKeepRatioMode": ["Inactive", "Clip", "Fit"],
        "EBlendMode": ["Default", "Add"]
      },
      "props": {
        "CImage": [{ "name": "Image", "readonly": false, "documentation": "" }],
        "Text": [
          { "name": "ImageUrl", "readonly": false, "documentation": "" },
          { "name": "ImageUrlFocus", "readonly": false, "documentation": "" },
          { "name": "AlphaMaskUrl", "readonly": false, "documentation": "" },
          { "name": "Style", "readonly": false, "documentation": "" },
          { "name": "Substyle", "readonly": false, "documentation": "" },
          { "name": "TTS_AltText", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "StyleSelected", "readonly": false, "documentation": "" },
          {
            "name": "DownloadInProgress",
            "readonly": true,
            "documentation": ""
          },
          { "name": "SuperSample", "readonly": false, "documentation": "" },
          {
            "name": "TTS_AltText_Translate",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Vec3": [
          { "name": "Colorize", "readonly": false, "documentation": "" },
          { "name": "ModulateColor", "readonly": false, "documentation": "" },
          { "name": "BgColor", "readonly": false, "documentation": "" },
          { "name": "BgColorFocus", "readonly": false, "documentation": "" }
        ],
        "Real": [{ "name": "Opacity", "readonly": false, "documentation": "" }],
        "CMlQuad::EKeepRatioMode": [
          { "name": "KeepRatio", "readonly": false, "documentation": "" }
        ],
        "CMlQuad::EBlendMode": [
          { "name": "Blend", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "ChangeImageUrl",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "fieldName" }],
          "documentation": ""
        },
        {
          "name": "RefreshImages",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "TTS_Focus",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "TTS_Unfocus",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CParsingDocument": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "TextContents", "readonly": true, "documentation": "" }
        ],
        "CParsingNode": [
          { "name": "Root", "readonly": true, "documentation": "" }
        ],
        "CParsingNode[]": [
          { "name": "Nodes", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetFirstChild",
          "returns": "CParsingNode",
          "params": [{ "identifier": "Text", "argument": "Name" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CHttpRequest": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "Url",
            "readonly": true,
            "documentation": "Url of the request"
          },
          {
            "name": "Result",
            "readonly": true,
            "documentation": "Result available once IsCompleted and StatusCode = 200"
          }
        ],
        "Integer": [
          {
            "name": "StatusCode",
            "readonly": true,
            "documentation": "HTTP status code"
          }
        ],
        "Boolean": [
          { "name": "IsCompleted", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CHttpEvent": {
      "inherit": "CNod",
      "enums": { "EType": ["RequestComplete"] },
      "props": {
        "CHttpEvent::EType": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "CHttpRequest": [
          {
            "name": "Request",
            "readonly": true,
            "documentation": "Request triggering the event"
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CVideo": {
      "inherit": "CNod",
      "enums": { "ETextureFilter": ["Default", "Point"] },
      "props": {
        "CImage": [{ "name": "Image", "readonly": true, "documentation": "" }],
        "Boolean": [
          { "name": "IsLooping", "readonly": false, "documentation": "" },
          {
            "name": "DownloadInProgress",
            "readonly": true,
            "documentation": ""
          },
          { "name": "IsProcessing", "readonly": true, "documentation": "" },
          {
            "name": "AutoProcessing",
            "readonly": false,
            "documentation": "Automatically begin processing when the layer becomes visible and end when hidden."
          },
          { "name": "IsPlaying", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "PlayLength", "readonly": true, "documentation": "" },
          {
            "name": "PlayCursor",
            "readonly": false,
            "documentation": "note: seeking not implemented, setting a value is ignored."
          }
        ],
        "CVideo::ETextureFilter": [
          { "name": "TextureFilter", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "BeginProcessing",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "EndProcessing",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Play",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Pause",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        { "name": "Stop", "returns": "Void", "params": [], "documentation": "" }
      ],
      "documentation": ""
    },
    "CAudioSource": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Boolean": [
          { "name": "IsPlaying", "readonly": true, "documentation": "" },
          {
            "name": "DownloadInProgress",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Real": [
          { "name": "Volume", "readonly": false, "documentation": "" },
          { "name": "FadeDuration", "readonly": false, "documentation": "" },
          { "name": "VolumedB", "readonly": false, "documentation": "" },
          { "name": "Pitch", "readonly": false, "documentation": "" },
          { "name": "PlayCursor", "readonly": false, "documentation": "" },
          { "name": "PlayLength", "readonly": true, "documentation": "" }
        ],
        "Vec3": [
          {
            "name": "RelativePosition",
            "readonly": false,
            "documentation": ""
          },
          { "name": "PanRadiusLfe", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Play",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        { "name": "Stop", "returns": "Void", "params": [], "documentation": "" }
      ],
      "documentation": ""
    },
    "CAudioSourceMusic": {
      "inherit": "CAudioSource",
      "enums": {
        "EUpdateMode": ["Cut", "OnNextBar", "OnNextHalfBar", "OnNextBeat"]
      },
      "props": {
        "Real[]": [
          { "name": "Tracks_Volume", "readonly": false, "documentation": "" },
          { "name": "Tracks_VolumedB", "readonly": false, "documentation": "" },
          { "name": "Tracks_Length", "readonly": false, "documentation": "" }
        ],
        "Text[]": [
          { "name": "Tracks_Name", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          { "name": "Tracks_Count", "readonly": true, "documentation": "" },
          { "name": "BeatsPerBar", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "BeatsPerMinute", "readonly": true, "documentation": "" },
          { "name": "BeatDuration", "readonly": true, "documentation": "" },
          {
            "name": "LPF_CutoffRatio",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "LPF_Q",
            "readonly": false,
            "documentation": "Values in range (0.100000-20.000000)"
          },
          {
            "name": "HPF_CutoffRatio",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "HPF_Q",
            "readonly": false,
            "documentation": "Values in range (0.100000-20.000000)"
          },
          {
            "name": "FadeTracksDuration",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "FadeFiltersDuration",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CAudioSourceMusic::EUpdateMode": [
          { "name": "UpdateMode", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "Dbg_ForceIntensity",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Dbg_ForceSequential",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Dbg_ForceRandom", "readonly": false, "documentation": "" },
          { "name": "UseNewImplem", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "MuteAllTracks",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "UnmuteAllTracks",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "NextVariant",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "NextVariant",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "IsIntensityDecreasing" }
          ],
          "documentation": ""
        },
        {
          "name": "EnableSegment",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "SegmentName" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CInputEvent": {
      "inherit": "CNod",
      "enums": {
        "EType": ["PadButtonPress"],
        "EButton": [
          "Left",
          "Right",
          "Up",
          "Down",
          "A",
          "B",
          "X",
          "Y",
          "L1",
          "R1",
          "LeftStick",
          "RightStick",
          "Menu",
          "View",
          "LeftStick_Left",
          "LeftStick_Right",
          "LeftStick_Up",
          "LeftStick_Down",
          "RightStick_Left",
          "RightStick_Right",
          "RightStick_Up",
          "RightStick_Down",
          "L2",
          "R2",
          "None"
        ]
      },
      "props": {
        "CInputEvent::EType": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "CInputPad": [{ "name": "Pad", "readonly": true, "documentation": "" }],
        "CInputEvent::EButton": [
          { "name": "Button", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsAutoRepeat", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "KeyCode", "readonly": true, "documentation": "" }
        ],
        "Text": [{ "name": "KeyName", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CInputPad": {
      "inherit": "CNod",
      "enums": {
        "EButton": [
          "Left",
          "Right",
          "Up",
          "Down",
          "A",
          "B",
          "X",
          "Y",
          "L1",
          "R1",
          "LeftStick",
          "RightStick",
          "Menu",
          "View",
          "LeftStick_Left",
          "LeftStick_Right",
          "LeftStick_Up",
          "LeftStick_Down",
          "RightStick_Left",
          "RightStick_Right",
          "RightStick_Up",
          "RightStick_Down",
          "L2",
          "R2",
          "None"
        ],
        "EPadType": [
          "Keyboard",
          "Mouse",
          "Generic",
          "XBox",
          "PlayStation",
          "Vive"
        ]
      },
      "props": {
        "Integer": [
          { "name": "ControllerId", "readonly": true, "documentation": "" },
          { "name": "IdleDuration", "readonly": true, "documentation": "" },
          { "name": "Left", "readonly": true, "documentation": "" },
          { "name": "Right", "readonly": true, "documentation": "" },
          { "name": "Up", "readonly": true, "documentation": "" },
          { "name": "Down", "readonly": true, "documentation": "" },
          { "name": "A", "readonly": true, "documentation": "" },
          { "name": "B", "readonly": true, "documentation": "" },
          { "name": "X", "readonly": true, "documentation": "" },
          { "name": "Y", "readonly": true, "documentation": "" },
          { "name": "L1", "readonly": true, "documentation": "" },
          { "name": "R1", "readonly": true, "documentation": "" },
          { "name": "LeftStickBut", "readonly": true, "documentation": "" },
          { "name": "RightStickBut", "readonly": true, "documentation": "" },
          { "name": "Menu", "readonly": true, "documentation": "" },
          { "name": "View", "readonly": true, "documentation": "" }
        ],
        "Ident": [{ "name": "UserId", "readonly": true, "documentation": "" }],
        "CInputPad::EPadType": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "ModelName", "readonly": true, "documentation": "" }
        ],
        "Real": [
          {
            "name": "LeftStickX",
            "readonly": true,
            "documentation": "Values in range (-1.000000-1.000000)"
          },
          {
            "name": "LeftStickY",
            "readonly": true,
            "documentation": "Values in range (-1.000000-1.000000)"
          },
          {
            "name": "RightStickX",
            "readonly": true,
            "documentation": "Values in range (-1.000000-1.000000)"
          },
          {
            "name": "RightStickY",
            "readonly": true,
            "documentation": "Values in range (-1.000000-1.000000)"
          },
          {
            "name": "L2",
            "readonly": true,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "R2",
            "readonly": true,
            "documentation": "Values in range (0.000000-1.000000)"
          }
        ],
        "CInputPad::EButton[]": [
          { "name": "ButtonEvents", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "ClearRumble",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "AddRumble",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "Duration" },
            { "identifier": "Real", "argument": "LargeMotor" },
            { "identifier": "Real", "argument": "SmallMotor" }
          ],
          "documentation": "Duration = 0 --> forever."
        },
        {
          "name": "SetColor",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Color" }],
          "documentation": "(only works on PS4.)  set to (0,0,0) to reset back to default color."
        }
      ],
      "documentation": ""
    },
    "CCampaign": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "CampaignId", "readonly": true, "documentation": "" },
          { "name": "ScoreContext", "readonly": false, "documentation": "" }
        ],
        "CMapGroup[]": [
          { "name": "MapGroups", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "OfficialRecordEnabled",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "GetMapGroupCount",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetMapGroup",
          "returns": "CMapGroup",
          "params": [{ "identifier": "Integer", "argument": "Index" }],
          "documentation": ""
        },
        {
          "name": "GetNextMap",
          "returns": "CMapInfo",
          "params": [
            { "identifier": "CMapInfo", "argument": "CurrentMapInfo" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CTaskResult_NSItemCollection": {
      "inherit": "CWebServicesTaskResult_NadeoServicesItemCollection",
      "enums": {},
      "props": {
        "CNadeoServicesItemCollection": [
          {
            "name": "ItemCollection",
            "readonly": true,
            "documentation": "ItemCollection info retrieve from NadeoServices contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_NSItemCollectionList": {
      "inherit": "CWebServicesTaskResult_NadeoServicesItemCollectionList",
      "enums": {},
      "props": {
        "CNadeoServicesItemCollection[]": [
          {
            "name": "ItemCollectionList",
            "readonly": true,
            "documentation": "List of ItemCollection info retrieve from NadeoServices contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_MapList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "ParentPath",
            "readonly": true,
            "documentation": "Path of the parent zone."
          },
          {
            "name": "Path",
            "readonly": true,
            "documentation": "Path of the current zone."
          }
        ],
        "CMapInfo[]": [
          {
            "name": "MapInfos",
            "readonly": true,
            "documentation": "List of the map info. Array of CMapInfo objects."
          }
        ],
        "Text[]": [
          {
            "name": "SubFolders",
            "readonly": false,
            "documentation": "List of the sub folders. Array of string."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_NSMap": {
      "inherit": "CWebServicesTaskResult_NadeoServicesMap",
      "enums": {},
      "props": {
        "CNadeoServicesMap": [
          {
            "name": "Map",
            "readonly": true,
            "documentation": "Map info retrieve from NadeoServices contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_NSMapList": {
      "inherit": "CWebServicesTaskResult_NadeoServicesMapList",
      "enums": {},
      "props": {
        "CNadeoServicesMap[]": [
          {
            "name": "MapList",
            "readonly": true,
            "documentation": "List of map info retrieve from NadeoServices contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_NSSkin": {
      "inherit": "CWebServicesTaskResult_NadeoServicesSkin",
      "enums": {},
      "props": {
        "CNadeoServicesSkin": [
          {
            "name": "Skin",
            "readonly": true,
            "documentation": "Skin info retrieve from NadeoServices contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_NSSkinList": {
      "inherit": "CWebServicesTaskResult_NadeoServicesSkinList",
      "enums": {},
      "props": {
        "CNadeoServicesSkin[]": [
          {
            "name": "SkinList",
            "readonly": true,
            "documentation": "List of Skin info retrieve from NadeoServices contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_ReplayList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "ParentPath",
            "readonly": true,
            "documentation": "Path of the parent zone."
          },
          {
            "name": "Path",
            "readonly": true,
            "documentation": "Path of the current zone."
          }
        ],
        "CReplayInfo[]": [
          {
            "name": "ReplayInfos",
            "readonly": true,
            "documentation": "List of the replay info. Array of CReplayInfo objects."
          }
        ],
        "Text[]": [
          {
            "name": "SubFolders",
            "readonly": false,
            "documentation": "List of the sub folders. Array of string."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_GhostList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "CGhost[]": [
          {
            "name": "Ghosts",
            "readonly": true,
            "documentation": "List of ghost. Array of CGhost."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_FileList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "ParentPath",
            "readonly": true,
            "documentation": "Path of the parent zone."
          },
          {
            "name": "Path",
            "readonly": true,
            "documentation": "Path of the current zone."
          }
        ],
        "Text[]": [
          {
            "name": "Files",
            "readonly": false,
            "documentation": "List of files. Array of string."
          },
          {
            "name": "SubFolders",
            "readonly": false,
            "documentation": "List of the sub folders. Array of string."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_GameModeList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "CTaskResult_ModeInfo[]": [
          {
            "name": "GameModes",
            "readonly": true,
            "documentation": "Description of the GameMode"
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_MapRecordList": {
      "inherit": "CWebServicesTaskResult_MapRecordList",
      "enums": {},
      "props": {
        "CMapRecord[]": [
          {
            "name": "MapRecordList",
            "readonly": true,
            "documentation": "List of map record info retrieve from NadeoServices contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_Natural": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Integer": [{ "name": "Value", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_BuddiesChallengeRecord": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "Login",
            "readonly": true,
            "documentation": "Login of the user who has launched the task."
          }
        ],
        "CHighScoreComparison[]": [
          {
            "name": "BuddiesChallengeRecord",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "SortByOpponentCount",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by opponent record count."
        },
        {
          "name": "SortByOpponentDisplayName",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by opponent display name."
        },
        {
          "name": "SortByOpponentLogin",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by opponent login."
        },
        {
          "name": "SortByOpponentRecordDate",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by opponent record date."
        },
        {
          "name": "SortByOpponentRecordTime",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by opponent record time."
        }
      ],
      "documentation": ""
    },
    "CTaskResult_BuddiesChallengeRecordsComparison": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "Login",
            "readonly": true,
            "documentation": "Login of the user who has launched the task."
          }
        ],
        "CHighScoreComparisonSummary[]": [
          {
            "name": "BuddiesComparison",
            "readonly": true,
            "documentation": "List of comparison summary between user records and buddy records. Array of CHighScoreComparisonSummary objects."
          }
        ]
      },
      "methods": [
        {
          "name": "SortByPlayerCount",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by user best record count."
        },
        {
          "name": "SortByOpponentLogin",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by opponent login."
        },
        {
          "name": "SortByOpponentCount",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by opponent best record count."
        },
        {
          "name": "SortByOpponentDate",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by opponent last record date."
        },
        {
          "name": "SortByOpponentDisplayName",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by opponent display name."
        }
      ],
      "documentation": ""
    },
    "CTaskResult_BuddyChallengeRecordsComparison": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "Login",
            "readonly": true,
            "documentation": "Login of the user who has launched the task."
          },
          {
            "name": "BuddyLogin",
            "readonly": true,
            "documentation": "Buddy login."
          }
        ],
        "CHighScoreComparison[]": [
          {
            "name": "PlayerBestRecordsComparison",
            "readonly": true,
            "documentation": "List of best challenge records for user. Array of CHighScoreComparison objects."
          },
          {
            "name": "BuddyBestRecordsComparison",
            "readonly": true,
            "documentation": "List of best challenge records for buddy. Array of CHighScoreComparison objects."
          }
        ]
      },
      "methods": [
        {
          "name": "SortByMapName",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by map name."
        },
        {
          "name": "SortByRecordTime",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by record time."
        },
        {
          "name": "SortByRecordTimeDiff",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by record time diff."
        },
        {
          "name": "SortByRecordDate",
          "returns": "Void",
          "params": [],
          "documentation": "Sort the results by record date."
        }
      ],
      "documentation": ""
    },
    "CTaskResult_NaturalLeaderBoardInfoList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Integer": [
          {
            "name": "FromIndex",
            "readonly": true,
            "documentation": "Starting index."
          },
          {
            "name": "Count",
            "readonly": true,
            "documentation": "Number of item contained."
          }
        ],
        "CNaturalLeaderBoardInfo[]": [
          {
            "name": "LeaderBoardInfo",
            "readonly": true,
            "documentation": "List of the ranking info. Array of CNaturalLeaderBoardInfo objects."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_Season": {
      "inherit": "CWebServicesTaskResult_Season",
      "enums": {},
      "props": {
        "CSeason": [
          {
            "name": "Season",
            "readonly": true,
            "documentation": "Season info contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_SeasonList": {
      "inherit": "CWebServicesTaskResult_SeasonList",
      "enums": {},
      "props": {
        "CSeason[]": [
          {
            "name": "SeasonList",
            "readonly": true,
            "documentation": "List of season contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_RealLeaderBoardInfoList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Integer": [
          {
            "name": "FromIndex",
            "readonly": true,
            "documentation": "Starting index."
          },
          {
            "name": "Count",
            "readonly": true,
            "documentation": "Number of item contained."
          }
        ],
        "CRealLeaderBoardInfo[]": [
          {
            "name": "LeaderBoardInfo",
            "readonly": true,
            "documentation": "List of the ranking info. Array of CRealLeaderBoardInfo objects."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_AccountTrophyGainHistory": {
      "inherit": "CWebServicesTaskResult_AccountTrophyGainHistory",
      "enums": {},
      "props": {
        "CAccountTrophyGainForHistory[]": [
          {
            "name": "AccountTrophyGainList",
            "readonly": true,
            "documentation": "List of account trophy gain contained in this result."
          }
        ],
        "Integer": [
          {
            "name": "AccountTrophyGainTotalCount",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_AccountTrophyLastYearSummary": {
      "inherit": "CWebServicesTaskResult_AccountTrophyLastYearSummary",
      "enums": {},
      "props": {
        "CAccountTrophyLastYearSummary": [
          {
            "name": "Summary",
            "readonly": true,
            "documentation": "Last year summary of account trophy contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_TrophySoloMedalAchievementSettings": {
      "inherit": "CWebServicesTaskResult_TrophySoloMedalAchievementSettings",
      "enums": {},
      "props": {
        "CTrophySoloMedalAchievementSettings": [
          {
            "name": "Settings",
            "readonly": true,
            "documentation": "Settings of a solo medal trophy achievement contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_ZoneList": {
      "inherit": "CWebServicesTaskResult_WSZonePtrList",
      "enums": {},
      "props": {
        "CZone[]": [
          {
            "name": "ZoneList",
            "readonly": true,
            "documentation": "List of zones. Array of CRankingsZone objects."
          }
        ]
      },
      "methods": [
        {
          "name": "GetZone",
          "returns": "CZone",
          "params": [{ "identifier": "Text", "argument": "ZoneId" }],
          "documentation": "Get a zone into the list from a zone id. Must be called after the task has succeeded."
        }
      ],
      "documentation": ""
    },
    "CTaskResult_UserZoneList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "CZone[]": [
          { "name": "ZoneList", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetUserZone",
          "returns": "CZone",
          "params": [{ "identifier": "Text", "argument": "WebServicesUserId" }],
          "documentation": "Get a zone for a user. Must be called after the task has succeeded."
        }
      ],
      "documentation": ""
    },
    "CUserV2Profile": {
      "inherit": "CNod",
      "enums": {
        "EMapEditorMode": ["Ask", "Advanced"],
        "EMapEditorMood": ["Sunrise", "Day", "Sunset", "Night"],
        "EMapEditorDifficulty": ["Simple", "Advanced", "Expert"],
        "ECustomPlayerModels": ["All", "OnlyTextures", "None"],
        "EInputMouseReleaseKey": [
          "LeftAlt",
          "RightAlt",
          "LeftCtrl",
          "RightCtrl"
        ],
        "EPlayerVisibility": ["Hidden", "Ghost", "Opaque"],
        "ERoadsideSpectatorVisibility": ["Never", "SpectatorOnly", "Always"]
      },
      "props": {
        "Boolean": [
          {
            "name": "CanChangePassword",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CanChangeNickName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CanChangeAvatar",
            "readonly": true,
            "documentation": "avatar, horn and podium pose"
          },
          { "name": "CanChangeSkin", "readonly": true, "documentation": "" },
          { "name": "CanChangeZone", "readonly": true, "documentation": "" },
          { "name": "CanChangeGroups", "readonly": true, "documentation": "" },
          {
            "name": "Account_AcceptNews",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Account_EnableAutoConnect",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "User_ForceEmptyPilotSkin",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "User_CombinePrestigeAndSkins",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Custom_EnableAvatars",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Custom_EnableChat",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Custom_EnableUnlimitedHorns",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Editors_MapEditorUseQuickstart",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Editors_MapEditorQuickstartUseGamepad",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Online_AutoSaveReplay",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Online_SaveRoundReplaysSeparately",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Title_IsForbiddenWithParentalLock",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Steam_OpenLinksInSteam",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Steam_SynchonizeWorkshopFiles",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_CrosshairEnableCustomColor",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_AllyEnableCustomColor",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_OppoEnableCustomColor",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_BeaconUseProfileColor",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_UseOldInternalCam",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_UseAlternateCam1",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_UseAlternateCam2",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_ShowSpecialsFeedback",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_AlwaysDisplayRecords",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_AllowChatHiding",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_ColorblindMode",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Inputs_MouseLookInvertY",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Adverts_Enabled", "readonly": false, "documentation": "" },
          {
            "name": "Adverts_UsePersonnalData",
            "readonly": false,
            "documentation": ""
          },
          { "name": "TTS_Enabled", "readonly": false, "documentation": "" },
          { "name": "STT_Enabled", "readonly": false, "documentation": "" },
          {
            "name": "VoiceChat_Loopback",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "VoiceChat_Enabled",
            "readonly": false,
            "documentation": ""
          },
          { "name": "STT_Available", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "Account_Name", "readonly": false, "documentation": "" },
          { "name": "Account_EMail", "readonly": false, "documentation": "" },
          {
            "name": "User_Description",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "User_ClubLinkUrl",
            "readonly": false,
            "documentation": ""
          },
          { "name": "User_Trigram", "readonly": false, "documentation": "" },
          {
            "name": "User_CharacterSkinOptions",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_CrosshairName",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Real": [
          {
            "name": "User_LightTrailHue",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "User_HornPitch",
            "readonly": false,
            "documentation": "Values in range (0.500000-2.000000)"
          },
          {
            "name": "Interface_CrosshairSaturation",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "Interface_CrosshairLinearHue",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "Interface_CrosshairSize",
            "readonly": false,
            "documentation": "Values in range (0.100000-2.000000)"
          },
          {
            "name": "Interface_CrosshairOpacity",
            "readonly": false,
            "documentation": "Values in range (0.100000-1.000000)"
          },
          {
            "name": "Interface_PlayerShieldScale",
            "readonly": false,
            "documentation": "Values in range (0.100000-2.000000)"
          },
          {
            "name": "Interface_AllyLinearHue",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "Interface_OppoLinearHue",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "Interface_BeaconOpacity",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          },
          {
            "name": "Interface_BeaconSize",
            "readonly": false,
            "documentation": "Values in range (0.100000-5.000000)"
          },
          {
            "name": "Interface_BeaconDuration",
            "readonly": false,
            "documentation": "Values in range (0.500000-15.000000)"
          },
          {
            "name": "Inputs_MouseScaleY",
            "readonly": false,
            "documentation": "Values in range (0.100000-3.000000)"
          },
          {
            "name": "Inputs_MouseScaleFreeLook",
            "readonly": false,
            "documentation": "Values in range (0.100000-3.000000)"
          },
          {
            "name": "Inputs_MouseAccel",
            "readonly": false,
            "documentation": "Values in range (0.000000-3.000000)"
          },
          {
            "name": "Inputs_MouseSensitivityDefault",
            "readonly": false,
            "documentation": "Values in range (-1.000000-1.000000)"
          },
          {
            "name": "Inputs_MouseSensitivityLaser",
            "readonly": false,
            "documentation": "Values in range (-1.000000-1.000000)"
          },
          {
            "name": "Inputs_MouseSensitivityDefault_Raw",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Inputs_MouseSensitivityLaser_Raw",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUserV2Profile::ECustomPlayerModels": [
          {
            "name": "Custom_PlayerModels",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUserV2Profile::EMapEditorMode": [
          {
            "name": "Editors_MapEditorMode",
            "readonly": false,
            "documentation": "Favoured way to open the Map Editor"
          }
        ],
        "CUserV2Profile::EMapEditorDifficulty": [
          {
            "name": "Editors_MapEditorQuickstartDifficulty",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUserV2Profile::EMapEditorMood": [
          {
            "name": "Editors_MapEditorQuickstartMood",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUserV2Profile::EPlayerVisibility": [
          {
            "name": "Online_DefaultOpponentVisibility",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Interface_InternalCamLocalPlayerVisibility",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUserV2Profile::ERoadsideSpectatorVisibility": [
          {
            "name": "Online_RoadsideSpectatorVisibility",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Integer": [
          {
            "name": "AddictionLimiter_DailyQuotaMinutes",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUserV2Profile::EInputMouseReleaseKey": [
          {
            "name": "Inputs_MouseReleaseKey",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CVehicleSettings[]": [
          { "name": "Inputs_Vehicles", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Account_ResetChanges",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CTaskResult_StringIntList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Text[]": [{ "name": "Values", "readonly": false, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CMasterServerUser": {
      "inherit": "CNod",
      "enums": {
        "EMasterServerConnectionStatus": [
          "NotConnected",
          "Connecting",
          "Connected",
          "Disconnecting"
        ]
      },
      "props": {
        "Boolean": [
          { "name": "NeedToChangeZone", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "ZoneLevelCount",
            "readonly": true,
            "documentation": "Number of level in the full path of the user zone."
          },
          {
            "name": "MultiInternetPlayTimeLeft",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text": [
          { "name": "Login", "readonly": true, "documentation": "Login." },
          {
            "name": "DisplayName",
            "readonly": true,
            "documentation": "Display name."
          },
          {
            "name": "LastConnectionErrorType",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "LastConnectionErrorCode",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "LastConnectionErrorDescription",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMasterServerUser::EMasterServerConnectionStatus": [
          {
            "name": "ConnectionStatus",
            "readonly": true,
            "documentation": "Connection status: NotConnected, Connecting, Connected or Disconnecting."
          }
        ]
      },
      "methods": [
        {
          "name": "GetZone",
          "returns": "Text",
          "params": [{ "identifier": "Integer", "argument": "ZoneLevel" }],
          "documentation": "Returns the zone path of the indicated level."
        }
      ],
      "documentation": ""
    },
    "CTaskResult_Connect": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_Bool": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Boolean": [{ "name": "Value", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_FriendList": {
      "inherit": "CWebServicesTaskResult_WSFriendList",
      "enums": {},
      "props": {
        "CFriend[]": [
          {
            "name": "FriendList",
            "readonly": true,
            "documentation": "List of friend info contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_Session_Get": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Text": [
          { "name": "SessionId", "readonly": true, "documentation": "" },
          { "name": "ServerLogin", "readonly": true, "documentation": "" },
          { "name": "ServerPassword", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_UserNewsList": {
      "inherit": "CWebServicesTaskResult_WSNewsList",
      "enums": {},
      "props": {
        "CNews[]": [
          { "name": "NewsList", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_UserPrestigeList": {
      "inherit": "CWebServicesTaskResult_WSUserPrestigeList",
      "enums": {},
      "props": {
        "CUserPrestige[]": [
          { "name": "UserPrestigeList", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_UserPrestige": {
      "inherit": "CWebServicesTaskResult_WSUserPrestige",
      "enums": {},
      "props": {
        "CUserPrestige": [
          { "name": "UserPrestige", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "HasUserPrestige", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_PrestigeList": {
      "inherit": "CWebServicesTaskResult_WSPrestigeList",
      "enums": {},
      "props": {
        "CPrestige[]": [
          { "name": "PrestigeList", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_Squad": {
      "inherit": "CWebServicesTaskResult_Squad",
      "enums": {},
      "props": {
        "CSquad": [
          {
            "name": "Squad",
            "readonly": true,
            "documentation": "Squad info contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_StringInt": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "Text": [{ "name": "Value", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_ClubTagList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "GetClubTag",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "WebServicesUserId" }],
          "documentation": "Get a club name for a webservices user id. Must be called after the task has succeeded."
        }
      ],
      "documentation": ""
    },
    "CTaskResult_WSNotification": {
      "inherit": "CWebServicesTaskResult_WSNotification",
      "enums": {},
      "props": {
        "CNotification": [
          {
            "name": "Notification",
            "readonly": true,
            "documentation": "Notification info contained by this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CModuleMenu": {
      "inherit": "CManiaAppTitle",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "Menu_Goto",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "PageId" }],
          "documentation": ""
        },
        {
          "name": "Menu_Back",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Menu_Previous",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Menu_Quit",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CManiaAppEvent": {
      "inherit": "CBaseConstEvent",
      "enums": {
        "EType": [
          "LayerCustomEvent",
          "KeyPress",
          "ExternalCustomEvent",
          "MenuNavigation"
        ],
        "EMenuNavAction": [
          "Up",
          "Right",
          "Left",
          "Down",
          "Select",
          "Cancel",
          "PageUp",
          "PageDown",
          "AppMenu",
          "Action1",
          "Action2",
          "Action3",
          "Action4",
          "ScrollUp",
          "ScrollDown"
        ]
      },
      "props": {
        "CManiaAppEvent::EType": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "CUILayer": [
          { "name": "CustomEventLayer", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "CustomEventType", "readonly": true, "documentation": "" },
          {
            "name": "ExternalEventType",
            "readonly": true,
            "documentation": ""
          },
          { "name": "KeyName", "readonly": true, "documentation": "" }
        ],
        "Text[]": [
          { "name": "CustomEventData", "readonly": false, "documentation": "" },
          {
            "name": "ExternalEventData",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CManiaAppEvent::EMenuNavAction": [
          { "name": "MenuNavAction", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "IsActionAutoRepeat",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "KeyCode", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTitleEdition": {
      "inherit": "CNod",
      "enums": { "EDrive": ["TitleReadable", "Title", "User"] },
      "props": {
        "CTitle": [
          { "name": "TitleMaker", "readonly": true, "documentation": "" }
        ],
        "CPackCreator": [
          {
            "name": "PackCreator",
            "readonly": true,
            "documentation": "PackCreator - only available when the title author is the current logged user."
          }
        ],
        "Text": [
          { "name": "EditedTitleId", "readonly": true, "documentation": "" }
        ],
        "CPackCreatorTitleInfo": [
          { "name": "EditedTitleInfo", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "Dialog_IsFinished",
            "readonly": true,
            "documentation": ""
          },
          { "name": "Dialog_Success", "readonly": true, "documentation": "" },
          { "name": "Dialog_Aborted", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "File_ImportFromUser",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": "Will copy file 'FileName' from the UserDir to the TitleDir, including its dependencies."
        },
        {
          "name": "File_Move",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "OrigName" },
            { "identifier": "Text", "argument": "DestNameOrFolder" },
            { "identifier": "Boolean", "argument": "KeepOriginalCopy" }
          ],
          "documentation": "Will move or copy file 'OrigName' to 'DestName'. If DestName is a '\\' terminated folder path, keeps the orginial short name."
        },
        {
          "name": "File_Exists",
          "returns": "Boolean",
          "params": [
            { "identifier": "Text", "argument": "FileName" },
            { "identifier": "CTitleEdition::EDrive", "argument": "InDrive" }
          ],
          "documentation": ""
        },
        {
          "name": "File_Delete",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Name" }],
          "documentation": ""
        },
        {
          "name": "File_WriteText",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "FileName" },
            { "identifier": "Text", "argument": "Text" }
          ],
          "documentation": ""
        },
        {
          "name": "File_ReadText",
          "returns": "Text",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": ""
        },
        {
          "name": "Dialog_ImportFiles",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "OpenTitleFolderInExplorer",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ReloadTitleDesc",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SaveTitleDesc",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetTitleCampaign",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "CampaignNum" },
            { "identifier": "Text", "argument": "ScoreContext" },
            {
              "identifier": "Text",
              "argument": "MapsFolderNameOrPlayListName"
            },
            { "identifier": "Boolean", "argument": "OfficialRecordEnabled" }
          ],
          "documentation": "nb: The maps from the campaign are automatically added to the pack, no need to Build_AddFile()."
        },
        {
          "name": "SetTitleCampaign",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "CampaignNum" },
            { "identifier": "Text", "argument": "ScoreContext" },
            {
              "identifier": "Text",
              "argument": "MapsFolderNameOrPlayListName"
            },
            { "identifier": "Boolean", "argument": "OfficialRecordEnabled" },
            { "identifier": "Boolean", "argument": "DisableUnlockSystem" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CNotificationsConsumer": {
      "inherit": "CNod",
      "enums": { "EFilterPriority": ["All", "MoreThanMemo", "MoreThanNotice"] },
      "props": {
        "CNotificationsConsumerEvent[]": [
          { "name": "Events", "readonly": true, "documentation": "Events" }
        ],
        "CNotificationsConsumerNotification[]": [
          {
            "name": "Notifications",
            "readonly": true,
            "documentation": "List of the Notifications."
          },
          {
            "name": "FilteredNotifications",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CNotificationsConsumer::EFilterPriority": [
          { "name": "Filter_Priority", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMatchSettingsManager": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Boolean": [
          {
            "name": "MatchSettings_EditScriptSettings_Ongoing",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMatchSettings[]": [
          {
            "name": "MatchSettings",
            "readonly": true,
            "documentation": "Array of the matchsettings"
          },
          {
            "name": "MatchSettings_File",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MatchSettings_Temp",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "MatchSettings_RefreshFiles",
          "returns": "Void",
          "params": [],
          "documentation": "Clear all matchsettings files and reload them from disk. Be aware that any non-saved changes will be lost. Temporary matchsettings are not changed."
        },
        {
          "name": "MatchSettings_FindFile",
          "returns": "CMatchSettings",
          "params": [{ "identifier": "Text", "argument": "FilePath" }],
          "documentation": ""
        },
        {
          "name": "MatchSettings_CreateFile",
          "returns": "CMatchSettings",
          "params": [{ "identifier": "Text", "argument": "FilePath" }],
          "documentation": "Create a new matchsettings file."
        },
        {
          "name": "MatchSettings_CreateTemp",
          "returns": "CMatchSettings",
          "params": [],
          "documentation": "Create a new temporary matchsettings. Those will be lost when the game is closed."
        },
        {
          "name": "MatchSettings_Save",
          "returns": "Void",
          "params": [
            { "identifier": "CMatchSettings", "argument": "MatchSettings" }
          ],
          "documentation": "Save a matchsettings file."
        },
        {
          "name": "MatchSettings_ReloadFromFile",
          "returns": "Void",
          "params": [
            { "identifier": "CMatchSettings", "argument": "MatchSettings" }
          ],
          "documentation": ""
        },
        {
          "name": "MatchSettings_SaveAs",
          "returns": "CMatchSettings",
          "params": [
            { "identifier": "Text", "argument": "FilePath" },
            { "identifier": "CMatchSettings", "argument": "MatchSettings" }
          ],
          "documentation": "Save a matchsettings to a new file."
        },
        {
          "name": "MatchSettings_EditScriptSettings",
          "returns": "Void",
          "params": [
            { "identifier": "CMatchSettings", "argument": "MatchSettings" }
          ],
          "documentation": ""
        },
        {
          "name": "MatchSettings_Remove",
          "returns": "Void",
          "params": [
            { "identifier": "CMatchSettings", "argument": "MatchSettings" }
          ],
          "documentation": "Remove a matchsetting file (or only the matchsetting for temp ones)."
        }
      ],
      "documentation": ""
    },
    "CVoiceChatConfig": {
      "inherit": "",
      "enums": {
        "ESyncMode": ["Default", "Disabled", "Manual", "Clan", "Squad"]
      },
      "props": {
        "CGameUserVoiceChat::EMuteSetting": [
          {
            "name": "NewRemoteUser_DefaultMuteSetting",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CVoiceChatConfig::ESyncMode": [
          { "name": "SyncMode", "readonly": false, "documentation": "" }
        ],
        "Text": [
          { "name": "Manual_Channel", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Manual_ClearUsers",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Manual_UserAdd_Proc",
          "returns": "CGameUserVoiceChat",
          "params": [{ "identifier": "Text", "argument": "WebServicesUserId" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMapEditorPluginEvent": {
      "inherit": "CManiaAppEvent",
      "enums": {
        "Type": [
          "LayerCustomEvent",
          "KeyPress",
          "(reserved)",
          "MenuNavigation",
          "CursorSelectionBegin",
          "CursorSelectionEnd",
          "CursorChange",
          "MapModified",
          "EditorInput",
          "MapSavedOrSaveCancelled",
          "EditAnchor",
          "EditObjectives",
          "StartValidation",
          "StartTest"
        ],
        "EInput": [
          "Unknown",
          "Menu",
          "SwitchToRace",
          "Undo",
          "Redo",
          "CursorUp",
          "CursorRight",
          "CursorDown",
          "CursorLeft",
          "CursorRaise",
          "CursorLower",
          "CursorTurn",
          "CursorTurnSlightly",
          "CursorTurnSlightlyAntiClockwise",
          "CursorTiltLeft",
          "CursorTiltRight",
          "CursorPick",
          "CursorPlace",
          "CursorDelete",
          "CameraUp",
          "CameraRight",
          "CameraDown",
          "CameraLeft",
          "CameraZoomNext",
          "Camera0",
          "Camera1",
          "Camera3",
          "Camera7",
          "Camera9",
          "PivotChange",
          "IconUp",
          "IconRight",
          "IconDown",
          "IconLeft",
          "RemoveAll",
          "Save",
          "SelectAll",
          "Copy",
          "Cut",
          "Paste"
        ]
      },
      "props": {
        "CMapEditorPluginEvent::Type": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "CMapEditorPluginEvent::EInput": [
          { "name": "Input", "readonly": true, "documentation": "" }
        ],
        "Ident": [
          {
            "name": "EditedAnchorDataId",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          { "name": "IsFromPad", "readonly": true, "documentation": "" },
          { "name": "IsFromMouse", "readonly": true, "documentation": "" },
          { "name": "IsFromKeyboard", "readonly": true, "documentation": "" },
          {
            "name": "OnlyScriptMetadataModified",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MapSavedOrSaveCancelled",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMapEditorInventory": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CMapEditorInventoryDirectory": [
          { "name": "CurrentRootNode", "readonly": true, "documentation": "" },
          { "name": "CurrentDirectory", "readonly": true, "documentation": "" }
        ],
        "CMapEditorInventoryNode": [
          {
            "name": "CurrentSelectedNode",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CMapEditorInventoryNode[]": [
          { "name": "RootNodes", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "EnterDirectory",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "LeaveDirectory",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SelectArticle",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorInventoryArticle",
              "argument": "NodeArticle"
            }
          ],
          "documentation": ""
        },
        {
          "name": "OpenDirectory",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorInventoryDirectory",
              "argument": "NodeDirectory"
            }
          ],
          "documentation": ""
        },
        {
          "name": "SelectNode",
          "returns": "Void",
          "params": [
            { "identifier": "CMapEditorInventoryNode", "argument": "Node" }
          ],
          "documentation": ""
        },
        {
          "name": "OpenBrotherDirectory",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "NextOrElsePrevious" }
          ],
          "documentation": ""
        },
        {
          "name": "SelectBrotherArticle",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "NextOrElsePrevious" }
          ],
          "documentation": ""
        },
        {
          "name": "SelectBrotherNode",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "NextOrElsePrevious" }
          ],
          "documentation": ""
        },
        {
          "name": "GetDirectoryAfter",
          "returns": "CMapEditorInventoryDirectory",
          "params": [
            { "identifier": "CMapEditorInventoryNode", "argument": "Node" }
          ],
          "documentation": ""
        },
        {
          "name": "GetDirectoryBefore",
          "returns": "CMapEditorInventoryDirectory",
          "params": [
            { "identifier": "CMapEditorInventoryNode", "argument": "Node" }
          ],
          "documentation": ""
        },
        {
          "name": "GetArticleAfter",
          "returns": "CMapEditorInventoryArticle",
          "params": [
            { "identifier": "CMapEditorInventoryNode", "argument": "Node" }
          ],
          "documentation": ""
        },
        {
          "name": "GetArticleBefore",
          "returns": "CMapEditorInventoryArticle",
          "params": [
            { "identifier": "CMapEditorInventoryNode", "argument": "Node" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CBlockModel": {
      "inherit": "CCollector",
      "enums": {
        "EWayPointType": [
          "Start",
          "Finish",
          "Checkpoint",
          "None",
          "StartFinish",
          "Dispenser"
        ]
      },
      "props": {
        "Text": [{ "name": "Name", "readonly": true, "documentation": "" }],
        "Boolean": [
          { "name": "IsRoad", "readonly": true, "documentation": "" },
          { "name": "IsTerrain", "readonly": true, "documentation": "" },
          { "name": "IsPodium", "readonly": true, "documentation": "" },
          { "name": "NoRespawn", "readonly": true, "documentation": "" },
          { "name": "IsClip", "readonly": true, "documentation": "" }
        ],
        "CBlockModel::EWayPointType": [
          { "name": "WaypointType", "readonly": true, "documentation": "" }
        ],
        "CBlockModelVariantGround": [
          { "name": "VariantGround", "readonly": true, "documentation": "" }
        ],
        "CBlockModelVariantAir": [
          { "name": "VariantAir", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMacroblockModel": {
      "inherit": "CCollector",
      "enums": {},
      "props": {
        "Boolean": [
          { "name": "IsGround", "readonly": true, "documentation": "" },
          { "name": "HasStart", "readonly": true, "documentation": "" },
          { "name": "HasFinish", "readonly": true, "documentation": "" },
          { "name": "HasCheckpoint", "readonly": true, "documentation": "" },
          { "name": "HasMultilap", "readonly": true, "documentation": "" }
        ],
        "CBlockModel": [
          {
            "name": "GeneratedBlockModel",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text": [{ "name": "Name", "readonly": true, "documentation": "" }]
      },
      "methods": [
        {
          "name": "ClearScriptMetadata",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CBlock": {
      "inherit": "CNod",
      "enums": { "CardinalDirections": ["North", "East", "South", "West"] },
      "props": {
        "Boolean": [
          { "name": "CanHaveAnchor", "readonly": true, "documentation": "" }
        ],
        "Int3": [{ "name": "Coord", "readonly": true, "documentation": "" }],
        "CMapEditorPlugin::CardinalDirections": [
          { "name": "Dir", "readonly": true, "documentation": "" }
        ],
        "CBlock::CardinalDirections": [
          { "name": "Direction", "readonly": true, "documentation": "" }
        ],
        "CBlockUnit[]": [
          { "name": "BlockUnits", "readonly": true, "documentation": "" }
        ],
        "CBlockModel": [
          { "name": "BlockModel", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "UseDefaultAnchor",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "UseCustomAnchor",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "IsGhostBlock",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CGameItemModel": {
      "inherit": "CCollector",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CItemAnchor": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Vec3": [{ "name": "Position", "readonly": true, "documentation": "" }],
        "CGameItemModel": [
          { "name": "ItemModel", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMacroblockInstance": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CMacroblockModel": [
          { "name": "MacroblockModel", "readonly": true, "documentation": "" }
        ],
        "CBlockClipList": [
          { "name": "ClipList", "readonly": true, "documentation": "" }
        ],
        "CMapEditorPlugin::CardinalDirections": [
          { "name": "Dir", "readonly": false, "documentation": "" }
        ],
        "Int3": [{ "name": "Coord", "readonly": true, "documentation": "" }],
        "Integer": [
          { "name": "Order", "readonly": false, "documentation": "" },
          { "name": "UserData", "readonly": false, "documentation": "" }
        ],
        "Int3[]": [
          { "name": "UnitCoords", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetSize",
          "returns": "Int3",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CAnchorData": {
      "inherit": "CNod",
      "enums": {
        "EWaypointType": [
          "Start",
          "Finish",
          "Checkpoint",
          "None",
          "StartFinish",
          "Dispenser"
        ]
      },
      "props": {
        "Text": [
          { "name": "DefaultTag", "readonly": true, "documentation": "" },
          { "name": "Tag", "readonly": false, "documentation": "" }
        ],
        "Integer": [
          { "name": "DefaultOrder", "readonly": true, "documentation": "" },
          { "name": "Order", "readonly": false, "documentation": "" }
        ],
        "CAnchorData::EWaypointType": [
          { "name": "WaypointType", "readonly": true, "documentation": "" }
        ],
        "Vec3": [{ "name": "Position", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CBlockClipList": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CBlockClip[]": [
          { "name": "Clips", "readonly": true, "documentation": "" }
        ],
        "Int3": [{ "name": "Size", "readonly": true, "documentation": "" }]
      },
      "methods": [
        {
          "name": "SetClipListFromMacroblock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroBlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "SetClipListFromMacroblock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CMacroblockModel", "argument": "MacroBlockModel" }
          ],
          "documentation": ""
        },
        {
          "name": "SetClipListFromBlock",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockModel", "argument": "BlockModel" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "SetClipListFromBlock",
          "returns": "Boolean",
          "params": [{ "identifier": "CBlockModel", "argument": "BlockModel" }],
          "documentation": ""
        },
        {
          "name": "CreateAndAddClip",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Int3", "argument": "Coord" },
            { "identifier": "Int3", "argument": "Offset" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            },
            { "identifier": "Integer", "argument": "ClipId" }
          ],
          "documentation": ""
        },
        {
          "name": "SetFromClipList",
          "returns": "Boolean",
          "params": [
            { "identifier": "CBlockClipList", "argument": "ClipList" },
            { "identifier": "Int3", "argument": "Coord" },
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Dir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveClip",
          "returns": "Void",
          "params": [{ "identifier": "CBlockClip", "argument": "Clip" }],
          "documentation": ""
        },
        {
          "name": "ClearClips",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Destroy",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CBlockClip": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "Name", "readonly": true, "documentation": "" }],
        "CMapEditorPlugin::CardinalDirections": [
          { "name": "Dir", "readonly": false, "documentation": "" }
        ],
        "Int3": [
          { "name": "Coord", "readonly": true, "documentation": "" },
          { "name": "Offset", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "ClipId", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetConnectableCoord",
          "returns": "Int3",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMapEditorCamera": {
      "inherit": "CNod",
      "enums": {
        "EZoomLevel": ["Close", "Medium", "Far"],
        "ECameraVStep": ["Low", "MediumLow", "Medium", "MediumHigh", "High"]
      },
      "props": {},
      "methods": [
        {
          "name": "ReleaseLock",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CenterOnCursor",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "WatchStart",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "WatchClosestFinishLine",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "WatchClosestCheckpoint",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "WatchWholeMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "WatchCustomSelection",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MoveToMapCenter",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetLock",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CanUse",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "IgnoreCameraCollisions",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "IgnoreCameraCollisions" }
          ],
          "documentation": ""
        },
        {
          "name": "TurnH",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Clockwise" }],
          "documentation": ""
        },
        {
          "name": "TurnH",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "Clockwise" },
            { "identifier": "Boolean", "argument": "HalfSteps" }
          ],
          "documentation": ""
        },
        {
          "name": "TurnH",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "Clockwise" },
            { "identifier": "Boolean", "argument": "HalfSteps" },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "TurnV",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "UpOrElseDown" }],
          "documentation": ""
        },
        {
          "name": "TurnV",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "UpOrElseDown" },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "Move",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorPlugin::RelativeDirections",
              "argument": "RelativeDir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "FollowCursor",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Follow" }],
          "documentation": ""
        },
        {
          "name": "CenterOnCursor",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Smooth" }],
          "documentation": ""
        },
        {
          "name": "MoveToMapCenter",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Smooth" }],
          "documentation": ""
        },
        {
          "name": "Watch",
          "returns": "Void",
          "params": [{ "identifier": "CBlock", "argument": "Block" }],
          "documentation": ""
        },
        {
          "name": "Watch",
          "returns": "Void",
          "params": [
            { "identifier": "CBlock", "argument": "Block" },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "Watch",
          "returns": "Void",
          "params": [
            { "identifier": "CMacroblockInstance", "argument": "Macroblock" }
          ],
          "documentation": ""
        },
        {
          "name": "Watch",
          "returns": "Void",
          "params": [
            { "identifier": "CMacroblockInstance", "argument": "Macroblock" },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "Watch",
          "returns": "Void",
          "params": [{ "identifier": "CBlockClip", "argument": "Clip" }],
          "documentation": ""
        },
        {
          "name": "Watch",
          "returns": "Void",
          "params": [
            { "identifier": "CBlockClip", "argument": "Clip" },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "WatchStart",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Smooth" }],
          "documentation": ""
        },
        {
          "name": "WatchClosestFinishLine",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Smooth" }],
          "documentation": ""
        },
        {
          "name": "WatchClosestCheckpoint",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Smooth" }],
          "documentation": ""
        },
        {
          "name": "WatchWholeMap",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Smooth" }],
          "documentation": ""
        },
        {
          "name": "WatchMacroblocks",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "UserData" }],
          "documentation": ""
        },
        {
          "name": "WatchMacroblocks",
          "returns": "Void",
          "params": [
            { "identifier": "Integer", "argument": "UserData" },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "ZoomIn",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Loop" }],
          "documentation": ""
        },
        {
          "name": "ZoomIn",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "Loop" },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "ZoomOut",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Loop" }],
          "documentation": ""
        },
        {
          "name": "ZoomOut",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "Loop" },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "Zoom",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorCamera::EZoomLevel",
              "argument": "Level"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Zoom",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorCamera::EZoomLevel",
              "argument": "Level"
            },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "Look",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections8",
              "argument": "Direction"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Look",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections8",
              "argument": "Direction"
            },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "Look",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Direction"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Look",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "Direction"
            },
            { "identifier": "Boolean", "argument": "Smooth" }
          ],
          "documentation": ""
        },
        {
          "name": "SetVStep",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorCamera::ECameraVStep",
              "argument": "Step"
            }
          ],
          "documentation": ""
        },
        {
          "name": "WatchCustomSelection",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "WatchCustomSelection" }
          ],
          "documentation": ""
        },
        {
          "name": "ActivateScrollRotateMode",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "ActivateScrollRotateMode" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMapEditorCursor": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Int3": [{ "name": "Coord", "readonly": false, "documentation": "" }],
        "CMapEditorPlugin::CardinalDirections": [
          { "name": "Dir", "readonly": false, "documentation": "" }
        ],
        "CBlockModel": [
          { "name": "BlockModel", "readonly": false, "documentation": "" },
          {
            "name": "TerrainBlockModel",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CMacroblockModel": [
          { "name": "MacroblockModel", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "Brightness", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "HideDirectionalArrow",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "ReleaseLock",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "MoveToCameraTarget",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "ResetCustomRGB",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetLock",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CanUse",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Raise",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Lower",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "FollowCameraTarget",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Follow" }],
          "documentation": ""
        },
        {
          "name": "Rotate",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "CWOrCCW" }],
          "documentation": ""
        },
        {
          "name": "Move",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections",
              "argument": "CardinalDir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Move",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorPlugin::CardinalDirections8",
              "argument": "CardinalDir8"
            }
          ],
          "documentation": ""
        },
        {
          "name": "Move",
          "returns": "Void",
          "params": [
            {
              "identifier": "CMapEditorPlugin::RelativeDirections",
              "argument": "RelativeDir"
            }
          ],
          "documentation": ""
        },
        {
          "name": "DisableMouseDetection",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Disable" }],
          "documentation": ""
        },
        {
          "name": "CanPlace",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "IsCustomRGBActivated",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "IsCurrentItemAnimated",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CurrentMacroblockHasAnimatedItem",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "CurrentSelectionHasAnimatedItem",
          "returns": "Boolean",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetCustomRGB",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Color" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMapEditorConnectResults": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Boolean": [
          { "name": "CanPlace", "readonly": false, "documentation": "" }
        ],
        "Int3": [{ "name": "Coord", "readonly": false, "documentation": "" }],
        "CMapEditorPlugin::CardinalDirections": [
          { "name": "Dir", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CUIConfigMarker": {
      "inherit": "CNod",
      "enums": {
        "EAnchorType": [
          "Invalid",
          "Position",
          "Player",
          "Entity",
          "Landmark",
          "GhostInstance"
        ],
        "EMiniMapVisibility": ["Never", "Always", "WhenInFrame"],
        "EHudVisibility": [
          "Never",
          "Always",
          "WhenInFrustum",
          "WhenVisible",
          "WhenInMiddleOfScreen"
        ]
      },
      "props": {
        "CUIConfigMarker::EAnchorType": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsTurning", "readonly": false, "documentation": "" },
          { "name": "ShowArmor", "readonly": false, "documentation": "" },
          {
            "name": "HideOnSelf",
            "readonly": false,
            "documentation": "Hide the marker if it is on the current player.\nOnly if Type is EAnchorType::Player ."
          }
        ],
        "Text": [
          { "name": "Label", "readonly": false, "documentation": "" },
          { "name": "Icon", "readonly": false, "documentation": "" },
          { "name": "ImageUrl", "readonly": false, "documentation": "" },
          { "name": "ManialinkFrameId", "readonly": false, "documentation": "" }
        ],
        "Vec3": [
          { "name": "Box", "readonly": false, "documentation": "" },
          { "name": "Color", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "DistMin", "readonly": false, "documentation": "" },
          {
            "name": "DistMax",
            "readonly": false,
            "documentation": "DistMax is not used to fade out the marker when spectating"
          },
          { "name": "Gauge", "readonly": false, "documentation": "" }
        ],
        "CUIConfigMarker::EMiniMapVisibility": [
          {
            "name": "MiniMapVisibility",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CUIConfigMarker::EHudVisibility": [
          { "name": "HudVisibility", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMapLandmark": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Ident": [
          {
            "name": "MarkerId",
            "readonly": true,
            "documentation": "Use this instead of Id when filling CUIConfig.MarkersXML"
          }
        ],
        "Text": [{ "name": "Tag", "readonly": true, "documentation": "" }],
        "Integer": [{ "name": "Order", "readonly": true, "documentation": "" }],
        "Vec3": [{ "name": "Position", "readonly": true, "documentation": "" }],
        "CMapSector": [
          { "name": "Sector", "readonly": true, "documentation": "" }
        ],
        "CMapWaypoint": [
          { "name": "Waypoint", "readonly": true, "documentation": "" }
        ],
        "CMapSpawn": [
          { "name": "PlayerSpawn", "readonly": true, "documentation": "" }
        ],
        "CMapBotPath": [
          { "name": "BotPath", "readonly": true, "documentation": "" }
        ],
        "CMapBotSpawn": [
          { "name": "BotSpawn", "readonly": true, "documentation": "" }
        ],
        "CMapObjectAnchor": [
          { "name": "ObjectAnchor", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CUIConfigEvent": {
      "inherit": "CBaseEvent",
      "enums": {
        "EType": [
          "Unknown",
          "OnModuleCustomEvent",
          "OnModuleShowRequest",
          "OnModuleHideRequest",
          "OnModuleStorePurchase",
          "OnModuleInventoryDrop",
          "OnModuleInventoryEquip",
          "OnLayerCustomEvent"
        ],
        "EModuleType": [
          "Undefined",
          "Hud",
          "Inventory",
          "Store",
          "ScoresTable",
          "Equipment",
          "MenuBase",
          "MenuPage",
          "Chrono",
          "SpeedMeter",
          "PlayerState",
          "TeamState"
        ]
      },
      "props": {
        "CUIConfigEvent::EType": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "CUIConfig": [{ "name": "UI", "readonly": true, "documentation": "" }],
        "CUIConfigEvent::EModuleType": [
          { "name": "ModuleType", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "Param1", "readonly": true, "documentation": "" },
          { "name": "CustomEventType", "readonly": true, "documentation": "" },
          { "name": "ItemUrl", "readonly": true, "documentation": "" }
        ],
        "Text[]": [
          { "name": "Param2", "readonly": false, "documentation": "" },
          { "name": "CustomEventData", "readonly": false, "documentation": "" }
        ],
        "CUILayer": [
          { "name": "CustomEventLayer", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "Quantity", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CServerInfo": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "ServerName", "readonly": true, "documentation": "" },
          { "name": "ServerLogin", "readonly": true, "documentation": "" },
          { "name": "JoinLink", "readonly": true, "documentation": "" },
          { "name": "Comment", "readonly": true, "documentation": "" },
          {
            "name": "ServerVersionBuild",
            "readonly": true,
            "documentation": ""
          },
          { "name": "ModeName", "readonly": true, "documentation": "" },
          {
            "name": "SendToServerAfterMatchUrl",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "PlayerCount", "readonly": true, "documentation": "" },
          { "name": "MaxPlayerCount", "readonly": true, "documentation": "" },
          { "name": "SpectatorCount", "readonly": true, "documentation": "" },
          {
            "name": "MaxSpectatorCount",
            "readonly": true,
            "documentation": ""
          },
          { "name": "NbChallenges", "readonly": true, "documentation": "" },
          { "name": "ViewerCount", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "PlayersLevelMin", "readonly": true, "documentation": "" },
          { "name": "PlayersLevelAvg", "readonly": true, "documentation": "" },
          { "name": "PlayersLevelMax", "readonly": true, "documentation": "" },
          {
            "name": "LadderServerLimitMax",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "LadderServerLimitMin",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text[]": [
          { "name": "PlayerNames", "readonly": false, "documentation": "" },
          { "name": "ChallengeNames", "readonly": false, "documentation": "" },
          { "name": "ChallengeIds", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "HasBuddies", "readonly": true, "documentation": "" },
          { "name": "IsFavourite", "readonly": true, "documentation": "" },
          { "name": "IsLobbyServer", "readonly": true, "documentation": "" },
          { "name": "IsPrivate", "readonly": true, "documentation": "" },
          {
            "name": "IsPrivateForSpectator",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "IsMapDownloadAllowed",
            "readonly": true,
            "documentation": ""
          },
          { "name": "IsTeamMode", "readonly": true, "documentation": "" },
          {
            "name": "IsDisableChangeTeams",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CXmlRpcEvent": {
      "inherit": "CBaseConstEvent",
      "enums": { "EType": ["Unknown", "Callback", "CallbackArray"] },
      "props": {
        "CXmlRpcEvent::EType": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "Param1", "readonly": true, "documentation": "" },
          { "name": "Param2", "readonly": true, "documentation": "" },
          { "name": "ParamArray1", "readonly": true, "documentation": "" }
        ],
        "Text[]": [
          { "name": "ParamArray2", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTmRaceResultNod": {
      "inherit": "CNod",
      "enums": {
        "ETmRaceResultCriteria": [
          "Time",
          "Stunts",
          "NbRespawns",
          "CheckpointsProgress",
          "None"
        ]
      },
      "props": {
        "Integer": [
          { "name": "Time", "readonly": false, "documentation": "" },
          { "name": "Score", "readonly": false, "documentation": "" },
          { "name": "NbRespawns", "readonly": false, "documentation": "" }
        ],
        "Ident": [
          { "name": "SpawnLandmarkId", "readonly": false, "documentation": "" }
        ],
        "Integer[]": [
          { "name": "Checkpoints", "readonly": false, "documentation": "" }
        ],
        "Ident[]": [
          {
            "name": "CheckpointLandmarkIds",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "Compare",
          "returns": "Integer",
          "params": [
            { "identifier": "CTmRaceResultNod", "argument": "Other" },
            {
              "identifier": "CTmRaceResultNod::ETmRaceResultCriteria",
              "argument": "Criteria"
            }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CNotification": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "Type", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CModulePlaygroundHud": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CModulePlaygroundInventory": [
          { "name": "Inventory", "readonly": false, "documentation": "" }
        ],
        "CModulePlaygroundStore": [
          { "name": "Store", "readonly": false, "documentation": "" }
        ],
        "CModulePlaygroundScoresTable": [
          { "name": "ScoresTable", "readonly": false, "documentation": "" }
        ],
        "CModulePlaygroundChrono": [
          { "name": "Chrono", "readonly": false, "documentation": "" }
        ],
        "CModulePlaygroundSpeedMeter": [
          { "name": "SpeedMeter", "readonly": false, "documentation": "" }
        ],
        "CModulePlaygroundPlayerState": [
          { "name": "PlayerState", "readonly": false, "documentation": "" }
        ],
        "CModulePlaygroundTeamState": [
          { "name": "TeamState", "readonly": false, "documentation": "" }
        ],
        "CModulePlayground[]": [
          { "name": "Modules", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SwitchContext",
          "returns": "Void",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "ContextName" }
          ],
          "documentation": ""
        },
        {
          "name": "SetDefaultContext",
          "returns": "Void",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "RetrieveModuleId",
          "returns": "Ident",
          "params": [{ "identifier": "Text", "argument": "ModuleName" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CTaskResult_AccountTrophyGainList": {
      "inherit": "CWebServicesTaskResult_AccountTrophyGainList",
      "enums": {},
      "props": {
        "CAccountTrophyGain[]": [
          {
            "name": "AccountTrophyGainList",
            "readonly": true,
            "documentation": "List of account trophy gain contained in this result."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CModeTurretManager": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CModeTurret[]": [
          { "name": "Turrets", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "MapTurrets_Reset",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Turret_Create",
          "returns": "CModeTurret",
          "params": [
            { "identifier": "Ident", "argument": "ModelId" },
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Vec3", "argument": "Direction" },
            { "identifier": "Integer", "argument": "Clan" },
            { "identifier": "CPlayer", "argument": "OwnerPlayer" }
          ],
          "documentation": ""
        },
        {
          "name": "Turret_CreateWithOwner",
          "returns": "CModeTurret",
          "params": [
            { "identifier": "Ident", "argument": "ModelId" },
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Vec3", "argument": "Direction" },
            { "identifier": "Vec3", "argument": "Up" },
            { "identifier": "Integer", "argument": "Clan" },
            { "identifier": "Ident", "argument": "OwnerId" }
          ],
          "documentation": ""
        },
        {
          "name": "Turret_CreateWithOwner",
          "returns": "CModeTurret",
          "params": [
            { "identifier": "Ident", "argument": "ModelId" },
            { "identifier": "Vec3", "argument": "Position" },
            { "identifier": "Vec3", "argument": "Direction" },
            { "identifier": "Vec3", "argument": "Up" },
            { "identifier": "Integer", "argument": "Clan" },
            { "identifier": "Ident", "argument": "OwnerId" },
            { "identifier": "Boolean", "argument": "AutoAimOn" },
            { "identifier": "Boolean", "argument": "AutoTriggerOn" }
          ],
          "documentation": ""
        },
        {
          "name": "Turret_GetPosition",
          "returns": "Vec3",
          "params": [{ "identifier": "CModeTurret", "argument": "Turret" }],
          "documentation": ""
        },
        {
          "name": "Turret_Destroy",
          "returns": "Void",
          "params": [{ "identifier": "CModeTurret", "argument": "Turret" }],
          "documentation": ""
        },
        {
          "name": "Turret_DestroyAll",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Turret_Activate",
          "returns": "Void",
          "params": [{ "identifier": "CModeTurret", "argument": "Turret" }],
          "documentation": ""
        },
        {
          "name": "Turret_Deactivate",
          "returns": "Void",
          "params": [{ "identifier": "CModeTurret", "argument": "Turret" }],
          "documentation": ""
        },
        {
          "name": "Turret_SetIsAutomatic",
          "returns": "Void",
          "params": [
            { "identifier": "CModeTurret", "argument": "Turret" },
            { "identifier": "Boolean", "argument": "IsAuto" }
          ],
          "documentation": ""
        },
        {
          "name": "Turret_Auto_SetAimAnticipation",
          "returns": "Void",
          "params": [
            { "identifier": "CModeTurret", "argument": "Turret" },
            { "identifier": "Real", "argument": "AimAnticipationMs" }
          ],
          "documentation": ""
        },
        {
          "name": "Turret_Auto_SetFirePeriod",
          "returns": "Void",
          "params": [
            { "identifier": "CModeTurret", "argument": "Turret" },
            { "identifier": "Integer", "argument": "FirePeriodMs" }
          ],
          "documentation": ""
        },
        {
          "name": "Turret_Auto_SetTargetDetectionFov",
          "returns": "Void",
          "params": [
            { "identifier": "CModeTurret", "argument": "Turret" },
            { "identifier": "Real", "argument": "DectectionFOVDeg" }
          ],
          "documentation": ""
        },
        {
          "name": "Turret_Auto_SetTargetDetectionRadius",
          "returns": "Void",
          "params": [
            { "identifier": "CModeTurret", "argument": "Turret" },
            { "identifier": "Real", "argument": "DetectionRadius" }
          ],
          "documentation": ""
        },
        {
          "name": "Turret_Manual_SetTargetPos",
          "returns": "Void",
          "params": [
            { "identifier": "CModeTurret", "argument": "Turret" },
            { "identifier": "Vec3", "argument": "TargetPos" }
          ],
          "documentation": ""
        },
        {
          "name": "Turret_Manual_Fire",
          "returns": "Void",
          "params": [{ "identifier": "CModeTurret", "argument": "Turret" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModeVehicleManager": {
      "inherit": "CNod",
      "enums": {
        "EArmorUse": ["Self", "Group", "Owner", "Children", "Mine"],
        "ESlotType": ["Driver", "Passenger"]
      },
      "props": {
        "CModeVehicle[]": [
          { "name": "Vehicles", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "MapVehicles_Reset",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "DestroyAllVehicles",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Vehicle_Create",
          "returns": "CModeVehicle",
          "params": [
            { "identifier": "Ident", "argument": "ModelId" },
            { "identifier": "Integer", "argument": "Clan" },
            { "identifier": "Integer", "argument": "Armor" },
            {
              "identifier": "CModeVehicleManager::EArmorUse",
              "argument": "ArmorUse"
            },
            { "identifier": "CMapSpawn", "argument": "Spawn" }
          ],
          "documentation": ""
        },
        {
          "name": "Vehicle_Create",
          "returns": "CModeVehicle",
          "params": [
            { "identifier": "Ident", "argument": "ModelId" },
            { "identifier": "Vec3", "argument": "Offset" },
            { "identifier": "Integer", "argument": "Armor" },
            {
              "identifier": "CModeVehicleManager::EArmorUse",
              "argument": "ArmorUse"
            },
            { "identifier": "CModeVehicle", "argument": "Owner" }
          ],
          "documentation": ""
        },
        {
          "name": "Vehicle_Destroy",
          "returns": "Void",
          "params": [{ "identifier": "CModeVehicle", "argument": "Vehicle" }],
          "documentation": ""
        },
        {
          "name": "Vehicle_Assign_AutoPilot",
          "returns": "Void",
          "params": [
            { "identifier": "CModeVehicle", "argument": "Vehicle" },
            { "identifier": "Text", "argument": "ModelName" }
          ],
          "documentation": ""
        },
        {
          "name": "Vehicle_Assign_AutoPilot",
          "returns": "Void",
          "params": [
            { "identifier": "CModeVehicle", "argument": "Vehicle" },
            { "identifier": "Text", "argument": "ModelName" },
            { "identifier": "Boolean", "argument": "LoopPath" }
          ],
          "documentation": ""
        },
        {
          "name": "Vehicle_SetTrailVisible",
          "returns": "Void",
          "params": [
            { "identifier": "CModeVehicle", "argument": "Vehicle" },
            { "identifier": "Boolean", "argument": "IsVisible" }
          ],
          "documentation": ""
        },
        {
          "name": "Vehicle_SetShieldVisible",
          "returns": "Void",
          "params": [
            { "identifier": "CModeVehicle", "argument": "Vehicle" },
            { "identifier": "Boolean", "argument": "IsVisible" }
          ],
          "documentation": ""
        },
        {
          "name": "VehicleModel_GetSlotsCount",
          "returns": "Integer",
          "params": [
            { "identifier": "Ident", "argument": "ModelId" },
            {
              "identifier": "CModeVehicleManager::ESlotType",
              "argument": "SlotType"
            }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CActionManager": {
      "inherit": "CNod",
      "enums": {
        "EActionSlot": [
          "Slot_A",
          "Slot_B",
          "Slot_C",
          "Slot_D",
          "Slot_E",
          "Slot_F",
          "Slot_G",
          "Slot_H"
        ]
      },
      "props": {
        "CActionInterface[]": [
          { "name": "Actions", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Action_GetState",
          "returns": "CActionInterface",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "CActionManager::EActionSlot", "argument": "Slot" }
          ],
          "documentation": ""
        },
        {
          "name": "Action_GetState",
          "returns": "CActionInterface",
          "params": [
            { "identifier": "CModeVehicle", "argument": "Vehicle" },
            { "identifier": "Integer", "argument": "VehicleSlotIndex" },
            { "identifier": "CActionManager::EActionSlot", "argument": "Slot" }
          ],
          "documentation": ""
        },
        {
          "name": "Action_GetState",
          "returns": "CActionInterface",
          "params": [
            { "identifier": "CModeTurret", "argument": "Turret" },
            { "identifier": "CActionManager::EActionSlot", "argument": "Slot" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CWebServicesTaskResult_GhostDriver_Download": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {
        "SWebServicesTaskResult_GhostDriver_Download_Team[]": [
          { "name": "Teams", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmPlayerDriver": {
      "inherit": "CNod",
      "enums": {
        "ESmDriverBehaviour": [
          "Static",
          "Turret",
          "Scripted",
          "IA",
          "Patrol",
          "Escape",
          "Saunter",
          "Orbit",
          "Follow"
        ],
        "ESmDriverPathState": [
          "Static",
          "None",
          "Computing",
          "Simple",
          "Full",
          "Incomplete",
          "InFlock"
        ],
        "ESmDriverPatrolMode": ["OneTrip", "BackAndForth", "Loop"],
        "ESmAttackFilter": [
          "All",
          "AllPlayers",
          "AllBots",
          "AllOpposite",
          "OppositePlayers",
          "OppositeBots",
          "Nobody"
        ]
      },
      "props": {
        "CSmPlayerDriver::ESmDriverBehaviour": [
          { "name": "Behaviour", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "PursueTarget", "readonly": false, "documentation": "" },
          {
            "name": "RocketAnticipation",
            "readonly": false,
            "documentation": ""
          },
          { "name": "IsStuck", "readonly": true, "documentation": "" },
          {
            "name": "Orbit_IsClockWise",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Scripted_ForceAimInMoveDir",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Follow_ForceAimInLeaderDir",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Follow_HasLeader",
            "readonly": false,
            "documentation": ""
          },
          { "name": "PredictJump", "readonly": false, "documentation": "" },
          { "name": "UsePathFinding", "readonly": false, "documentation": "" }
        ],
        "Real": [
          { "name": "AggroRadius", "readonly": false, "documentation": "" },
          { "name": "ShootRadius", "readonly": false, "documentation": "" },
          {
            "name": "TargetMinDistance",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "DisengageDistance",
            "readonly": false,
            "documentation": ""
          },
          { "name": "PathSpeedCoef", "readonly": false, "documentation": "" },
          { "name": "Accuracy", "readonly": false, "documentation": "" },
          {
            "name": "TargetDetectionFov",
            "readonly": false,
            "documentation": "The field of view angle the driver uses to search for targets. Value in degrees.Values in range (0.000000-360.000000)"
          },
          {
            "name": "Escape_DistanceSafe",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Escape_DistanceMinEscape",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Escape_DistanceMaxEscape",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Saunter_Radius", "readonly": false, "documentation": "" },
          { "name": "Orbit_Radius", "readonly": false, "documentation": "" },
          {
            "name": "MaxPathDivergence",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "TargetWorldRadius",
            "readonly": false,
            "documentation": "If larger than 0.0, this bot can attack destructible parts of the world."
          },
          {
            "name": "TargetWorldPriority",
            "readonly": false,
            "documentation": "How much the driver value attacking the world rather than players. 0.0 for players only, 1.0 for world only, 0.5 for no preference.Values in range (0.000000-1.000000)"
          },
          {
            "name": "FlockRadius",
            "readonly": false,
            "documentation": "Flocking is a work in progress.\nHow far the driver see its neighbours."
          },
          {
            "name": "FlockFov",
            "readonly": false,
            "documentation": "Flocking is a work in progress.\nThe field of view angle the driver uses to see its neighbours. Value in degrees.Values in range (0.000000-360.000000)"
          },
          {
            "name": "FlockCohesionWeight",
            "readonly": false,
            "documentation": "Flocking is a work in progress.\nHow much the driver values going towards its neighbours."
          },
          {
            "name": "FlockAlignmentWeight",
            "readonly": false,
            "documentation": "Flocking is a work in progress.\nHow much the driver values going the same direction as its neighbours."
          },
          {
            "name": "FlockSeparationWeight",
            "readonly": false,
            "documentation": "Flocking is a work in progress.\nHow much the driver values not hitting its neighbours."
          }
        ],
        "Integer": [
          { "name": "ReactionTime", "readonly": false, "documentation": "" },
          { "name": "ShootPeriodMin", "readonly": false, "documentation": "" },
          { "name": "ShootPeriodMax", "readonly": false, "documentation": "" },
          {
            "name": "Saunter_BaseChillingTime",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Saunter_ChillingTimeDelta",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "LostTargetChaseDuration",
            "readonly": false,
            "documentation": "How long the driver will try to chase its target after it can't see it, 0 to disable."
          }
        ],
        "CSmPlayerDriver::ESmAttackFilter": [
          { "name": "AttackFilter", "readonly": false, "documentation": "" }
        ],
        "CSmPlayer": [
          { "name": "Target", "readonly": true, "documentation": "" },
          { "name": "Owner", "readonly": true, "documentation": "" },
          { "name": "Follow_Leader", "readonly": false, "documentation": "" },
          { "name": "ForcedTarget", "readonly": false, "documentation": "" }
        ],
        "CSmPlayerDriver::ESmDriverPathState": [
          {
            "name": "PathState",
            "readonly": true,
            "documentation": "PathFinding takes some time to compute and doesn't always reach the intended goal. The player will most probably reach the goal in the case CSmPlayerDriver::ESmDriverPathState::Full."
          }
        ],
        "CSmPlayerDriver::ESmDriverPatrolMode": [
          { "name": "Patrol_Mode", "readonly": false, "documentation": "" }
        ],
        "CMapBotPath": [
          { "name": "Patrol_Path", "readonly": false, "documentation": "" }
        ],
        "Vec3": [
          {
            "name": "Escape_AnchorPoint",
            "readonly": false,
            "documentation": "Note that CSmMode::SpawnPlayer and CSmMode::SpawnBotPlayer may reset this value to the spawn position."
          },
          {
            "name": "Saunter_AnchorPoint",
            "readonly": false,
            "documentation": "Note that CSmMode::SpawnPlayer and CSmMode::SpawnBotPlayer may reset this value to the spawn position."
          },
          {
            "name": "Orbit_AnchorPoint",
            "readonly": false,
            "documentation": "Note that CSmMode::SpawnPlayer and CSmMode::SpawnBotPlayer may reset this value to the spawn position."
          },
          { "name": "Follow_Offset", "readonly": false, "documentation": "" },
          {
            "name": "Follow_AnchorPoint",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CSmPlayer[]": [
          { "name": "TargetsToAvoid", "readonly": false, "documentation": "" }
        ],
        "CSmMode::EActionInput": [
          { "name": "OnStuckInput", "readonly": false, "documentation": "" }
        ],
        "CSmPlayerDriver[]": [
          {
            "name": "FlockPartners",
            "readonly": false,
            "documentation": "Flocking is a work in progress.\nYou need to fill this array and define a default behaviour for each member of the flock."
          }
        ]
      },
      "methods": [
        {
          "name": "Scripted_Move",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Goal" }],
          "documentation": ""
        },
        {
          "name": "Scripted_MoveDelta",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Delta" }],
          "documentation": ""
        },
        {
          "name": "Scripted_MoveAndAim",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Goal" }],
          "documentation": ""
        },
        {
          "name": "Scripted_MoveDeltaAndAim",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Delta" }],
          "documentation": ""
        },
        {
          "name": "Scripted_Aim",
          "returns": "Void",
          "params": [{ "identifier": "Vec3", "argument": "Goal" }],
          "documentation": ""
        },
        {
          "name": "Scripted_AimDelta",
          "returns": "Void",
          "params": [
            { "identifier": "Real", "argument": "DeltaYaw" },
            { "identifier": "Real", "argument": "DeltaPitch" }
          ],
          "documentation": ""
        },
        {
          "name": "Scripted_RequestAction",
          "returns": "Void",
          "params": [],
          "documentation": "Same as Scripted_RequestInput(CSmMode::EActionInput::Movement)."
        },
        {
          "name": "Scripted_RequestGunTrigger",
          "returns": "Void",
          "params": [],
          "documentation": "Same as Scripted_RequestInput(CSmMode::EActionInput::Weapon). This has no effect when ForcedTarget is not Null."
        },
        {
          "name": "Scripted_RequestInput",
          "returns": "Void",
          "params": [
            { "identifier": "CSmMode::EActionInput", "argument": "Input" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CBaseEvent": {
      "inherit": "CBaseConstEvent",
      "enums": {},
      "props": {
        "Boolean": [
          { "name": "HasBeenPassed", "readonly": true, "documentation": "" },
          { "name": "HasBeenDiscarded", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmMapGate": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Clan", "readonly": false, "documentation": "" },
          { "name": "AutoCloseDelay", "readonly": false, "documentation": "" },
          { "name": "AutoOpenSpeed", "readonly": false, "documentation": "" }
        ],
        "Boolean": [
          { "name": "Automatic", "readonly": false, "documentation": "" },
          { "name": "ManualClosed", "readonly": false, "documentation": "" },
          { "name": "AutoClosed", "readonly": true, "documentation": "" },
          { "name": "AutoIsActive", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSmMapGauge": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Clan", "readonly": false, "documentation": "" },
          { "name": "Value", "readonly": false, "documentation": "" },
          { "name": "Max", "readonly": false, "documentation": "" },
          { "name": "Speed", "readonly": false, "documentation": "" }
        ],
        "Real": [
          {
            "name": "ValueReal",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          }
        ],
        "Boolean": [
          { "name": "Captured", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMapObjectAnchor": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "ItemName", "readonly": true, "documentation": "" }],
        "Ident": [
          { "name": "ItemModelId", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CPlaygroundClient": {
      "inherit": "CNod",
      "enums": {
        "ESpectatorCameraType": [
          "Replay",
          "Follow",
          "Free",
          "StandardCount",
          "NotUsed0",
          "NotUsed1",
          "NotUsed2",
          "NotUsed3",
          "NotUsed4",
          "NotUsed5",
          "NotUsed6",
          "NotUsed7",
          "NotUsed8",
          "NotUsed9",
          "FollowForced",
          "DontChange"
        ],
        "ESpectatorTargetType": ["None", "Single", "AllPlayers", "AllMap"]
      },
      "props": {
        "CMap": [
          {
            "name": "Map",
            "readonly": true,
            "documentation": "Null when no map loaded."
          }
        ],
        "Integer": [
          { "name": "GameTime", "readonly": true, "documentation": "" }
        ],
        "CUser": [
          { "name": "LocalUser", "readonly": true, "documentation": "" }
        ],
        "CUIConfig": [{ "name": "UI", "readonly": true, "documentation": "" }],
        "CServerInfo": [
          { "name": "ServerInfo", "readonly": true, "documentation": "" }
        ],
        "Ident": [
          {
            "name": "SettingsPlayerModelId",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          { "name": "HasPodium", "readonly": true, "documentation": "" },
          {
            "name": "IsSpectator",
            "readonly": true,
            "documentation": "Is in spectator mode - may be only for a short time between rounds."
          },
          {
            "name": "IsSpectatorClient",
            "readonly": true,
            "documentation": "Client actually desires to spectate instead of playing."
          },
          { "name": "UseClans", "readonly": true, "documentation": "" },
          { "name": "UseForcedClans", "readonly": true, "documentation": "" },
          { "name": "IsLoadingScreen", "readonly": true, "documentation": "" },
          { "name": "IsServerOrSolo", "readonly": true, "documentation": "" },
          {
            "name": "IsInGameMenuDisplayed",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "MapList_IsInProgress",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Request_IsInProgress",
            "readonly": true,
            "documentation": ""
          },
          { "name": "Request_Success", "readonly": true, "documentation": "" },
          { "name": "Vote_CanVote", "readonly": true, "documentation": "" }
        ],
        "CTeam[]": [{ "name": "Teams", "readonly": true, "documentation": "" }],
        "Text[]": [
          { "name": "MapList_Names", "readonly": false, "documentation": "" },
          { "name": "MapList_MapUids", "readonly": false, "documentation": "" }
        ],
        "l": [{ "name": "t", "readonly": false, "documentation": "" }],
        "Text": [
          { "name": "Vote_Question", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "QuitServer",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Silent" }],
          "documentation": ""
        },
        {
          "name": "QuitServerAndSetResult",
          "returns": "Void",
          "params": [
            { "identifier": "Boolean", "argument": "Silent" },
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text[]", "argument": "Data" }
          ],
          "documentation": ""
        },
        {
          "name": "JoinTeam1",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "JoinTeam2",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RequestSpectatorClient",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Spectator" }],
          "documentation": "Request change of IsSpectatorClient (not immediate, and it may be refused). Caveat: will not set Request_Success"
        },
        {
          "name": "SetSpectateTarget",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "ShowProfile",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "SaveReplay",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": "Save the current replay to a file. Filename is optional."
        },
        {
          "name": "SavePrevReplay",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": ""
        },
        {
          "name": "SaveMap",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "FileName" }],
          "documentation": "Save the current map to a file (if the server IsMapDownloadAllowed). Filename is optional."
        },
        {
          "name": "MapList_Request",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetSpectatorCameraType",
          "returns": "CPlaygroundClient::ESpectatorCameraType",
          "params": [],
          "documentation": ""
        },
        {
          "name": "GetSpectatorTargetType",
          "returns": "CPlaygroundClient::ESpectatorTargetType",
          "params": [],
          "documentation": ""
        },
        {
          "name": "SetWantedSpectatorCameraType",
          "returns": "Void",
          "params": [
            {
              "identifier": "CPlaygroundClient::ESpectatorCameraType",
              "argument": "CameraType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "RequestRestartMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RequestNextMap",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "RequestGotoMap",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "MapUid" }],
          "documentation": ""
        },
        {
          "name": "RequestSetNextMap",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "MapUid" }],
          "documentation": ""
        },
        {
          "name": "RequestAutoTeamBalance",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "you can use TriggerPageAction",
          "returns": "nb:",
          "params": [{ "identifier": "'maniaplanet:editsettings'" }],
          "documentation": "Change some settings from the mode with new values. No need to include unchanged settings.  ex: '&lt;script_settings&gt;&lt;setting name=\"S_TimeLimit\" type=\"integer\" value=\"300\"/&gt;&lt;script_settings/&gt;'"
        },
        {
          "name": "RequestChangeModeScriptSettings",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "SettingsXml" }],
          "documentation": "Change some settings from the mode with new values. No need to include unchanged settings.  ex: '&lt;script_settings&gt;&lt;setting name=\"S_TimeLimit\" type=\"integer\" value=\"300\"/&gt;&lt;script_settings/&gt;'\nnb: you can use TriggerPageAction('maniaplanet:editsettings'); to use the legacy UI."
        },
        {
          "name": "Vote_Cast",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Answer" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CManiaAppPlaygroundCommon": {
      "inherit": "CManiaApp",
      "enums": {},
      "props": {
        "CManiaAppPlaygroundEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ],
        "CPlaygroundClient": [
          { "name": "Playground", "readonly": true, "documentation": "" }
        ],
        "CMap": [{ "name": "Map", "readonly": true, "documentation": "" }],
        "CGhostManager": [
          { "name": "GhostMgr", "readonly": true, "documentation": "" }
        ],
        "CUIConfig": [
          {
            "name": "UI",
            "readonly": false,
            "documentation": "(read-only) UI actually displayed, as defined by the server."
          },
          {
            "name": "ClientUI",
            "readonly": false,
            "documentation": "Locally accessible by the client script to locally override settings from the server."
          }
        ],
        "Integer": [
          { "name": "SplitScreenCount", "readonly": true, "documentation": "" }
        ],
        "CVoiceChatConfig": [
          { "name": "VoiceChat", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SplitScreenAssignLayer",
          "returns": "Void",
          "params": [
            { "identifier": "CUILayer", "argument": "UILayer" },
            { "identifier": "Integer", "argument": "ScreenNum" }
          ],
          "documentation": "Set a layer to be displayed on a subscreen. ScreenNum: 0=global, 1,2.... = screen index.  Limitation: a local layer can only be one screen at a time."
        }
      ],
      "documentation": ""
    },
    "CMlScript_ReadOnly": {
      "inherit": "CNod",
      "enums": {
        "ESystemPlatform": [
          "None",
          "Steam",
          "UPlay",
          "PS4",
          "XBoxOne",
          "PS5",
          "XBoxSeries",
          "Stadia",
          "Luna"
        ],
        "ESystemSkuIdentifier": ["Unknown", "EU", "US", "JP", "CN"]
      },
      "props": {
        "CMlPage": [{ "name": "Page", "readonly": false, "documentation": "" }],
        "Boolean": [
          { "name": "PageIsVisible", "readonly": false, "documentation": "" },
          {
            "name": "PageAlwaysUpdateScript",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "Now", "readonly": false, "documentation": "" },
          { "name": "Period", "readonly": false, "documentation": "" },
          { "name": "CurrentTime", "readonly": false, "documentation": "" }
        ],
        "Text": [
          { "name": "CurrentTimeText", "readonly": false, "documentation": "" },
          {
            "name": "CurrentLocalDateText",
            "readonly": false,
            "documentation": ""
          },
          { "name": "CurrentTimezone", "readonly": false, "documentation": "" }
        ],
        "const": [
          { "name": "LocalUser", "readonly": true, "documentation": "" },
          { "name": "LoadedTitle", "readonly": true, "documentation": "" }
        ],
        "CMlScript_ReadOnly::ESystemPlatform": [
          { "name": "SystemPlatform", "readonly": false, "documentation": "" }
        ],
        "CMlScript_ReadOnly::ESystemSkuIdentifier": [
          {
            "name": "SystemSkuIdentifier",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CParsingManager": [
          { "name": "Xml", "readonly": false, "documentation": "" }
        ],
        "CVideoManager": [
          { "name": "Video", "readonly": false, "documentation": "" }
        ],
        "CInputManager": [
          { "name": "Input", "readonly": false, "documentation": "" }
        ],
        "CAnimManager": [
          { "name": "AnimMgr", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CModuleMenuFileBrowser": {
      "inherit": "CModuleMenuComponent",
      "enums": {
        "EFileType": [
          "Maps",
          "Skins",
          "Items",
          "Blocks",
          "Scripts",
          "Images",
          "Manialinks",
          "Packs",
          "Actions",
          "Modules",
          "Meshes",
          "Replays"
        ],
        "EFileAction": ["Select", "Save", "MultiSelect"]
      },
      "props": {
        "Boolean": [
          { "name": "HasFinished", "readonly": true, "documentation": "" }
        ],
        "Text[]": [
          { "name": "Selection", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SetFileType",
          "returns": "Void",
          "params": [
            {
              "identifier": "CModuleMenuFileBrowser::EFileType",
              "argument": "FileType"
            }
          ],
          "documentation": ""
        },
        {
          "name": "SetFileAction",
          "returns": "Void",
          "params": [
            {
              "identifier": "CModuleMenuFileBrowser::EFileAction",
              "argument": "FileAction"
            }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModulePlaygroundTeamState": {
      "inherit": "CModulePlayground",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "Reset",
          "returns": "Void",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModulePlaygroundPlayerState": {
      "inherit": "CModulePlayground",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "Reset",
          "returns": "Void",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModulePlaygroundSpeedMeter": {
      "inherit": "CModulePlayground",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "Reset",
          "returns": "Void",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "SetGlobalScale",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Scale" }],
          "documentation": ""
        },
        {
          "name": "SetGaugeNumber",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Number" }],
          "documentation": ""
        },
        {
          "name": "SetGaugeAngle",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Angle" }],
          "documentation": ""
        },
        {
          "name": "SetGaugeBGVisible",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Visibility" }],
          "documentation": ""
        },
        {
          "name": "SetSpeedLineVisible",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Visibility" }],
          "documentation": ""
        },
        {
          "name": "SetGaugeSpeedMax",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Maximum" }],
          "documentation": ""
        },
        {
          "name": "SetSpeedValueScale",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Scale" }],
          "documentation": ""
        },
        {
          "name": "SetSpeedUnitScale",
          "returns": "Void",
          "params": [{ "identifier": "Real", "argument": "Scale" }],
          "documentation": ""
        },
        {
          "name": "SetFooterUnitVisible",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Visibility" }],
          "documentation": ""
        },
        {
          "name": "SetFooterLineVisible",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Visibility" }],
          "documentation": ""
        },
        {
          "name": "SetDistanceVisible",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Visibility" }],
          "documentation": ""
        },
        {
          "name": "SetDistanceFooterLineVisible",
          "returns": "Void",
          "params": [{ "identifier": "Boolean", "argument": "Visibility" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModulePlaygroundChrono": {
      "inherit": "CModulePlayground",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "StopChrono",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "StartChrono",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Reset",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Reset",
          "returns": "Void",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModulePlaygroundScoresTable": {
      "inherit": "CModulePlayground",
      "enums": {
        "EColumnType": [
          "CustomString",
          "CustomNatural",
          "CustomInteger",
          "CustomReal",
          "CustomTime",
          "Avatar",
          "Name",
          "ManiaStars",
          "Tools",
          "Tags",
          "TMBestTime",
          "TMPrevTime",
          "TMBestLapTime",
          "TMStunts",
          "TMRespawns",
          "TMCheckpoints",
          "TMPoints",
          "TMPrevRaceDeltaPoints",
          "SMPoints",
          "SMRoundPoints"
        ],
        "EScoreSortOrder": [
          "Default",
          "Name",
          "LadderRanking",
          "TMPoints",
          "TMBestTime",
          "TMBestLapTime",
          "TMStunts",
          "TMRespawns",
          "TMCheckpoints",
          "TMPrevTime",
          "SMPoints",
          "SMRoundPoints"
        ]
      },
      "props": {},
      "methods": [
        {
          "name": "SetFooterText",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "FooterText" }],
          "documentation": ""
        },
        {
          "name": "ResetCustomColumns",
          "returns": "Void",
          "params": [{ "identifier": "CScore", "argument": "Score" }],
          "documentation": ""
        },
        {
          "name": "ResetCustomColumns",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Scores_Sort",
          "returns": "Void",
          "params": [
            {
              "identifier": "CModulePlaygroundScoresTable::EScoreSortOrder",
              "argument": "SortOrder"
            }
          ],
          "documentation": ""
        },
        {
          "name": "SetColumnValue",
          "returns": "Void",
          "params": [
            { "identifier": "CScore", "argument": "Score" },
            { "identifier": "Text", "argument": "ColumnId" },
            { "identifier": "Text", "argument": "ColumnValue" }
          ],
          "documentation": ""
        },
        {
          "name": "SetColumnValue",
          "returns": "Void",
          "params": [
            { "identifier": "CScore", "argument": "Score" },
            { "identifier": "Text", "argument": "ColumnId" },
            { "identifier": "Integer", "argument": "ColumnValue" }
          ],
          "documentation": ""
        },
        {
          "name": "SetColumnValue",
          "returns": "Void",
          "params": [
            { "identifier": "CScore", "argument": "Score" },
            { "identifier": "Text", "argument": "ColumnId" },
            { "identifier": "Real", "argument": "ColumnValue" }
          ],
          "documentation": ""
        },
        {
          "name": "SetColumnVisibility",
          "returns": "Void",
          "params": [
            {
              "identifier": "CModulePlaygroundScoresTable::EColumnType",
              "argument": "Type"
            },
            { "identifier": "Boolean", "argument": "Visibility" }
          ],
          "documentation": ""
        },
        {
          "name": "SetColumnVisibility",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "ColumnId" },
            { "identifier": "Boolean", "argument": "Visibility" }
          ],
          "documentation": ""
        },
        {
          "name": "SetColor",
          "returns": "Void",
          "params": [
            { "identifier": "CScore", "argument": "Score" },
            { "identifier": "Vec3", "argument": "Color" }
          ],
          "documentation": ""
        },
        {
          "name": "ResetColor",
          "returns": "Void",
          "params": [{ "identifier": "CScore", "argument": "Score" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModulePlaygroundInventory": {
      "inherit": "CModulePlayground",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "AddItem",
          "returns": "Integer",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Integer", "argument": "Quantity" }
          ],
          "documentation": ""
        },
        {
          "name": "AddAction",
          "returns": "Boolean",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "Url" }
          ],
          "documentation": ""
        },
        {
          "name": "RemoveInventoryItem",
          "returns": "Integer",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "Url" },
            { "identifier": "Integer", "argument": "Quantity" }
          ],
          "documentation": ""
        },
        {
          "name": "GetInventoryItemQuantity",
          "returns": "Integer",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "Url" }
          ],
          "documentation": ""
        },
        {
          "name": "IsInventoryItemStored",
          "returns": "Boolean",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "Url" }
          ],
          "documentation": ""
        },
        {
          "name": "GetStoredItemsList",
          "returns": "Text[]",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "GetStoredActionsList",
          "returns": "Text[]",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModulePlaygroundStore": {
      "inherit": "CModulePlayground",
      "enums": {},
      "props": {},
      "methods": [
        {
          "name": "Reset",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Reset",
          "returns": "Void",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "SetMoney",
          "returns": "Void",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "Amount" }
          ],
          "documentation": ""
        },
        {
          "name": "GetMoney",
          "returns": "Integer",
          "params": [{ "identifier": "CPlayer", "argument": "Player" }],
          "documentation": ""
        },
        {
          "name": "AddMoney",
          "returns": "Boolean",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "Amount" }
          ],
          "documentation": ""
        },
        {
          "name": "SubMoney",
          "returns": "Boolean",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Integer", "argument": "Amount" }
          ],
          "documentation": ""
        },
        {
          "name": "SetActionLevel",
          "returns": "Void",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "ActionUrl" },
            { "identifier": "Integer", "argument": "ActionLevel" }
          ],
          "documentation": ""
        },
        {
          "name": "GetActionLevel",
          "returns": "Integer",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "ActionUrl" }
          ],
          "documentation": ""
        },
        {
          "name": "SetItemCanBeBought",
          "returns": "Void",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "ActionUrl" },
            { "identifier": "Boolean", "argument": "CanBeBought" }
          ],
          "documentation": ""
        },
        {
          "name": "GetItemCanBeBought",
          "returns": "Boolean",
          "params": [
            { "identifier": "CPlayer", "argument": "Player" },
            { "identifier": "Text", "argument": "ActionUrl" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CEditorBase": {
      "inherit": "CNod",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CModuleMenuModel": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CModuleMenuPageModel[]": [
          { "name": "Pages", "readonly": false, "documentation": "" }
        ],
        "Text": [
          { "name": "MenuScript", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "AddPage",
          "returns": "CModuleMenuPageModel",
          "params": [{ "identifier": "Text", "argument": "PageUrl" }],
          "documentation": ""
        },
        {
          "name": "AddLink",
          "returns": "Void",
          "params": [
            { "identifier": "CModuleMenuPageModel", "argument": "ParentPage" },
            { "identifier": "CModuleMenuPageModel", "argument": "ChildPage" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CModuleMenuPageModel": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "ManialinkText", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CModulePlaygroundHudModel": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Ident[]": [
          { "name": "ContextsIds", "readonly": false, "documentation": "" }
        ],
        "CHudModule[]": [
          { "name": "SubModules", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "EditorContextIndex",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "ContextAdd",
          "returns": "Ident",
          "params": [{ "identifier": "Text", "argument": "ContextName" }],
          "documentation": ""
        },
        {
          "name": "ContextSetId",
          "returns": "Ident",
          "params": [
            { "identifier": "Ident", "argument": "ContextId" },
            { "identifier": "Text", "argument": "NewContextName" }
          ],
          "documentation": ""
        },
        {
          "name": "ContextRemove",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "ContextId" }],
          "documentation": ""
        },
        {
          "name": "NewSubModule",
          "returns": "CHudModule",
          "params": [{ "identifier": "Text", "argument": "ModulePath" }],
          "documentation": ""
        },
        {
          "name": "DeleteSubModule",
          "returns": "Void",
          "params": [{ "identifier": "CHudModule", "argument": "SubModule" }],
          "documentation": ""
        },
        {
          "name": "SubModuleIsContextActive",
          "returns": "Boolean",
          "params": [
            { "identifier": "CHudModule", "argument": "SubModule" },
            { "identifier": "Ident", "argument": "ContextId" }
          ],
          "documentation": ""
        },
        {
          "name": "SubModuleSetContextIsActive",
          "returns": "Void",
          "params": [
            { "identifier": "CHudModule", "argument": "SubModule" },
            { "identifier": "Ident", "argument": "ContextId" },
            { "identifier": "Boolean", "argument": "IsActive" }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CEditorPluginModuleEvent": {
      "inherit": "CManiaAppEvent",
      "enums": {
        "Type": [
          "LayerCustomEvent",
          "KeyPress",
          "(reserved)",
          "MenuNavigation",
          "Exit",
          "FileNew",
          "FileOpen",
          "FileSave",
          "FileSaveAs"
        ]
      },
      "props": {
        "CEditorPluginModuleEvent::Type": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        { "name": "Eat", "returns": "Void", "params": [], "documentation": "" }
      ],
      "documentation": ""
    },
    "CEditorAsset": {
      "inherit": "CEditorBase",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CImage": {
      "inherit": "CNod",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CEditorEvent": {
      "inherit": "CManiaAppEvent",
      "enums": {
        "Type": [
          "LayerCustomEvent",
          "KeyPress",
          "(reserved)",
          "MenuNavigation",
          "FileChanged",
          "Exit",
          "FileSave",
          "OnUndo",
          "OnRedo",
          "OnSwitchedBack",
          "CameraButtonOn",
          "CameraButtonOff",
          "VoxelUpdateMaterial",
          "OpenUVEditor",
          "CloseUVEditor",
          "EnableUndo",
          "DisableUndo",
          "EnableRedo",
          "DisableRedo",
          "UpdateUI",
          "UpdateSliders",
          "UpdateMaterialsLibPage",
          "MediaTrackerPopUp",
          "HideUI",
          "ShowUI",
          "EnableFullScreen",
          "DisableFullScreen",
          "Autosave"
        ]
      },
      "props": {
        "CEditorEvent::Type": [
          { "name": "Type", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CEditorPluginAPI": {
      "inherit": "CNod",
      "enums": {
        "EEditorFileToolBar_QuadType": [
          "Quit",
          "New",
          "Open",
          "SaveAs",
          "Save",
          "Import",
          "Export",
          "Close",
          "Help"
        ]
      },
      "props": {},
      "methods": [
        {
          "name": "NewFile",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Undo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Redo",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "FileToolBarSendCmd",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "CmdName" }],
          "documentation": ""
        },
        {
          "name": "SetToolBarButtonVisible",
          "returns": "Boolean",
          "params": [
            {
              "identifier": "CEditorPluginAPI::EEditorFileToolBar_QuadType",
              "argument": "Type"
            }
          ],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMediaTrackerClip": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "Name", "readonly": false, "documentation": "" }],
        "CMediaTrackerTrack[]": [
          { "name": "Tracks", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "StopWhenRespawn", "readonly": false, "documentation": "" },
          { "name": "StopWhenLeave", "readonly": false, "documentation": "" },
          {
            "name": "TriggersBeforeRaceStart",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMediaTrackerClipGroup": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CMediaTrackerClip[]": [
          { "name": "Clips", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMediaTrackerTrack": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "Name", "readonly": false, "documentation": "" }],
        "CMediaTrackerBlock[]": [
          { "name": "Blocks", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMatchSettings": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "Name",
            "readonly": true,
            "documentation": "Name of the file"
          },
          { "name": "FileName", "readonly": true, "documentation": "" },
          { "name": "ScriptModeName", "readonly": false, "documentation": "" }
        ],
        "CMatchSettingsPlaylistItem[]": [
          { "name": "Playlist", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "ScriptModeName_Check",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "ScriptModeName" }],
          "documentation": ""
        },
        {
          "name": "ScriptModeName_Set",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "ScriptModeName" }],
          "documentation": ""
        },
        {
          "name": "ScriptSettings_SetToDefault",
          "returns": "Void",
          "params": [],
          "documentation": ""
        },
        {
          "name": "Playlist_FileExists",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "File" }],
          "documentation": ""
        },
        {
          "name": "Playlist_FileMatchesMode",
          "returns": "Boolean",
          "params": [{ "identifier": "Text", "argument": "File" }],
          "documentation": ""
        },
        {
          "name": "Playlist_Add",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "File" }],
          "documentation": ""
        },
        {
          "name": "Playlist_Remove",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Index" }],
          "documentation": ""
        },
        {
          "name": "Playlist_SwapUp",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Index" }],
          "documentation": ""
        },
        {
          "name": "Playlist_SwapDown",
          "returns": "Void",
          "params": [{ "identifier": "Integer", "argument": "Index" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CManiaAppBase": {
      "inherit": "CManiaApp",
      "enums": {},
      "props": {
        "CManiaAppEvent[]": [
          { "name": "PendingEvents", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CPackCreatorTitleInfo": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Ident": [
          { "name": "TitleId", "readonly": true, "documentation": "" },
          { "name": "MakerTitleId", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "DisplayName", "readonly": false, "documentation": "" },
          { "name": "Description", "readonly": false, "documentation": "" },
          { "name": "InfoUrl", "readonly": false, "documentation": "" },
          { "name": "DownloadUrl", "readonly": false, "documentation": "" },
          { "name": "TitleVersion", "readonly": false, "documentation": "" },
          {
            "name": "AllowedClientTitleVersion",
            "readonly": false,
            "documentation": ""
          },
          { "name": "BaseTitleIds", "readonly": false, "documentation": "" },
          {
            "name": "ForcedPlayerModel",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Packaging_ImageFileName",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Packaging_LogosFileName",
            "readonly": false,
            "documentation": ""
          },
          { "name": "Packaging_Group", "readonly": false, "documentation": "" },
          {
            "name": "Station_ManialinkUrl",
            "readonly": false,
            "documentation": "Can be an http://url or a ./path/in/title/datas/station.app.txt"
          },
          {
            "name": "Menus_BgReplayFileName",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Menus_ManiaAppFileName",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Menus_MusicFileName",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "FallbackFontFileName",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "Hud3dFontFileName",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "HudDefaultModuleScriptName",
            "readonly": false,
            "documentation": ""
          },
          { "name": "MusicFolder", "readonly": false, "documentation": "" },
          {
            "name": "Editor_MusicFileName",
            "readonly": false,
            "documentation": ""
          }
        ],
        "Boolean": [
          {
            "name": "Solo_HasCampaign",
            "readonly": true,
            "documentation": "Use  CGameManiaTitleEditionScriptAPI::SetTitleCampaign() to modify"
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMlGraphCurve": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Vec2[]": [
          { "name": "Points", "readonly": false, "documentation": "" }
        ],
        "Vec3": [{ "name": "Color", "readonly": false, "documentation": "" }],
        "Text": [{ "name": "Style", "readonly": false, "documentation": "" }],
        "Real": [
          {
            "name": "Width",
            "readonly": false,
            "documentation": "Values in range (0.000000-50.000000)"
          }
        ]
      },
      "methods": [
        {
          "name": "SortPoints",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMlFileEntry": {
      "inherit": "CMlEntry",
      "enums": {},
      "props": {
        "Boolean": [
          { "name": "OnlyUserFiles", "readonly": false, "documentation": "" }
        ],
        "Text": [
          { "name": "FullFileName", "readonly": true, "documentation": "" },
          {
            "name": "RelativeNameToRoot",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "RelativeNameToTypeFolder",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "ClearFileNames",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CParsingNode": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "TextContents", "readonly": true, "documentation": "" },
          { "name": "TextRawContents", "readonly": true, "documentation": "" },
          {
            "name": "TextRecursiveContents",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CParsingNode[]": [
          { "name": "Children", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetAttributeText",
          "returns": "Text",
          "params": [
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Text", "argument": "DefaultValue" }
          ],
          "documentation": ""
        },
        {
          "name": "GetAttributeInteger",
          "returns": "Integer",
          "params": [
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Integer", "argument": "DefaultValue" }
          ],
          "documentation": ""
        },
        {
          "name": "GetAttributeReal",
          "returns": "Real",
          "params": [
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Real", "argument": "DefaultValue" }
          ],
          "documentation": ""
        },
        {
          "name": "GetAttributeBoolean",
          "returns": "Boolean",
          "params": [
            { "identifier": "Text", "argument": "Name" },
            { "identifier": "Boolean", "argument": "DefaultValue" }
          ],
          "documentation": ""
        },
        {
          "name": "GetFirstChild",
          "returns": "CParsingNode",
          "params": [{ "identifier": "Text", "argument": "Name" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMapGroup": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CMapInfo[]": [
          { "name": "MapInfos", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "IsUnlocked",
          "returns": "Void",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CWebServicesTaskResult_NadeoServicesItemCollection": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CNadeoServicesItemCollection": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "ActivityId", "readonly": true, "documentation": "" },
          { "name": "CreatorAccountId", "readonly": true, "documentation": "" },
          {
            "name": "CreatorWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CreatorDisplayName",
            "readonly": true,
            "documentation": ""
          },
          { "name": "ClubId", "readonly": true, "documentation": "" },
          { "name": "DisplayName", "readonly": true, "documentation": "" },
          { "name": "Id", "readonly": true, "documentation": "" },
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "CreationTimeStamp",
            "readonly": true,
            "documentation": ""
          },
          { "name": "UpdateTimeStamp", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "CreatorIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          },
          { "name": "HasVersionList", "readonly": true, "documentation": "" },
          {
            "name": "IsCurrentVersionNull",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CNadeoServicesItemCollectionVersion": [
          { "name": "CurrentVersion", "readonly": false, "documentation": "" }
        ],
        "CNadeoServicesItemCollectionVersion[]": [
          { "name": "VersionList", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_NadeoServicesItemCollectionList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_NadeoServicesMap": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CNadeoServicesMap": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "AuthorAccountId", "readonly": true, "documentation": "" },
          {
            "name": "AuthorWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "AuthorDisplayName",
            "readonly": true,
            "documentation": ""
          },
          { "name": "CollectionName", "readonly": true, "documentation": "" },
          { "name": "FileName", "readonly": true, "documentation": "" },
          { "name": "FileUrl", "readonly": true, "documentation": "" },
          { "name": "Id", "readonly": true, "documentation": "" },
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "Style", "readonly": true, "documentation": "" },
          {
            "name": "SubmitterAccountId",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "SubmitterWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "ThumbnailUrl", "readonly": true, "documentation": "" },
          { "name": "Type", "readonly": true, "documentation": "" },
          { "name": "Uid", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "AuthorIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CreatedWithGamepadEditor",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CreatedWithSimpleEditor",
            "readonly": true,
            "documentation": ""
          },
          { "name": "IsPlayable", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "AuthorScore", "readonly": true, "documentation": "" },
          { "name": "BronzeScore", "readonly": true, "documentation": "" },
          { "name": "GoldScore", "readonly": true, "documentation": "" },
          { "name": "SilverScore", "readonly": true, "documentation": "" },
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_NadeoServicesMapList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_NadeoServicesSkin": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CNadeoServicesSkin": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Checksum", "readonly": true, "documentation": "" },
          { "name": "CreatorAccountId", "readonly": true, "documentation": "" },
          {
            "name": "CreatorWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "CreatorDisplayName",
            "readonly": true,
            "documentation": ""
          },
          { "name": "DisplayName", "readonly": true, "documentation": "" },
          { "name": "FileName", "readonly": true, "documentation": "" },
          { "name": "FileUrl", "readonly": true, "documentation": "" },
          { "name": "Id", "readonly": true, "documentation": "" },
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "ThumbnailUrl", "readonly": true, "documentation": "" },
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "CreatorIsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_NadeoServicesSkinList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CReplayInfo": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "MapUid", "readonly": true, "documentation": "" },
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "Path", "readonly": true, "documentation": "" },
          { "name": "FileName", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTaskResult_ModeInfo": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "Name",
            "readonly": true,
            "documentation": "Name of the GameMode"
          },
          { "name": "Path", "readonly": true, "documentation": "" },
          { "name": "Description", "readonly": true, "documentation": "" },
          { "name": "Version", "readonly": true, "documentation": "" }
        ],
        "Text[]": [
          {
            "name": "CompatibleMapTypes",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_MapRecordList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CMapRecord": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "AccountId", "readonly": true, "documentation": "" },
          {
            "name": "WebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "MapId", "readonly": true, "documentation": "" },
          { "name": "ScopeType", "readonly": true, "documentation": "" },
          { "name": "ScopeId", "readonly": true, "documentation": "" },
          { "name": "GameMode", "readonly": true, "documentation": "" },
          {
            "name": "GameModeCustomData",
            "readonly": true,
            "documentation": ""
          },
          { "name": "FileName", "readonly": true, "documentation": "" },
          { "name": "ReplayUrl", "readonly": true, "documentation": "" }
        ],
        "Ident": [{ "name": "MapUid", "readonly": true, "documentation": "" }],
        "Integer": [
          { "name": "Score", "readonly": true, "documentation": "" },
          { "name": "Time", "readonly": true, "documentation": "" },
          { "name": "RespawnCount", "readonly": true, "documentation": "" },
          { "name": "Timestamp", "readonly": true, "documentation": "" },
          { "name": "MultiAsyncLevel", "readonly": true, "documentation": "" },
          { "name": "SkillPoints", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CHighScoreComparison": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "CMapInfo": [
          { "name": "MapInfo", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "Login", "readonly": true, "documentation": "" },
          { "name": "RecordDateString", "readonly": true, "documentation": "" },
          { "name": "OpponentLogin", "readonly": true, "documentation": "" },
          {
            "name": "OpponentDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentRecordUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentRecordDateString",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "RecordScore", "readonly": true, "documentation": "" },
          { "name": "RecordTime", "readonly": true, "documentation": "" },
          {
            "name": "RecordRespawnCount",
            "readonly": true,
            "documentation": ""
          },
          { "name": "RecordDate", "readonly": true, "documentation": "" },
          {
            "name": "RecordElapsedTime",
            "readonly": true,
            "documentation": ""
          },
          { "name": "RecordCount", "readonly": true, "documentation": "" },
          {
            "name": "OpponentRecordScore",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentRecordTime",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentRecordRespawnCount",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentRecordDate",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentRecordElapsedTime",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentRecordCount",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CHighScoreComparisonSummary": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Login", "readonly": true, "documentation": "" },
          {
            "name": "BestRecordLastDateString",
            "readonly": true,
            "documentation": ""
          },
          { "name": "OpponentLogin", "readonly": true, "documentation": "" },
          {
            "name": "OpponentDisplayName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentBestRecordLastDateString",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Integer": [
          { "name": "BestRecordCount", "readonly": true, "documentation": "" },
          {
            "name": "BestRecordLastDate",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "BestRecordElapsedTime",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentBestRecordCount",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentBestRecordLastDate",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OpponentBestRecordElapsedTime",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNaturalLeaderBoardInfo": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Rank", "readonly": true, "documentation": "Rank." },
          { "name": "Score", "readonly": true, "documentation": "Score." }
        ],
        "Ident": [
          { "name": "UserId", "readonly": true, "documentation": "UserId." }
        ],
        "Text": [
          { "name": "Login", "readonly": true, "documentation": "Login." },
          {
            "name": "DisplayName",
            "readonly": true,
            "documentation": "Display name."
          },
          {
            "name": "FileName",
            "readonly": true,
            "documentation": "FileName."
          },
          {
            "name": "ReplayUrl",
            "readonly": true,
            "documentation": "ReplayUrl."
          }
        ],
        "Boolean": [
          {
            "name": "IsFirstPartyDisplayName",
            "readonly": true,
            "documentation": "Is display name from first party."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_Season": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CSeason": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "CreatorAccountId", "readonly": true, "documentation": "" },
          {
            "name": "CreatorWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "GameMode", "readonly": true, "documentation": "" },
          {
            "name": "GameModeCustomData",
            "readonly": true,
            "documentation": ""
          },
          { "name": "MapRecordType", "readonly": true, "documentation": "" },
          { "name": "Id", "readonly": true, "documentation": "" },
          { "name": "Name", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "CreationTimeStamp",
            "readonly": true,
            "documentation": ""
          },
          { "name": "StartTimeStamp", "readonly": true, "documentation": "" },
          { "name": "EndTimeStamp", "readonly": true, "documentation": "" }
        ],
        "CSeasonMapInfo[]": [
          { "name": "MapInfoList", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_SeasonList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CRealLeaderBoardInfo": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Rank", "readonly": true, "documentation": "Rank." }
        ],
        "Ident": [
          { "name": "UserId", "readonly": true, "documentation": "UserId." }
        ],
        "Text": [
          { "name": "Login", "readonly": true, "documentation": "Login." },
          {
            "name": "DisplayName",
            "readonly": true,
            "documentation": "Display name."
          },
          {
            "name": "FileName",
            "readonly": true,
            "documentation": "FileName."
          },
          {
            "name": "ReplayUrl",
            "readonly": true,
            "documentation": "ReplayUrl."
          }
        ],
        "Boolean": [
          {
            "name": "IsFirstPartyDisplayName",
            "readonly": true,
            "documentation": "Is display name from first party."
          }
        ],
        "Real": [
          { "name": "Score", "readonly": true, "documentation": "Score." }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_AccountTrophyGainHistory": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_AccountTrophyLastYearSummary": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CAccountTrophyLastYearSummary": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "AccountId", "readonly": true, "documentation": "" },
          { "name": "WebServicesUserId", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "T1Count", "readonly": true, "documentation": "" },
          { "name": "T2Count", "readonly": true, "documentation": "" },
          { "name": "T3Count", "readonly": true, "documentation": "" },
          { "name": "T4Count", "readonly": true, "documentation": "" },
          { "name": "T5Count", "readonly": true, "documentation": "" },
          { "name": "T6Count", "readonly": true, "documentation": "" },
          { "name": "T7Count", "readonly": true, "documentation": "" },
          { "name": "T8Count", "readonly": true, "documentation": "" },
          { "name": "T9Count", "readonly": true, "documentation": "" },
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_TrophySoloMedalAchievementSettings": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CTrophySoloMedalAchievementSettings": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "Type", "readonly": true, "documentation": "" }],
        "CTrophySoloMedalAchievementLevelSettings": [
          {
            "name": "AllBronzeLevelSettings",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AllSilverLevelSettings",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AllGoldLevelSettings",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "AllAuthorLevelSettings",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_WSZonePtrList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CZone": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Id", "readonly": true, "documentation": "" },
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "ParentId", "readonly": true, "documentation": "" },
          { "name": "Path", "readonly": true, "documentation": "" },
          { "name": "FullPath", "readonly": true, "documentation": "" },
          { "name": "FlagUrl", "readonly": true, "documentation": "" },
          { "name": "CountryFlagUrl", "readonly": true, "documentation": "" },
          {
            "name": "Model_CarSport_SkinName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Model_CarSport_SkinUrl",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Model_CharacterPilot_SkinName",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "Model_CharacterPilot_SkinUrl",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CVehicleSettings": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "ModelDisplayName", "readonly": true, "documentation": "" },
          { "name": "ModelName", "readonly": true, "documentation": "" },
          { "name": "SkinName", "readonly": true, "documentation": "...." },
          { "name": "SkinUrl", "readonly": true, "documentation": "" }
        ],
        "Real": [
          {
            "name": "AnalogSensitivity",
            "readonly": false,
            "documentation": "actual range is [1.0..10.0]Values in range (0.100000-10.000000)"
          },
          {
            "name": "AnalogDeadZone",
            "readonly": false,
            "documentation": "Values in range (0.000000-0.900000)"
          },
          {
            "name": "RumbleIntensity",
            "readonly": false,
            "documentation": "Values in range (0.000000-2.000000)"
          },
          {
            "name": "CenterSpringIntensity",
            "readonly": false,
            "documentation": "Values in range (0.000000-1.000000)"
          }
        ],
        "Boolean": [
          { "name": "InvertSteer", "readonly": false, "documentation": "" },
          {
            "name": "AccelIsToggleMode",
            "readonly": false,
            "documentation": ""
          },
          {
            "name": "BrakeIsToggleMode",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_WSFriendList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CFriend": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "AccountId", "readonly": true, "documentation": "" },
          { "name": "CountryFlagUrl", "readonly": true, "documentation": "" },
          { "name": "DisplayName", "readonly": true, "documentation": "" },
          { "name": "PlatformType", "readonly": true, "documentation": "" },
          { "name": "Presence", "readonly": true, "documentation": "" },
          { "name": "Relationship", "readonly": true, "documentation": "" },
          { "name": "WebServicesUserId", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "IsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_WSNewsList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CNews": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Id", "readonly": true, "documentation": "" },
          { "name": "Type", "readonly": true, "documentation": "" },
          { "name": "Placement", "readonly": true, "documentation": "" },
          { "name": "Locale", "readonly": true, "documentation": "" },
          { "name": "Title", "readonly": true, "documentation": "" },
          { "name": "Body", "readonly": true, "documentation": "" },
          { "name": "MediaUrl", "readonly": true, "documentation": "" },
          { "name": "MediaType", "readonly": true, "documentation": "" },
          { "name": "PublicationDate", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "Priority", "readonly": true, "documentation": "" },
          { "name": "DisplayTime", "readonly": true, "documentation": "" }
        ],
        "CNewsLink[]": [
          { "name": "LinkList", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_WSUserPrestigeList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CUserPrestige": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "CategoryType", "readonly": true, "documentation": "" },
          { "name": "PrestigeId", "readonly": true, "documentation": "" },
          { "name": "SkinOptions", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "CategoryLevel", "readonly": true, "documentation": "" },
          { "name": "PrestigeLevel", "readonly": true, "documentation": "" },
          { "name": "TimeStamp", "readonly": true, "documentation": "" },
          { "name": "Year", "readonly": true, "documentation": "" }
        ],
        "NWebServicesPrestige::EPrestigeMode": [
          { "name": "Mode", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_WSUserPrestige": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_WSPrestigeList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CPrestige": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "CategoryType", "readonly": true, "documentation": "" },
          { "name": "PrestigeId", "readonly": true, "documentation": "" },
          {
            "name": "RewardDisplayName",
            "readonly": true,
            "documentation": ""
          },
          { "name": "RewardFileUrl", "readonly": true, "documentation": "" },
          {
            "name": "RewardThumbnailUrl",
            "readonly": true,
            "documentation": ""
          },
          { "name": "RewardType", "readonly": true, "documentation": "" },
          { "name": "SkinOptions", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "CategoryLevel", "readonly": true, "documentation": "" },
          { "name": "PrestigeLevel", "readonly": true, "documentation": "" },
          { "name": "StatCurrentValue", "readonly": true, "documentation": "" },
          {
            "name": "StatValueForNextLevel",
            "readonly": true,
            "documentation": ""
          },
          { "name": "TimeStamp", "readonly": true, "documentation": "" },
          { "name": "Year", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsUnlocked", "readonly": true, "documentation": "" }
        ],
        "NWebServicesPrestige::EPrestigeMode": [
          { "name": "Mode", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_Squad": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CSquad": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [
          {
            "name": "CreationTimeStamp",
            "readonly": true,
            "documentation": ""
          },
          { "name": "Size", "readonly": true, "documentation": "" },
          { "name": "UpdateTimeStamp", "readonly": true, "documentation": "" }
        ],
        "Text": [
          { "name": "LeaderAccountId", "readonly": true, "documentation": "" },
          {
            "name": "LeaderWebServicesUserId",
            "readonly": true,
            "documentation": ""
          },
          { "name": "Id", "readonly": true, "documentation": "" },
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "Type", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsLocked", "readonly": true, "documentation": "" }
        ],
        "CSquadInvitation[]": [
          { "name": "InvitationList", "readonly": false, "documentation": "" }
        ],
        "CSquadMember[]": [
          { "name": "MemberList", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_WSNotification": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CPackCreator": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Boolean": [
          {
            "name": "RegisterPack_IsInProgess",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CPackCreatorPack": [
          { "name": "CurrentPack", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "RegisterPackForEditedTitle",
          "returns": "Void",
          "params": [],
          "documentation": "Register (or retreive) a package for the currently edited title."
        },
        {
          "name": "Build_Begin",
          "returns": "Ident",
          "params": [
            { "identifier": "CPackCreatorPack", "argument": "Pack" },
            { "identifier": "CPackCreatorTitleInfo", "argument": "TitleInfo" }
          ],
          "documentation": "Start a new build for a pack, optionnaly a titlepack."
        },
        {
          "name": "Build_AddFile",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "BuildId" },
            { "identifier": "Text", "argument": "FileName" }
          ],
          "documentation": ""
        },
        {
          "name": "Build_AddFolder",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "BuildId" },
            { "identifier": "Text", "argument": "FolderName" }
          ],
          "documentation": ""
        },
        {
          "name": "Build_AddFile",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "BuildId" },
            { "identifier": "Text", "argument": "FileName" },
            { "identifier": "Boolean", "argument": "IsPublic" },
            { "identifier": "Boolean", "argument": "IsInternal" },
            { "identifier": "Boolean", "argument": "NoAutomaticDeps" }
          ],
          "documentation": ""
        },
        {
          "name": "Build_AddFolder",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "BuildId" },
            { "identifier": "Text", "argument": "FolderName" },
            { "identifier": "Boolean", "argument": "IsPublic" },
            { "identifier": "Boolean", "argument": "IsInternal" },
            { "identifier": "Boolean", "argument": "NoRecursion" },
            { "identifier": "Boolean", "argument": "NoAutomaticDeps" }
          ],
          "documentation": ""
        },
        {
          "name": "Build_Generate",
          "returns": "Void",
          "params": [
            { "identifier": "Ident", "argument": "BuildId" },
            { "identifier": "Boolean", "argument": "Upload" }
          ],
          "documentation": ""
        },
        {
          "name": "Build_IsGenerated",
          "returns": "Boolean",
          "params": [{ "identifier": "Ident", "argument": "BuildId" }],
          "documentation": ""
        },
        {
          "name": "Build_ErrorMessage",
          "returns": "Text",
          "params": [{ "identifier": "Ident", "argument": "BuildId" }],
          "documentation": ""
        },
        {
          "name": "Build_End",
          "returns": "Void",
          "params": [{ "identifier": "Ident", "argument": "BuildId" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CNotificationsConsumerEvent": {
      "inherit": "CNod",
      "enums": { "EType": ["NewNotification", "NotificationChanged"] },
      "props": {
        "CNotificationsConsumerEvent::EType": [
          {
            "name": "Type",
            "readonly": true,
            "documentation": "Type of the event."
          }
        ],
        "CNotificationsConsumerNotification": [
          {
            "name": "Notification",
            "readonly": true,
            "documentation": "Notification concerned by the event."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNotificationsConsumerNotification": {
      "inherit": "CNod",
      "enums": { "ENotificationPriority": ["Memo", "Notice", "Alarm"] },
      "props": {
        "Text": [
          { "name": "Title", "readonly": true, "documentation": "" },
          { "name": "Description", "readonly": true, "documentation": "" },
          { "name": "ImageUrl", "readonly": true, "documentation": "" }
        ],
        "CNotificationsConsumerNotification::ENotificationPriority": [
          { "name": "Priority", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "HasBeenRead", "readonly": true, "documentation": "" },
          { "name": "HasBeenActivated", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "SetRead",
          "returns": "Void",
          "params": [],
          "documentation": "The user has been displayed the Notification for a sufficient time."
        },
        {
          "name": "SetActivated",
          "returns": "Void",
          "params": [],
          "documentation": "The user has clicked on the Notification."
        }
      ],
      "documentation": ""
    },
    "CMapEditorInventoryDirectory": {
      "inherit": "CMapEditorInventoryNode",
      "enums": {},
      "props": {
        "CMapEditorInventoryNode[]": [
          { "name": "Children", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          {
            "name": "HasChildDirectory",
            "readonly": true,
            "documentation": ""
          },
          { "name": "HasChildArticle", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMapEditorInventoryNode": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "NodeName", "readonly": true, "documentation": "" }],
        "Boolean": [
          { "name": "IsDirectory", "readonly": true, "documentation": "" }
        ],
        "CMapEditorInventoryDirectory": [
          { "name": "ParentNode", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetCollectorNod",
          "returns": "CNod",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMapEditorInventoryArticle": {
      "inherit": "CMapEditorInventoryNode",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CCollector": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Name", "readonly": true, "documentation": "" },
          { "name": "PageName", "readonly": false, "documentation": "" },
          { "name": "SkinDirectory", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          { "name": "InterfaceNumber", "readonly": false, "documentation": "" }
        ],
        "CImage": [{ "name": "Icon", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CBlockModelVariantGround": {
      "inherit": "CBlockModelVariant",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CBlockModelVariantAir": {
      "inherit": "CBlockModelVariant",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CBlockUnit": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Int3": [
          { "name": "AbsoluteOffset", "readonly": true, "documentation": "" }
        ],
        "CBlockUnitModel": [
          { "name": "BlockUnitModel", "readonly": true, "documentation": "" }
        ],
        "CBlock": [{ "name": "Block", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CMapSector": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Ident[]": [
          { "name": "PlayersIds", "readonly": false, "documentation": "" }
        ],
        "Text": [{ "name": "Tag", "readonly": true, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    },
    "CWebServicesTaskResult_AccountTrophyGainList": {
      "inherit": "CTaskResult",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "CActionInterface": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "Cooldown", "readonly": true, "documentation": "" },
          {
            "name": "CooldownStartTime",
            "readonly": true,
            "documentation": ""
          },
          { "name": "Energy", "readonly": true, "documentation": "" },
          { "name": "EnergyCost", "readonly": true, "documentation": "" },
          { "name": "EnergyMax", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "SWebServicesTaskResult_GhostDriver_Download_Team": {
      "inherit": "",
      "enums": {},
      "props": {
        "Integer": [
          { "name": "TeamLevel", "readonly": false, "documentation": "" }
        ],
        "SWebServicesTaskResult_GhostDriver_Download_Member[]": [
          { "name": "Members", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CManiaAppPlayground": {
      "inherit": "CManiaAppPlaygroundCommon",
      "enums": {},
      "props": {
        "Boolean": [
          {
            "name": "HoldLoadingScreen",
            "readonly": false,
            "documentation": ""
          }
        ]
      },
      "methods": [
        {
          "name": "SendCustomEvent",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Type" },
            { "identifier": "Text[]", "argument": "Data" }
          ],
          "documentation": "Send a custom event to the CMode script."
        }
      ],
      "documentation": ""
    },
    "CManiaAppPlaygroundEvent": {
      "inherit": "CManiaAppEvent",
      "enums": {
        "Type": [
          "LayerCustomEvent",
          "KeyPress",
          "(reserved)",
          "MenuNavigation",
          "PlaygroundScriptEvent",
          "GhostAdded",
          "RecordUpdated",
          "RecordsUpdated",
          "OnPlayerTriggerSpecial",
          "OnPlayerTriggerWaypoint"
        ],
        "GameplaySpecialType": [
          "None",
          "Turbo",
          "Turbo2",
          "TurboRoulette",
          "FreeWheeling",
          "NoGrip",
          "NoSteering",
          "ForceAcceleration",
          "Reset",
          "SlowMotion",
          "Bumper",
          "Bumper2",
          "ReactorBoost_Legacy",
          "Fragile",
          "ReactorBoost2_Legacy",
          "Bouncy",
          "NoBrakes",
          "Cruise",
          "ReactorBoost_Oriented",
          "ReactorBoost2_Oriented",
          "XXX Null"
        ],
        "GameplayTurboRoulette": [
          "TurboRoulette_None",
          "TurboRoulette_1",
          "TurboRoulette_2",
          "TurboRoulette_3"
        ]
      },
      "props": {
        "CManiaAppPlaygroundEvent::Type": [
          { "name": "PlaygroundType", "readonly": true, "documentation": "" }
        ],
        "Text": [
          {
            "name": "PlaygroundScriptEventType",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Text[]": [
          {
            "name": "PlaygroundScriptEventData",
            "readonly": false,
            "documentation": ""
          }
        ],
        "CGhost": [{ "name": "Ghost", "readonly": true, "documentation": "" }],
        "CManiaAppPlaygroundEvent::GameplaySpecialType": [
          {
            "name": "GameplaySpecialType",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CManiaAppPlaygroundEvent::GameplayTurboRoulette": [
          {
            "name": "GameplayTurboRoulette",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          {
            "name": "IsBoostUpElseDown",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "DiffWithBestRace_IsValid",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "DiffWithBestLap_IsValid",
            "readonly": true,
            "documentation": ""
          },
          { "name": "IsFinish", "readonly": true, "documentation": "" },
          { "name": "IsNewLap", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "WaypointLandmarkIndex",
            "readonly": true,
            "documentation": ""
          },
          { "name": "RaceWaypointTime", "readonly": true, "documentation": "" },
          { "name": "DiffWithBestRace", "readonly": true, "documentation": "" },
          { "name": "LapWaypointTime", "readonly": true, "documentation": "" },
          { "name": "DiffWithBestLap", "readonly": true, "documentation": "" },
          {
            "name": "RaceWaypointCount",
            "readonly": true,
            "documentation": ""
          },
          { "name": "LapWaypointCount", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CHudModule": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "ModuleName", "readonly": false, "documentation": "" },
          { "name": "ModulePath", "readonly": true, "documentation": "" }
        ],
        "Real": [
          { "name": "PosX", "readonly": false, "documentation": "" },
          { "name": "PosY", "readonly": false, "documentation": "" },
          { "name": "ZIndex", "readonly": false, "documentation": "" },
          { "name": "Scale", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CMediaTrackerBlock": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Real": [
          { "name": "Start", "readonly": false, "documentation": "" },
          { "name": "End", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "GetKeyTime",
          "returns": "Real",
          "params": [{ "identifier": "Integer", "argument": "KeyIndex" }],
          "documentation": ""
        },
        {
          "name": "GetKeysCount",
          "returns": "Integer",
          "params": [],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CMatchSettingsPlaylistItem": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "Name",
            "readonly": true,
            "documentation": "Name of the map"
          }
        ],
        "Boolean": [
          {
            "name": "FileExists",
            "readonly": true,
            "documentation": "True if the file is found"
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNadeoServicesItemCollectionVersion": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Checksum", "readonly": true, "documentation": "" },
          { "name": "Id", "readonly": true, "documentation": "" },
          { "name": "Url", "readonly": true, "documentation": "" }
        ],
        "Integer": [
          {
            "name": "CreationTimeStamp",
            "readonly": true,
            "documentation": ""
          },
          { "name": "UpdateTimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSeasonMapInfo": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "MapId", "readonly": true, "documentation": "" }],
        "Ident": [{ "name": "MapUid", "readonly": true, "documentation": "" }],
        "Integer": [
          { "name": "BronzeScore", "readonly": true, "documentation": "" },
          { "name": "SilverScore", "readonly": true, "documentation": "" },
          { "name": "GoldScore", "readonly": true, "documentation": "" },
          { "name": "AuthorScore", "readonly": true, "documentation": "" },
          { "name": "TimeStamp", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CTrophySoloMedalAchievementLevelSettings": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "Level", "readonly": true, "documentation": "" }],
        "Integer": [
          { "name": "T1Count", "readonly": true, "documentation": "" },
          { "name": "T2Count", "readonly": true, "documentation": "" },
          { "name": "T3Count", "readonly": true, "documentation": "" },
          { "name": "T4Count", "readonly": true, "documentation": "" },
          { "name": "T5Count", "readonly": true, "documentation": "" },
          { "name": "T6Count", "readonly": true, "documentation": "" },
          { "name": "T7Count", "readonly": true, "documentation": "" },
          { "name": "T8Count", "readonly": true, "documentation": "" },
          { "name": "T9Count", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CNewsLink": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "Type", "readonly": true, "documentation": "" },
          { "name": "Param", "readonly": true, "documentation": "" },
          { "name": "ActionName", "readonly": true, "documentation": "" },
          { "name": "ActionDescription", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSquadInvitation": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "AccountId", "readonly": true, "documentation": "" },
          { "name": "CountryFlagUrl", "readonly": true, "documentation": "" },
          { "name": "DisplayName", "readonly": true, "documentation": "" },
          {
            "name": "PrestigeSkinOptions",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          {
            "name": "IsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CSkinInfo[]": [
          { "name": "SkinList", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CSquadMember": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          { "name": "AccountId", "readonly": true, "documentation": "" },
          { "name": "CountryFlagUrl", "readonly": true, "documentation": "" },
          { "name": "DisplayName", "readonly": true, "documentation": "" },
          {
            "name": "PrestigeSkinOptions",
            "readonly": true,
            "documentation": ""
          }
        ],
        "Boolean": [
          {
            "name": "IsFirstPartyDisplayName",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CSkinInfo[]": [
          { "name": "SkinList", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CPackCreatorPack": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Ident": [
          {
            "name": "PackId",
            "readonly": true,
            "documentation": "PackId is the TitleId if the pack is a TitlePack."
          },
          { "name": "CreatorId", "readonly": true, "documentation": "" }
        ],
        "Boolean": [
          { "name": "IsTitlePack", "readonly": true, "documentation": "" }
        ],
        "CPackCreatorRecipient[]": [
          { "name": "Recipients", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [
        {
          "name": "Recipients_Add",
          "returns": "Void",
          "params": [
            { "identifier": "Text", "argument": "Login" },
            { "identifier": "Integer", "argument": "UseCost" },
            { "identifier": "Integer", "argument": "GetCost" }
          ],
          "documentation": ""
        },
        {
          "name": "Recipients_Remove",
          "returns": "Void",
          "params": [{ "identifier": "Text", "argument": "Login" }],
          "documentation": ""
        }
      ],
      "documentation": ""
    },
    "CBlockModelVariant": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [{ "name": "Name", "readonly": false, "documentation": "" }],
        "Boolean": [
          { "name": "IsAllUnderground", "readonly": true, "documentation": "" },
          { "name": "IsPartUnderground", "readonly": true, "documentation": "" }
        ],
        "Int3": [
          { "name": "Size", "readonly": true, "documentation": "" },
          {
            "name": "OffsetBoundingBoxMin",
            "readonly": true,
            "documentation": ""
          },
          {
            "name": "OffsetBoundingBoxMax",
            "readonly": true,
            "documentation": ""
          }
        ],
        "CBlockUnitModel[]": [
          { "name": "BlockUnitModels", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CBlockUnitModel": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Int3": [
          { "name": "RelativeOffset", "readonly": true, "documentation": "" }
        ],
        "CBlockModelClip[]": [
          { "name": "Clips", "readonly": true, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "SWebServicesTaskResult_GhostDriver_Download_Member": {
      "inherit": "",
      "enums": {},
      "props": {
        "SWebServicesTaskResult_GhostDriver_Download_Ghost[]": [
          { "name": "Ghosts", "readonly": false, "documentation": "" }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CPackCreatorRecipient": {
      "inherit": "CNod",
      "enums": {},
      "props": {
        "Text": [
          {
            "name": "Login",
            "readonly": true,
            "documentation": "Login of the recipient."
          }
        ],
        "Integer": [
          {
            "name": "GetCost",
            "readonly": true,
            "documentation": "Cost to read the data (and see it ingame)."
          },
          {
            "name": "UseCost",
            "readonly": true,
            "documentation": "Cost to use the in other creations."
          }
        ]
      },
      "methods": [],
      "documentation": ""
    },
    "CBlockModelClip": {
      "inherit": "CBlockModel",
      "enums": {},
      "props": {},
      "methods": [],
      "documentation": ""
    },
    "SWebServicesTaskResult_GhostDriver_Download_Ghost": {
      "inherit": "",
      "enums": {},
      "props": {
        "CGhost": [{ "name": "Ghost", "readonly": false, "documentation": "" }]
      },
      "methods": [],
      "documentation": ""
    }
  }
}
